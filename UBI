{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4249858b",
   "metadata": {},
   "source": [
    "# Projet DU BIG DATA ABRAHAM KRAH \n",
    "\n",
    "\n",
    "\n",
    "### Étape 1 : Prétraitement des Données\n",
    "\n",
    "#### 1. Chargement des Données\n",
    "\n",
    "#### 2. Nettoyage des données\n",
    "- **Valeurs manquantes** \n",
    "- **Format des données** \n",
    "- **Doublons** \n",
    "- **Détection et traitement des outliers** : Identification des valeurs aberrantes à l'aide de méthodes statistiques, comme l'IQR.\n",
    "#### 3. Fusion des données\n",
    "\n",
    "\n",
    "### Étape 2 : Analyse Exploratoire des Données (EDA)\n",
    "\n",
    "#### 1. Statistiques Descriptives\n",
    "\n",
    "#### 2. Visualisation des données\n",
    "- **Histogrammes** pour visualiser les distributions des variables continues.\n",
    "- **Boîtes à moustaches** pour voir les outliers et la dispersion des données.\n",
    "- **Graphiques à barres** pour les variables catégorielles.\n",
    "\n",
    "#### 3. Corrélations\n",
    "\n",
    "### Étape 3: Analyse économétrique\n",
    "\n",
    "### Étape 3: machine learning (classification + régression)\n",
    "\n",
    "Dans une logique business, j'ai décidé de centrer mes analyses sur AMT_Claim, le montant que l'assurance débourse pour les sinistres afin de pouvoir effectuer des provisions ou adapter les montants des polices d'assurance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "id": "20e3db71",
   "metadata": {},
   "outputs": [],
   "source": [
    "#packages utilisés\n",
    "import pandas as pd\n",
    "import matplotlib as plt\n",
    "from matplotlib import pyplot\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.cluster import KMeans\n",
    "from scipy.stats import pearsonr\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "import statsmodels.api as sm\n",
    "from sklearn.model_selection import train_test_split\n",
    "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import confusion_matrix, classification_report, roc_curve, auc\n",
    "from sklearn.preprocessing import OneHotEncoder, StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6bbd12e8",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/df/tzlk6_xs46dbdsn2dm2mr21m0000gp/T/ipykernel_31415/3083344852.py:2: FutureWarning: In a future version of pandas all arguments of read_csv except for the argument 'filepath_or_buffer' will be keyword-only.\n",
      "  telematics_data = pd.read_csv('DB_TELEMATICS.csv',';')\n"
     ]
    }
   ],
   "source": [
    "# Charger DB_TELEMATICS.csv\n",
    "telematics_data = pd.read_csv('DB_TELEMATICS.csv',';')\n",
    "\n",
    "# Charger DB_SIN.txt\n",
    "claims_data = pd.read_csv('DB_SIN.txt', delimiter='\\t')  \n",
    "\n",
    "# Charger DB_CNT.xlsx\n",
    "contract_data = pd.read_excel('DB_CNT.xlsx',sheet_name=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7d7652a4",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id_pol</th>\n",
       "      <th>Annual.pct.driven</th>\n",
       "      <th>Total.miles.driven</th>\n",
       "      <th>Pct.drive.mon</th>\n",
       "      <th>Pct.drive.tue</th>\n",
       "      <th>Pct.drive.wed</th>\n",
       "      <th>Pct.drive.thr</th>\n",
       "      <th>Pct.drive.fri</th>\n",
       "      <th>Pct.drive.sat</th>\n",
       "      <th>Pct.drive.sun</th>\n",
       "      <th>...</th>\n",
       "      <th>Left.turn.intensity08</th>\n",
       "      <th>Left.turn.intensity09</th>\n",
       "      <th>Left.turn.intensity10</th>\n",
       "      <th>Left.turn.intensity11</th>\n",
       "      <th>Left.turn.intensity12</th>\n",
       "      <th>Right.turn.intensity08</th>\n",
       "      <th>Right.turn.intensity09</th>\n",
       "      <th>Right.turn.intensity10</th>\n",
       "      <th>Right.turn.intensity11</th>\n",
       "      <th>Right.turn.intensity12</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>cnt_122389</td>\n",
       "      <td>0,997260274</td>\n",
       "      <td>5372,837273</td>\n",
       "      <td>0,192885196</td>\n",
       "      <td>0,169068979</td>\n",
       "      <td>0,197889028</td>\n",
       "      <td>0,184917416</td>\n",
       "      <td>0,16189224</td>\n",
       "      <td>0,056223054</td>\n",
       "      <td>0,037124086</td>\n",
       "      <td>...</td>\n",
       "      <td>2366.0</td>\n",
       "      <td>1609.0</td>\n",
       "      <td>751.0</td>\n",
       "      <td>339.0</td>\n",
       "      <td>107.0</td>\n",
       "      <td>766.0</td>\n",
       "      <td>366.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>cnt_125019</td>\n",
       "      <td>0,912328767</td>\n",
       "      <td>5780,818246</td>\n",
       "      <td>0,103235423</td>\n",
       "      <td>0,11866897</td>\n",
       "      <td>0,107923307</td>\n",
       "      <td>0,137310889</td>\n",
       "      <td>0,174103462</td>\n",
       "      <td>0,203041338</td>\n",
       "      <td>0,155716612</td>\n",
       "      <td>...</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>cnt_181154</td>\n",
       "      <td>0,526027397</td>\n",
       "      <td>9149,738331</td>\n",
       "      <td>0,116469365</td>\n",
       "      <td>0,145887688</td>\n",
       "      <td>0,13527532</td>\n",
       "      <td>0,173257616</td>\n",
       "      <td>0,160496263</td>\n",
       "      <td>0,084183125</td>\n",
       "      <td>0,184430624</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>cnt_140021</td>\n",
       "      <td>1</td>\n",
       "      <td>10582,26663</td>\n",
       "      <td>0,144175656</td>\n",
       "      <td>0,151476187</td>\n",
       "      <td>0,168558752</td>\n",
       "      <td>0,171549272</td>\n",
       "      <td>0,177907998</td>\n",
       "      <td>0,114748693</td>\n",
       "      <td>0,071583442</td>\n",
       "      <td>...</td>\n",
       "      <td>736.0</td>\n",
       "      <td>295.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>656.0</td>\n",
       "      <td>294.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>cnt_170356</td>\n",
       "      <td>0,75890411</td>\n",
       "      <td>9412,021708</td>\n",
       "      <td>0,109676276</td>\n",
       "      <td>0,152352793</td>\n",
       "      <td>0,151707136</td>\n",
       "      <td>0,160847296</td>\n",
       "      <td>0,140824794</td>\n",
       "      <td>0,151463464</td>\n",
       "      <td>0,133128241</td>\n",
       "      <td>...</td>\n",
       "      <td>33.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100327</th>\n",
       "      <td>cnt_215461</td>\n",
       "      <td>0,22739726</td>\n",
       "      <td>1805,053586</td>\n",
       "      <td>0,069532689</td>\n",
       "      <td>0,199659464</td>\n",
       "      <td>0,106125289</td>\n",
       "      <td>0,278542941</td>\n",
       "      <td>0,202474321</td>\n",
       "      <td>0,103859745</td>\n",
       "      <td>0,039805551</td>\n",
       "      <td>...</td>\n",
       "      <td>29.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>109.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100328</th>\n",
       "      <td>cnt_206415</td>\n",
       "      <td>0,961643836</td>\n",
       "      <td>4513,087229</td>\n",
       "      <td>0,152835123</td>\n",
       "      <td>0,153833202</td>\n",
       "      <td>0,105779641</td>\n",
       "      <td>0,155288418</td>\n",
       "      <td>0,123644011</td>\n",
       "      <td>0,180593479</td>\n",
       "      <td>0,128026127</td>\n",
       "      <td>...</td>\n",
       "      <td>60.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>595.0</td>\n",
       "      <td>230.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100329</th>\n",
       "      <td>cnt_187472</td>\n",
       "      <td>0.498630137</td>\n",
       "      <td>7645.396934038791</td>\n",
       "      <td>0.119524428</td>\n",
       "      <td>0.140343686</td>\n",
       "      <td>0.131523148</td>\n",
       "      <td>0.142210447</td>\n",
       "      <td>0.10569621</td>\n",
       "      <td>0.268427804</td>\n",
       "      <td>0.092274277</td>\n",
       "      <td>...</td>\n",
       "      <td>81.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>137.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100330</th>\n",
       "      <td>cnt_193966</td>\n",
       "      <td>0.983561644</td>\n",
       "      <td>9354.42693575792</td>\n",
       "      <td>0.072627342</td>\n",
       "      <td>0.147821284</td>\n",
       "      <td>0.198007487</td>\n",
       "      <td>0.10910057</td>\n",
       "      <td>0.180183148</td>\n",
       "      <td>0.192656561</td>\n",
       "      <td>0.099603607</td>\n",
       "      <td>...</td>\n",
       "      <td>329.0</td>\n",
       "      <td>180.0</td>\n",
       "      <td>71.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>217.0</td>\n",
       "      <td>119.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100331</th>\n",
       "      <td>cnt_129620</td>\n",
       "      <td>0,304109589</td>\n",
       "      <td>2013,059079</td>\n",
       "      <td>0,095567553</td>\n",
       "      <td>0,144426148</td>\n",
       "      <td>0,146339543</td>\n",
       "      <td>0,151470482</td>\n",
       "      <td>0,190755191</td>\n",
       "      <td>0,125101541</td>\n",
       "      <td>0,146339542</td>\n",
       "      <td>...</td>\n",
       "      <td>50.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>472.0</td>\n",
       "      <td>119.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100332 rows × 40 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Id_pol Annual.pct.driven Total.miles.driven Pct.drive.mon  \\\n",
       "0       cnt_122389       0,997260274        5372,837273   0,192885196   \n",
       "1       cnt_125019       0,912328767        5780,818246   0,103235423   \n",
       "2       cnt_181154       0,526027397        9149,738331   0,116469365   \n",
       "3       cnt_140021                 1        10582,26663   0,144175656   \n",
       "4       cnt_170356        0,75890411        9412,021708   0,109676276   \n",
       "...            ...               ...                ...           ...   \n",
       "100327  cnt_215461        0,22739726        1805,053586   0,069532689   \n",
       "100328  cnt_206415       0,961643836        4513,087229   0,152835123   \n",
       "100329  cnt_187472       0.498630137  7645.396934038791   0.119524428   \n",
       "100330  cnt_193966       0.983561644   9354.42693575792   0.072627342   \n",
       "100331  cnt_129620       0,304109589        2013,059079   0,095567553   \n",
       "\n",
       "       Pct.drive.tue Pct.drive.wed Pct.drive.thr Pct.drive.fri Pct.drive.sat  \\\n",
       "0        0,169068979   0,197889028   0,184917416    0,16189224   0,056223054   \n",
       "1         0,11866897   0,107923307   0,137310889   0,174103462   0,203041338   \n",
       "2        0,145887688    0,13527532   0,173257616   0,160496263   0,084183125   \n",
       "3        0,151476187   0,168558752   0,171549272   0,177907998   0,114748693   \n",
       "4        0,152352793   0,151707136   0,160847296   0,140824794   0,151463464   \n",
       "...              ...           ...           ...           ...           ...   \n",
       "100327   0,199659464   0,106125289   0,278542941   0,202474321   0,103859745   \n",
       "100328   0,153833202   0,105779641   0,155288418   0,123644011   0,180593479   \n",
       "100329   0.140343686   0.131523148   0.142210447    0.10569621   0.268427804   \n",
       "100330   0.147821284   0.198007487    0.10910057   0.180183148   0.192656561   \n",
       "100331   0,144426148   0,146339543   0,151470482   0,190755191   0,125101541   \n",
       "\n",
       "       Pct.drive.sun  ... Left.turn.intensity08 Left.turn.intensity09  \\\n",
       "0        0,037124086  ...                2366.0                1609.0   \n",
       "1        0,155716612  ...                   4.0                   1.0   \n",
       "2        0,184430624  ...                   0.0                   0.0   \n",
       "3        0,071583442  ...                 736.0                 295.0   \n",
       "4        0,133128241  ...                  33.0                  12.0   \n",
       "...              ...  ...                   ...                   ...   \n",
       "100327   0,039805551  ...                  29.0                   6.0   \n",
       "100328   0,128026127  ...                  60.0                  14.0   \n",
       "100329   0.092274277  ...                  81.0                  21.0   \n",
       "100330   0.099603607  ...                 329.0                 180.0   \n",
       "100331   0,146339542  ...                  50.0                  11.0   \n",
       "\n",
       "       Left.turn.intensity10 Left.turn.intensity11 Left.turn.intensity12  \\\n",
       "0                      751.0                 339.0                 107.0   \n",
       "1                        0.0                   0.0                   0.0   \n",
       "2                        0.0                   0.0                   0.0   \n",
       "3                       58.0                  16.0                   6.0   \n",
       "4                        2.0                   1.0                   0.0   \n",
       "...                      ...                   ...                   ...   \n",
       "100327                   0.0                   0.0                   0.0   \n",
       "100328                   2.0                   1.0                   0.0   \n",
       "100329                   2.0                   0.0                   0.0   \n",
       "100330                  71.0                  35.0                  17.0   \n",
       "100331                   0.0                   0.0                   0.0   \n",
       "\n",
       "       Right.turn.intensity08 Right.turn.intensity09 Right.turn.intensity10  \\\n",
       "0                       766.0                  366.0                   91.0   \n",
       "1                         5.0                    0.0                    0.0   \n",
       "2                         0.0                    0.0                    0.0   \n",
       "3                       656.0                  294.0                   65.0   \n",
       "4                        39.0                   14.0                    2.0   \n",
       "...                       ...                    ...                    ...   \n",
       "100327                  109.0                   24.0                    2.0   \n",
       "100328                  595.0                  230.0                   42.0   \n",
       "100329                  137.0                   41.0                    7.0   \n",
       "100330                  217.0                  119.0                   43.0   \n",
       "100331                  472.0                  119.0                   16.0   \n",
       "\n",
       "        Right.turn.intensity11  Right.turn.intensity12  \n",
       "0                         35.0                     8.0  \n",
       "1                          0.0                     0.0  \n",
       "2                          0.0                     0.0  \n",
       "3                         18.0                     4.0  \n",
       "4                          0.0                     0.0  \n",
       "...                        ...                     ...  \n",
       "100327                     0.0                     0.0  \n",
       "100328                    15.0                     8.0  \n",
       "100329                     2.0                     1.0  \n",
       "100330                    21.0                    12.0  \n",
       "100331                     3.0                     0.0  \n",
       "\n",
       "[100332 rows x 40 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "telematics_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ef2e9dd4",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id_pol</th>\n",
       "      <th>NB_Claim</th>\n",
       "      <th>AMT_Claim</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>212433</td>\n",
       "      <td>1</td>\n",
       "      <td>1137,079102</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>124370</td>\n",
       "      <td>1</td>\n",
       "      <td>3170,102051</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>208357</td>\n",
       "      <td>1</td>\n",
       "      <td>3753,909668</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>141403</td>\n",
       "      <td>1</td>\n",
       "      <td>16,03637695</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>173366</td>\n",
       "      <td>1</td>\n",
       "      <td>41774,71289</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4332</th>\n",
       "      <td>181390</td>\n",
       "      <td>1</td>\n",
       "      <td>3507,032593</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4333</th>\n",
       "      <td>125458</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4334</th>\n",
       "      <td>185300</td>\n",
       "      <td>1</td>\n",
       "      <td>484,9214172</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4335</th>\n",
       "      <td>175683</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4336</th>\n",
       "      <td>215717</td>\n",
       "      <td>1</td>\n",
       "      <td>6034,40625</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4337 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Id_pol NB_Claim    AMT_Claim\n",
       "0     212433        1  1137,079102\n",
       "1     124370        1  3170,102051\n",
       "2     208357        1  3753,909668\n",
       "3     141403        1  16,03637695\n",
       "4     173366        1  41774,71289\n",
       "...      ...      ...          ...\n",
       "4332  181390        1  3507,032593\n",
       "4333  125458        1            0\n",
       "4334  185300        1  484,9214172\n",
       "4335  175683        1            0\n",
       "4336  215717        1   6034,40625\n",
       "\n",
       "[4337 rows x 3 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "claims_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "786aca59",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id_pol</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Insured.age</th>\n",
       "      <th>Insured.sex</th>\n",
       "      <th>Car.age</th>\n",
       "      <th>Marital</th>\n",
       "      <th>Car.use</th>\n",
       "      <th>Credit.score</th>\n",
       "      <th>Region</th>\n",
       "      <th>Annual.miles.drive</th>\n",
       "      <th>Years.noclaims</th>\n",
       "      <th>Territory</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>121744</td>\n",
       "      <td>365</td>\n",
       "      <td>59</td>\n",
       "      <td>Female</td>\n",
       "      <td>5</td>\n",
       "      <td>Single</td>\n",
       "      <td>Private</td>\n",
       "      <td>491.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.42</td>\n",
       "      <td>40</td>\n",
       "      <td>77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>123584</td>\n",
       "      <td>182</td>\n",
       "      <td>32</td>\n",
       "      <td>F</td>\n",
       "      <td>10</td>\n",
       "      <td>Married</td>\n",
       "      <td>Private</td>\n",
       "      <td>730.0</td>\n",
       "      <td>Rural</td>\n",
       "      <td>6213.71</td>\n",
       "      <td>4</td>\n",
       "      <td>89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>133223</td>\n",
       "      <td>365</td>\n",
       "      <td>59</td>\n",
       "      <td>F</td>\n",
       "      <td>9</td>\n",
       "      <td>Single</td>\n",
       "      <td>Commute</td>\n",
       "      <td>689.0</td>\n",
       "      <td>Rural</td>\n",
       "      <td>12427.42</td>\n",
       "      <td>41</td>\n",
       "      <td>85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>124356</td>\n",
       "      <td>237</td>\n",
       "      <td>54</td>\n",
       "      <td>Male</td>\n",
       "      <td>8</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>794.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>6213.71</td>\n",
       "      <td>37</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>192713</td>\n",
       "      <td>365</td>\n",
       "      <td>40</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>880.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.42</td>\n",
       "      <td>8</td>\n",
       "      <td>76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100394</th>\n",
       "      <td>130825</td>\n",
       "      <td>365</td>\n",
       "      <td>31</td>\n",
       "      <td>Female</td>\n",
       "      <td>5</td>\n",
       "      <td>Married</td>\n",
       "      <td>Private</td>\n",
       "      <td>743.0</td>\n",
       "      <td>Rural</td>\n",
       "      <td>12427.42</td>\n",
       "      <td>15</td>\n",
       "      <td>86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100395</th>\n",
       "      <td>137315</td>\n",
       "      <td>354</td>\n",
       "      <td>45</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>813.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.42</td>\n",
       "      <td>3</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100396</th>\n",
       "      <td>205973</td>\n",
       "      <td>365</td>\n",
       "      <td>64</td>\n",
       "      <td>F</td>\n",
       "      <td>8</td>\n",
       "      <td>Single</td>\n",
       "      <td>Private</td>\n",
       "      <td>816.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>6213.71</td>\n",
       "      <td>44</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100397</th>\n",
       "      <td>177552</td>\n",
       "      <td>330</td>\n",
       "      <td>49</td>\n",
       "      <td>Male</td>\n",
       "      <td>6</td>\n",
       "      <td>Single</td>\n",
       "      <td>Private</td>\n",
       "      <td>883.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.42</td>\n",
       "      <td>32</td>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100398</th>\n",
       "      <td>178187</td>\n",
       "      <td>365</td>\n",
       "      <td>63</td>\n",
       "      <td>H</td>\n",
       "      <td>-1</td>\n",
       "      <td>Married</td>\n",
       "      <td>Private</td>\n",
       "      <td>815.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>6213.71</td>\n",
       "      <td>42</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100399 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Id_pol  Duration  Insured.age Insured.sex  Car.age  Marital  Car.use  \\\n",
       "0       121744       365           59      Female        5   Single  Private   \n",
       "1       123584       182           32           F       10  Married  Private   \n",
       "2       133223       365           59           F        9   Single  Commute   \n",
       "3       124356       237           54        Male        8  Married  Commute   \n",
       "4       192713       365           40      Female        0  Married  Commute   \n",
       "...        ...       ...          ...         ...      ...      ...      ...   \n",
       "100394  130825       365           31      Female        5  Married  Private   \n",
       "100395  137315       354           45        Male        0  Married  Commute   \n",
       "100396  205973       365           64           F        8   Single  Private   \n",
       "100397  177552       330           49        Male        6   Single  Private   \n",
       "100398  178187       365           63           H       -1  Married  Private   \n",
       "\n",
       "        Credit.score Region  Annual.miles.drive Years.noclaims  Territory  \n",
       "0              491.0  Urban            12427.42             40         77  \n",
       "1              730.0  Rural             6213.71              4         89  \n",
       "2              689.0  Rural            12427.42             41         85  \n",
       "3              794.0  Urban             6213.71             37         70  \n",
       "4              880.0  Urban            12427.42              8         76  \n",
       "...              ...    ...                 ...            ...        ...  \n",
       "100394         743.0  Rural            12427.42             15         86  \n",
       "100395         813.0  Urban            12427.42              3         39  \n",
       "100396         816.0  Urban             6213.71             44         26  \n",
       "100397         883.0  Urban            12427.42             32         88  \n",
       "100398         815.0  Urban             6213.71             42         70  \n",
       "\n",
       "[100399 rows x 12 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "contract_data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07a223b4",
   "metadata": {},
   "source": [
    "# Prétraitement + EDA de claims_data\n",
    "\n",
    "Cette base de données contient des informations détaillées sur les réclamations faites par les assurés. Les variables principales qu'on y trouve incluent :\n",
    "\n",
    "- Id_pol : L'identifiant de la police d'assurance, permettant de lier ces données avec d'autres bases de données comme 'contract_data' et 'telematics_data'.\n",
    "\n",
    "- NB_Claim : Le nombre de réclamations déposées par le détenteur de la police pendant la période observée. Cette information est cruciale pour analyser la fréquence des sinistres.\n",
    "\n",
    "- AMT_Claim: Le montant total des réclamations déposées par le détenteur de la police. Ce montant est essentiel pour évaluer la sévérité des sinistres et leur impact financier.\n",
    "\n",
    "NB: Le terme AMT_Claim fait référence au montant total des réclamations déposées, qui est généralement le coût des sinistres pour l'assureur. Cela représente le montant d'argent que l'assureur a dû payer ou s'engage à payer pour couvrir les réclamations faites par l'assuré en vertu de la politique d'assurance. Ces montants sont ceux que l'assureur débourse pour réparer les dommages, couvrir les pertes ou payer les coûts associés aux sinistres déclarés par les assurés.\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "5cf87a7f",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       1137.079102\n",
       "1       3170.102051\n",
       "2       3753.909668\n",
       "3       16.03637695\n",
       "4       41774.71289\n",
       "           ...     \n",
       "4332    3507.032593\n",
       "4333              0\n",
       "4334    484.9214172\n",
       "4335              0\n",
       "4336     6034.40625\n",
       "Name: AMT_Claim, Length: 4337, dtype: object"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "claims_data['AMT_Claim']=claims_data['AMT_Claim'].str.replace(',','.') \n",
    "claims_data['AMT_Claim']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f7255b77",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1             4131\n",
       "2              170\n",
       "NB_CLAIM:1      23\n",
       "3               11\n",
       "NB_CLAIM:2       2\n",
       "Name: NB_Claim, dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "claims_data['NB_Claim'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "01661d2e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Id_pol        int64\n",
       "NB_Claim     object\n",
       "AMT_Claim    object\n",
       "dtype: object"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "claims_data.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e10ca88f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#on uniformise les valeurs de la colonne NB_Claim\n",
    "claims_data['NB_Claim']=claims_data['NB_Claim'].str.replace('NB_CLAIM:1','1')\n",
    "claims_data['NB_Claim']=claims_data['NB_Claim'].str.replace('NB_CLAIM:2','2')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "fd393bc1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    4154\n",
       "2     172\n",
       "3      11\n",
       "Name: NB_Claim, dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "claims_data['NB_Claim'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b2c63c90",
   "metadata": {},
   "outputs": [],
   "source": [
    "#on peut maintenant convertir NB_claims en integer vu qu'il s'agit d'une variable de comptage\n",
    "claims_data['NB_Claim'] = claims_data['NB_Claim'].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "04485137",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0              436\n",
       "ANN             37\n",
       "279.9525146      9\n",
       "477.3110047      7\n",
       "1710.054932      2\n",
       "              ... \n",
       "9324.375         1\n",
       "1164.303863      1\n",
       "1625.644409      1\n",
       "4381.549073      1\n",
       "6034.40625       1\n",
       "Name: AMT_Claim, Length: 3851, dtype: int64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#on passe maintenant au prétraitement de AMT_Claim\n",
    "claims_data['AMT_Claim'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "cb1628d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "#on va remplacer ANN par des NaN(valeurs manquantes)\n",
    "claims_data['AMT_Claim']=claims_data['AMT_Claim'].str.replace('ANN','NaN')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "3e907aee",
   "metadata": {},
   "outputs": [],
   "source": [
    "#on peut maintenant convertir la colonne en float\n",
    "claims_data['AMT_Claim'] = claims_data['AMT_Claim'].astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "e3b24d27",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "37"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "claims_data['AMT_Claim'].isnull().sum() #Le nombre de valeurs manquantes dans claims_data correspond bien au nombre de ANN(37)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "664b1809",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Id_pol        0\n",
       "NB_Claim      0\n",
       "AMT_Claim    37\n",
       "dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "claims_data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "1bdf6535",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id_pol</th>\n",
       "      <th>NB_Claim</th>\n",
       "      <th>AMT_Claim</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2859</th>\n",
       "      <td>149978</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3954</th>\n",
       "      <td>161618</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Id_pol  NB_Claim  AMT_Claim\n",
       "2859  149978         1        0.0\n",
       "3954  161618         1        0.0"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "claims_data[claims_data.duplicated()==True]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "7d0656e7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id_pol</th>\n",
       "      <th>NB_Claim</th>\n",
       "      <th>AMT_Claim</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>695</th>\n",
       "      <td>161618</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3954</th>\n",
       "      <td>161618</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Id_pol  NB_Claim  AMT_Claim\n",
       "695   161618         1        0.0\n",
       "3954  161618         1        0.0"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "claims_data[claims_data['Id_pol']==161618]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "473b200f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#suppression des doublons purs de claims_data\n",
    "claims_data=claims_data[claims_data.duplicated()!=True]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "bc824089",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 4335 entries, 0 to 4336\n",
      "Data columns (total 3 columns):\n",
      " #   Column     Non-Null Count  Dtype  \n",
      "---  ------     --------------  -----  \n",
      " 0   Id_pol     4335 non-null   int64  \n",
      " 1   NB_Claim   4335 non-null   int64  \n",
      " 2   AMT_Claim  4298 non-null   float64\n",
      "dtypes: float64(1), int64(2)\n",
      "memory usage: 135.5 KB\n"
     ]
    }
   ],
   "source": [
    "claims_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "aeaad927",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#doublons sur la base de l'id du contrat\n",
    "duplicates_claim=claims_data[claims_data.duplicated(subset='Id_pol',keep=False)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "979d1e0a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 4309 entries, 0 to 4336\n",
      "Data columns (total 3 columns):\n",
      " #   Column     Non-Null Count  Dtype  \n",
      "---  ------     --------------  -----  \n",
      " 0   Id_pol     4309 non-null   int64  \n",
      " 1   NB_Claim   4309 non-null   int64  \n",
      " 2   AMT_Claim  4272 non-null   float64\n",
      "dtypes: float64(1), int64(2)\n",
      "memory usage: 134.7 KB\n"
     ]
    }
   ],
   "source": [
    "# On filtre pour obtenir seulement les doublons avec un AMT nul\n",
    "duplicates_with_zero_amt = duplicates_claim[duplicates_claim['AMT_Claim'] == 0]\n",
    "\n",
    "# On utilise l'index des doublons avec AMT nul pour les exclure du dataframe original\n",
    "claims_data = claims_data.drop(duplicates_with_zero_amt.index)\n",
    "\n",
    "claims_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "c348cde9",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NB_Claim</th>\n",
       "      <th>AMT_Claim</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Id_pol</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>212433</th>\n",
       "      <td>1</td>\n",
       "      <td>1137.079102</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124370</th>\n",
       "      <td>1</td>\n",
       "      <td>3170.102051</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>208357</th>\n",
       "      <td>1</td>\n",
       "      <td>3753.909668</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>141403</th>\n",
       "      <td>1</td>\n",
       "      <td>16.036377</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>173366</th>\n",
       "      <td>1</td>\n",
       "      <td>41774.712890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>181390</th>\n",
       "      <td>1</td>\n",
       "      <td>3507.032593</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125458</th>\n",
       "      <td>1</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>185300</th>\n",
       "      <td>1</td>\n",
       "      <td>484.921417</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>175683</th>\n",
       "      <td>1</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>215717</th>\n",
       "      <td>1</td>\n",
       "      <td>6034.406250</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4309 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        NB_Claim     AMT_Claim\n",
       "Id_pol                        \n",
       "212433         1   1137.079102\n",
       "124370         1   3170.102051\n",
       "208357         1   3753.909668\n",
       "141403         1     16.036377\n",
       "173366         1  41774.712890\n",
       "...          ...           ...\n",
       "181390         1   3507.032593\n",
       "125458         1      0.000000\n",
       "185300         1    484.921417\n",
       "175683         1      0.000000\n",
       "215717         1   6034.406250\n",
       "\n",
       "[4309 rows x 2 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Id_pol sera notre index\n",
    "claims_data.set_index('Id_pol')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "2d1bb9a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "claims_data['Id_pol']=claims_data['Id_pol'].astype(str) #convertir l'Id en chaîne de caractère"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "ec8eed60",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id_pol</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>4309</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>4309</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>212433</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Id_pol\n",
       "count     4309\n",
       "unique    4309\n",
       "top     212433\n",
       "freq         1"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "claims_data.describe(include='object')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55859c97",
   "metadata": {},
   "source": [
    "# EDA claims_data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf3fcfe9",
   "metadata": {},
   "source": [
    "### Représentations graphiques pour claims_data\n",
    "L'histogramme et le diagramme à barres (ou bar chart) sont deux types de visualisations graphiques souvent utilisés en analyse de données, mais ils servent à illustrer des types de données différents et offrent des perspectives distinctes :\n",
    "\n",
    "#### Histogramme\n",
    "- **Utilisation** : Un histogramme est utilisé principalement pour représenter la distribution de données quantitatives continues ou discrètes mais regroupées en intervalles continus (bins). Il montre la fréquence des données dans chaque intervalle de classe, ce qui permet de comprendre la distribution générale de ces données (par exemple, normale, biaisée, etc.).\n",
    "- **Axes** : L'axe des x représente les intervalles de classe pour les données (par exemple, des gammes de valeurs numériques), et l'axe des y indique la fréquence des données dans chaque intervalle.\n",
    "- **Apparence** : Les barres d'un histogramme sont collées les unes aux autres pour souligner que les données sont continues sur l'axe des x, indiquant une progression naturelle d'une classe à l'autre sans interruption.\n",
    "\n",
    "#### Diagramme à barres\n",
    "- **Utilisation** : Un diagramme à barres est utilisé pour représenter des données catégorielles ou des données quantitatives discrètes. Il est idéal pour comparer des quantités entre différentes catégories (par exemple, le nombre de personnes dans différents groupes d'âge, les ventes par région, etc.).\n",
    "- **Axes** : L'axe des x montre les différentes catégories, et l'axe des y montre les mesures correspondantes (souvent une mesure de fréquence, des totaux ou des moyennes).\n",
    "- **Apparence** : Les barres dans un diagramme à barres sont séparées par des espaces pour indiquer que les catégories sont distinctes et non reliées les unes aux autres, soulignant l'absence de continuité ordonnée entre les catégories.\n",
    "\n",
    "\n",
    "Chaque type de graphique aide à visualiser les données d'une manière qui met en évidence les caractéristiques pertinentes pour l'analyse, comme la distribution dans le cas de l'histogramme ou la comparaison entre groupes pour le diagramme à barres.\n",
    "\n",
    "Nous uiliserons l'histogramme pour AMT_Claim et le diagramme à barres pour NB_Claim vu qu'il s'agit d'une variable de comptage."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "7abd827a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NB_Claim</th>\n",
       "      <th>AMT_Claim</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>4309.000000</td>\n",
       "      <td>4272.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.045022</td>\n",
       "      <td>3183.896842</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.219344</td>\n",
       "      <td>5160.610717</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>522.867874</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1713.142639</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>3742.021362</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>104074.886700</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          NB_Claim      AMT_Claim\n",
       "count  4309.000000    4272.000000\n",
       "mean      1.045022    3183.896842\n",
       "std       0.219344    5160.610717\n",
       "min       1.000000       0.000000\n",
       "25%       1.000000     522.867874\n",
       "50%       1.000000    1713.142639\n",
       "75%       1.000000    3742.021362\n",
       "max       3.000000  104074.886700"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "claims_data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c152511b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'histogramme montrant la distribution des données de AMT_Claim')"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#histogramme montrant la distribution des données de AMT_Claim\n",
    "\n",
    "plt.pyplot.hist(claims_data[\"AMT_Claim\"])\n",
    "\n",
    "# set x/y labels and plot title\n",
    "plt.pyplot.xlabel(\"Montant des réclamations\")\n",
    "plt.pyplot.ylabel(\"count\")\n",
    "plt.pyplot.title(\"histogramme montrant la distribution des données de AMT_Claim\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab9e1926",
   "metadata": {},
   "source": [
    "Nous constatons grâce à l'histogramme que la grande majorité des réclamations dans 'claims_data' a un montant compris entre 0 et 20000. \n",
    "L'observation d'une majorité de montants de réclamations se regroupant entre 0 et 20,000 pourrait suggérer une distribution gamma, étant donné que cette distribution est souvent utilisée pour modéliser des données qui sont fortement asymétriques et limitées à des valeurs positives. La forme de la distribution gamma correspond bien à cette concentration de valeurs basses avec une longue queue vers des valeurs plus élevées."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "1e7c4ef5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Montant des Réclamations')"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "#boîte à moustache du montant des sinistres\n",
    "sns.boxplot(x=claims_data['AMT_Claim'])\n",
    "plt.pyplot.title('Boxplot des Montants des Réclamations')\n",
    "plt.pyplot.xlabel('Montant des Réclamations')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "05ed64cf",
   "metadata": {},
   "source": [
    "Le Boxplot suggère ici la présence d'un nombre assez élevé de valeurs aberrantes dans notre df.\n",
    "Nous allons calculer les quantiles Q1 et Q3 afin de déterminer l'écart interquartile(IQR).\n",
    "Vu que le montant des sinistres est supérieur ou égal à 0,sont considérées comme valeurs aberrantes, les valeurs supérieures à Q3+1,5*IQR. \n",
    "\n",
    "Dans notre contexte, une valeur aberrante (ou outlier) désigne un montant de réclamation qui s'écarte significativement de la majorité des autres montants dans les données, en étant beaucoup plus élevé que ce que l'on observe typiquement. Ces valeurs peuvent indiquer des sinistres exceptionnellement coûteux ou des erreurs de saisie.\n",
    "\n",
    "Retirer les valeurs aberrantes peut être nécessaire pour éviter que ces valeurs extrêmes ne biaisent les analyses statistiques et les modèles prédictifs, améliorant ainsi l'exactitude et la robustesse des résultats. De plus, l'élimination des outliers permet d'obtenir une meilleure représentation des tendances générales et des comportements typiques dans les données."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "0c55558a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pourcentage de valeurs aberrantes : 7.94%\n"
     ]
    }
   ],
   "source": [
    "\n",
    "Q1 = claims_data['AMT_Claim'].quantile(0.25)\n",
    "Q3 = claims_data['AMT_Claim'].quantile(0.75)\n",
    "IQR = Q3 - Q1\n",
    "\n",
    "# Calcul du seuil au-delà duquel une valeur est considérée comme une valeur aberrante\n",
    "outlier_threshold = Q3 + 1.5 * IQR\n",
    "\n",
    "# Identification les valeurs aberrantes\n",
    "outliers = claims_data[claims_data['AMT_Claim'] > outlier_threshold]\n",
    "\n",
    "# Calcul du pourcentage des valeurs aberrantes par rapport au total des observations\n",
    "percentage_outliers = (len(outliers) / len(claims_data)) * 100\n",
    "\n",
    "print(f\"Pourcentage de valeurs aberrantes : {percentage_outliers:.2f}%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "b1bdf425",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "#Vu que les outliers ne représentent que 8% des observations totales, nous nous permettons de les retirer\n",
    "claims_data = claims_data[claims_data['AMT_Claim'] <= outlier_threshold]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "9f4c3744",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3930"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(claims_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "521f4671",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Nombre de Polices')"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAkQAAAHHCAYAAABeLEexAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjYuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/P9b71AAAACXBIWXMAAA9hAAAPYQGoP6dpAABQ7klEQVR4nO3deVyNef8/8NcpdbSdsrQqaWQpipHBGTuRNOjGbQyjEAbhtgzdDWPJzDQYY51hjLknY5ixMxhLlrJla0RItojRYpg6FUr1+f0xv66vo9ChOnG9no/HeTy6Ptfnuq73dc6p8+q6Ptd1FEIIASIiIiIZM9B3AURERET6xkBEREREssdARERERLLHQERERESyx0BEREREssdARERERLLHQERERESyx0BEREREssdAREREpZKZmYmwsDAcPnxY36UQlTkGIqrUZs6cCYVCUSHb6tChAzp06CBNR0VFQaFQYOPGjRWy/cGDB6NOnToVsq3SKNr/qKgofZdS7m7cuAGFQoGvvvpK36UUU5neF0FBQdi1axeaN2+u87Kv+/upMr0OVD4YiKjCREREQKFQSI+qVavCwcEBPj4+WLx4MbKysspkO3fu3MHMmTMRFxdXJusrS5W5topQp04dKBQKjB07tti8ig6gclX0T0bRw8jICHXq1MG4ceOQkZHxzOUWLVqEc+fOYfv27TAxMam4giuQ3H8/5Y6BiCpcWFgYVq9ejWXLlkkfjOPHj4eHhwfOnTun1XfatGl4+PChTuu/c+cOZs2apfMftb1792Lv3r06LaOr59X2/fffIzExsVy3X1l8//33uHPnjr7LkLVly5Zh9erVWLp0KVq0aIElS5bgvffeK7FvXl4ecnJysHv3btSsWbOCK604/P2Utyr6LoDkx9fXV+uQe2hoKA4cOID33nsPPXv2REJCgvQfaJUqVVClSvm+TR88eABTU1MYGxuX63ZexMjISK/bryiNGjVCYmIivvzySyxevFjf5ZSJnJwcmJmZ6bsMnfTt21cKNx999BH69++PdevW4eTJk2jRooVWX2NjY3zyySf6KLPSkMvvp5zxCBFVCp06dcKnn36Kmzdv4ueff5baSxpDFBkZiTZt2sDKygrm5uZo0KCB9Mc6KioK77zzDgBgyJAh0mmBiIgIAP+ME2rcuDFiY2PRrl07mJqaSss+PYaoSEFBAT755BPY2dnBzMwMPXv2xK1bt7T61KlTB4MHDy627JPrfFFtJY1RyMnJwaRJk+Dk5ASlUokGDRrgq6++ghBCq59CocCYMWOwdetWNG7cGEqlEo0aNcLu3btLfsKfcvv2bfj7+8PMzAw2NjaYMGECcnNzi/UrzX6+SJ06dRAQEFDqo0RnzpyBr68vVCoVzM3N0blzZxw/flyrT9Hp2CNHjmDcuHGwtraGlZUVPvroI+Tl5SEjIwMBAQGoVq0aqlWrhilTphR7DossWLAAzs7OMDExQfv27XH+/Hmt+YMHD4a5uTmuXbuG7t27w8LCAgMHDgQAFBYWYuHChWjUqBGqVq0KW1tbfPTRR/j7779L9dwUvX5Vq1ZF48aNsWXLlhL7vep2StK2bVsAwLVr17TaT5w4gW7dusHS0hKmpqZo3749jh49Wmz5P//8E0FBQXBwcIBSqYSLiwtGjRqFvLy8Z27z8OHD+Pe//43atWtDqVTCyckJEyZMKHZUuOg5T05OxnvvvQdzc3PUqlUL33zzDQAgPj4enTp1gpmZGZydnbF27Vqt5e/fv4+PP/4YHh4eMDc3h0qlgq+vL86ePSv1qQy/n1lZWRg/fjzq1KkDpVIJGxsbdOnSBX/88cczn0MqOzxCRJXGoEGD8Mknn2Dv3r0YPnx4iX0uXLiA9957D56enggLC4NSqcTVq1elP9Bubm4ICwvD9OnTMWLECOmP/Lvvviut4969e/D19UX//v3x4YcfwtbW9rl1ff7551AoFAgJCUF6ejoWLlwIb29vxMXF6TSWojS1PUkIgZ49e+LgwYMICgpC06ZNsWfPHkyePBl//vknFixYoNX/yJEj2Lx5M0aPHg0LCwssXrwYffr0QXJyMmrUqPHMuh4+fIjOnTsjOTkZ48aNg4ODA1avXo0DBw6Uet90NXXqVPz0008vPEp04cIFtG3bFiqVClOmTIGRkRG+++47dOjQAdHR0WjZsqVW/7Fjx8LOzg6zZs3C8ePHsWLFClhZWeHYsWOoXbs2vvjiC/z++++YN28eGjdujICAAK3lf/rpJ2RlZSE4OBiPHj3CokWL0KlTJ8THx2u9T/Lz8+Hj44M2bdrgq6++gqmpKYB/jrRERERgyJAhGDduHJKSkrB06VKcOXMGR48efe5Rhr1796JPnz5wd3dHeHg47t27hyFDhsDR0bFY31fZzrPcuHEDAFCtWjWp7cCBA/D19YWXlxdmzJgBAwMD/Pjjj+jUqRMOHz4sHUm6c+cOWrRogYyMDIwYMQINGzbEn3/+iY0bN+LBgwfPPPq6YcMGPHjwAKNGjUKNGjVw8uRJLFmyBLdv38aGDRu0+hYUFMDX1xft2rXD3LlzsWbNGowZMwZmZmaYOnUqBg4ciN69e2P58uUICAiAWq2Gi4sLAOD69evYunUr/v3vf8PFxQVpaWn47rvv0L59e1y8eBEODg6V4vdz5MiR2LhxI8aMGQN3d3fcu3cPR44cQUJCApo1a6bjK0o6E0QV5McffxQAxKlTp57Zx9LSUrz99tvS9IwZM8STb9MFCxYIAOLu3bvPXMepU6cEAPHjjz8Wm9e+fXsBQCxfvrzEee3bt5emDx48KACIWrVqCY1GI7WvX79eABCLFi2S2pydnUVgYOAL1/m82gIDA4Wzs7M0vXXrVgFAfPbZZ1r9+vbtKxQKhbh69arUBkAYGxtrtZ09e1YAEEuWLCm2rSctXLhQABDr16+X2nJycoSrq6sAIA4ePKjzfj6Ls7Oz8PPzE0IIMWTIEFG1alVx584dIcT/Pd8bNmyQ+vv7+wtjY2Nx7do1qe3OnTvCwsJCtGvXTmorem/5+PiIwsJCqV2tVguFQiFGjhwpteXn5wtHR0etepOSkgQAYWJiIm7fvi21nzhxQgAQEyZMkNoCAwMFAPHf//5Xa98OHz4sAIg1a9Zote/evbvE9qc1bdpU2Nvbi4yMDKlt7969AoDW++JVt1P0O5WYmCju3r0rbty4If73v/8JExMTYW1tLXJycoQQQhQWFop69eoVe04fPHggXFxcRJcuXaS2gIAAYWBgUOLvdtGyRa/vk++nBw8eFOsfHh4uFAqFuHnzptRW9Jx/8cUXUtvff/8tTExMhEKhEL/++qvUfunSJQFAzJgxQ2p79OiRKCgo0NpOUlKSUCqVIiwsTGrT9++npaWlCA4OLrZtqhg8ZUaVirm5+XOvNrOysgIAbNu2DYWFhS+1DaVSiSFDhpS6f0BAACwsLKTpvn37wt7eHr///vtLbb+0fv/9dxgaGmLcuHFa7ZMmTYIQArt27dJq9/b2Rt26daVpT09PqFQqXL9+/YXbsbe3R9++faU2U1NTjBgxogz24tmmTZuG/Px8fPnllyXOLygowN69e+Hv74+33npLare3t8eAAQNw5MgRaDQarWWCgoK0TrG2bNkSQggEBQVJbYaGhmjevHmJz4u/vz9q1aolTbdo0QItW7Ys8bUeNWqU1vSGDRtgaWmJLl264K+//pIeXl5eMDc3x8GDB5/5XKSkpCAuLg6BgYGwtLSU2rt06QJ3d/cy286TGjRoAGtra9SpUwdDhw6Fq6srdu3aJR3tiouLw5UrVzBgwADcu3dP2k5OTg46d+6MQ4cOobCwEIWFhdi6dSt69OhR4uX4z7ttxpNHWHNycvDXX3/h3XffhRACZ86cKdZ/2LBh0s9WVlZo0KABzMzM0K9fP639srKy0np9lUolDAz++bgrKCjAvXv3pNPtL3s6qjx+P62srHDixAlecKAnDERUqWRnZ2uFj6e9//77aN26NYYNGwZbW1v0798f69ev1ykc1apVS6cB1PXq1dOaVigUcHV1lU4xlJebN2/CwcGh2PPh5uYmzX9S7dq1i62jWrVqLxxXcvPmTbi6uhb74GrQoMHLlF1qb731FgYNGoQVK1YgJSWl2Py7d+/iwYMHJdbh5uaGwsLCYmO5nn4OisKFk5NTsfaSnpenX2sAqF+/frHXukqVKsVOZV25cgWZmZmwsbGBtbW11iM7Oxvp6enF1l2k6LUsaftP7/+rbOdJmzZtQmRkJNauXYtWrVohPT1dK6BcuXIFABAYGFhsOytXrkRubi4yMzNx9+5daDQaNG7cuFTbfVJycjIGDx6M6tWrw9zcHNbW1mjfvj2Af24C+aSqVavC2tpaq83S0hKOjo7F3rtPv76FhYVYsGAB6tWrB6VSiZo1a8La2hrnzp0rtp3SKo/fz7lz5+L8+fNwcnJCixYtMHPmzBf+Q0Nlh2OIqNK4ffs2MjMz4erq+sw+JiYmOHToEA4ePIidO3di9+7dWLduHTp16oS9e/fC0NDwhdspj3uoPOu/4IKCglLVVBaetR3xjMHDL6Os93Pq1KlYvXo15syZA39//1es7tnPQUntr/K8PHnEoUhhYSFsbGywZs2aEpd5+sP8ZZXVdtq1ayddZdajRw94eHhg4MCBiI2NhYGBgfRPxrx589C0adMS12Fubo779+/rvhP45z3TpUsX3L9/HyEhIWjYsCHMzMzw559/YvDgwcX+ydHltQW0X98vvvgCn376KYYOHYrZs2ejevXqMDAwwPjx41/6SLOuSlNnv3790LZtW2zZsgV79+7FvHnzMGfOHGzevBm+vr4VUqecMRBRpbF69WoAgI+Pz3P7GRgYoHPnzujcuTO+/vprfPHFF5g6dSoOHjwIb2/vMr+zddF/ykWEELh69So8PT2ltmrVqpV4U7ubN29qne7RpTZnZ2fs27cPWVlZWv+FXrp0SZpfFpydnXH+/HkIIbTqK+meK6Xdz9KqW7cuPvzwQ3z33XfFBkhbW1vD1NS0xDouXboEAwODYkd+XtXTrzUAXL58uVR3KK5bty727duH1q1b6xy6i17Lkrb/9P6/ynaexdzcHDNmzMCQIUOwfv169O/fXzq9o1Kp4O3t/cxlra2toVKpil2N9yLx8fG4fPkyVq1apTW4PTIy8uV24jk2btyIjh074ocfftBqz8jI0LqvUmX4/bS3t8fo0aMxevRopKeno1mzZvj8888ZiCoAT5lRpXDgwAHMnj0bLi4u0iXMJSnpv9Gi/16LLhMvuh/M8+66q4uiK4+KbNy4ESkpKVp/oOrWrYvjx49rXWK8Y8eOYqd0dKmte/fuKCgowNKlS7XaFyxYAIVCUWZ/ILt37447d+5o3SH6wYMHWLFiRbG+pd1PXUybNg2PHz/G3LlztdoNDQ3RtWtXbNu2TeuUVVpaGtauXYs2bdpApVK99HZLsnXrVvz555/S9MmTJ3HixIlSPdf9+vVDQUEBZs+eXWxefn7+c19ze3t7NG3aFKtWrdI6hRMZGYmLFy+W2XaeZ+DAgXB0dMScOXMAAF5eXqhbty6++uorZGdnF+t/9+5dAP/8g+Lv74/t27fj9OnTxfo960hc0RGTJ+cLIbBo0aKXqv95DA0Ni9WxYcMGrdca0O/vZ0FBQbHTdzY2NnBwcCjxFhhU9niEiCrcrl27cOnSJeTn5yMtLQ0HDhxAZGQknJ2d8dtvv6Fq1arPXDYsLAyHDh2Cn58fnJ2dkZ6ejm+//RaOjo5o06YNgH8+tK2srLB8+XJYWFjAzMwMLVu2lC7B1VX16tXRpk0bDBkyBGlpaVi4cCFcXV21bg0wbNgwbNy4Ed26dUO/fv1w7do1/Pzzz1qDKHWtrUePHujYsSOmTp2KGzduoEmTJti7dy+2bduG8ePHF1v3yxo+fDiWLl2KgIAAxMbGwt7eHqtXr5YG1z6ptPupi6KjRKtWrSo277PPPpPuOzV69GhUqVIF3333HXJzc4sFqLLg6uqKNm3aYNSoUcjNzcXChQtRo0YNTJky5YXLtm/fHh999BHCw8MRFxeHrl27wsjICFeuXMGGDRuwaNEirYHrTwsPD4efnx/atGmDoUOH4v79+1iyZAkaNWqkFUhedTvPYmRkhP/85z+YPHkydu/ejW7dumHlypXw9fVFo0aNMGTIENSqVQt//vknDh48CJVKhe3btwP455TU3r170b59e4wYMQJubm5ISUnBhg0bcOTIEeliiCc1bNgQdevWxccff4w///wTKpUKmzZteqV7KT3Le++9h7CwMAwZMgTvvvsu4uPjsWbNmmJHNfX5+5mVlQVHR0f07dsXTZo0gbm5Ofbt24dTp05h/vz5r7T/VEr6uLSN5Kno0uiih7GxsbCzsxNdunQRixYt0rq0vcjTl93v379f9OrVSzg4OAhjY2Ph4OAgPvjgA3H58mWt5bZt2ybc3d1FlSpVtC6jbd++vWjUqFGJ9T3rsvtffvlFhIaGChsbG2FiYiL8/Py0LgkuMn/+fFGrVi2hVCpF69atxenTp0u8HP1ZtT19Wa8QQmRlZYkJEyYIBwcHYWRkJOrVqyfmzZundRm0EP9c1lvS5brPukz+aTdv3hQ9e/YUpqamombNmuI///mPdBn3k5dJ67KfJXnysvsnXblyRRgaGha77F4IIf744w/h4+MjzM3NhampqejYsaM4duyYVp9n3dKh6P3z9G0aAgMDhZmZmTRddNn9vHnzxPz584WTk5NQKpWibdu24uzZs89d9mkrVqwQXl5ewsTERFhYWAgPDw8xZcoU6fYCz7Np0ybh5uYmlEqlcHd3F5s3by7xffEq23nWcyKEEJmZmcLS0lLrtTxz5ozo3bu3qFGjhlAqlcLZ2Vn069dP7N+/X2vZmzdvioCAAGFtbS2USqV46623RHBwsMjNzRVClHzZ/cWLF4W3t7cwNzcXNWvWFMOHD5cuR3/y0vdnPefP+n1++n326NEjMWnSJGFvby9MTExE69atRUxMTKX6/czNzRWTJ08WTZo0ERYWFsLMzEw0adJEfPvtt8WWo/KhEKIMR1wSERERvYY4hoiIiIhkj4GIiIiIZI+BiIiIiGSPgYiIiIhkj4GIiIiIZI+BiIiIiGSPN2YshcLCQty5cwcWFhZl/rUQREREVD6EEMjKyoKDg0Ox7x98GgNRKdy5c6fMvzOJiIiIKsatW7fg6Oj43D4MRKVQ9MV9t27dKvPvTiIiIqLyodFo4OTkpPUFvM/CQFQKRafJVCoVAxEREdFrpjTDXTiomoiIiGSPgYiIiIhkj4GIiIiIZI+BiIiIiGSPgYiIiIhkj4GIiIiIZI+BiIiIiGSPgYiIiIhkj4GIiIiIZI+BiIiIiGSPgYiIiIhkj4GIiIiIZI+BiIiIiGSPgYiIiIhkj4GIiIiIZK+KvguQE6/JP+m7BKpEYucF6LsEIiL6/3iEiIiIiGSPgYiIiIhkj4GIiIiIZI+BiIiIiGSPgYiIiIhkj4GIiIiIZI+BiIiIiGSPgYiIiIhkj4GIiIiIZI+BiIiIiGSPgYiIiIhkj4GIiIiIZI+BiIiIiGSPgYiIiIhkj4GIiIiIZI+BiIiIiGSPgYiIiIhkj4GIiIiIZI+BiIiIiGSPgYiIiIhkj4GIiIiIZE+vgWjZsmXw9PSESqWCSqWCWq3Grl27pPkdOnSAQqHQeowcOVJrHcnJyfDz84OpqSlsbGwwefJk5Ofna/WJiopCs2bNoFQq4erqioiIiIrYPSIiInpNVNHnxh0dHfHll1+iXr16EEJg1apV6NWrF86cOYNGjRoBAIYPH46wsDBpGVNTU+nngoIC+Pn5wc7ODseOHUNKSgoCAgJgZGSEL774AgCQlJQEPz8/jBw5EmvWrMH+/fsxbNgw2Nvbw8fHp2J3mIiIiColvQaiHj16aE1//vnnWLZsGY4fPy4FIlNTU9jZ2ZW4/N69e3Hx4kXs27cPtra2aNq0KWbPno2QkBDMnDkTxsbGWL58OVxcXDB//nwAgJubG44cOYIFCxYwEBERERGASjSGqKCgAL/++itycnKgVqul9jVr1qBmzZpo3LgxQkND8eDBA2leTEwMPDw8YGtrK7X5+PhAo9HgwoULUh9vb2+tbfn4+CAmJuaZteTm5kKj0Wg9iIiI6M2l1yNEABAfHw+1Wo1Hjx7B3NwcW7Zsgbu7OwBgwIABcHZ2hoODA86dO4eQkBAkJiZi8+bNAIDU1FStMARAmk5NTX1uH41Gg4cPH8LExKRYTeHh4Zg1a1aZ7ysRERFVTnoPRA0aNEBcXBwyMzOxceNGBAYGIjo6Gu7u7hgxYoTUz8PDA/b29ujcuTOuXbuGunXrlltNoaGhmDhxojSt0Wjg5ORUbtsjIiIi/dL7KTNjY2O4urrCy8sL4eHhaNKkCRYtWlRi35YtWwIArl69CgCws7NDWlqaVp+i6aJxR8/qo1KpSjw6BABKpVK68q3oQURERG8uvQeipxUWFiI3N7fEeXFxcQAAe3t7AIBarUZ8fDzS09OlPpGRkVCpVNJpN7Vajf3792utJzIyUmucEhEREcmbXk+ZhYaGwtfXF7Vr10ZWVhbWrl2LqKgo7NmzB9euXcPatWvRvXt31KhRA+fOncOECRPQrl07eHp6AgC6du0Kd3d3DBo0CHPnzkVqaiqmTZuG4OBgKJVKAMDIkSOxdOlSTJkyBUOHDsWBAwewfv167Ny5U5+7TkRERJWIXgNReno6AgICkJKSAktLS3h6emLPnj3o0qULbt26hX379mHhwoXIycmBk5MT+vTpg2nTpknLGxoaYseOHRg1ahTUajXMzMwQGBiodd8iFxcX7Ny5ExMmTMCiRYvg6OiIlStX8pJ7IiIikiiEEELfRVR2Go0GlpaWyMzMfKXxRF6TfyrDquh1FzsvQN8lEBG90XT5/K50Y4iIiIiIKhoDEREREckeAxERERHJHgMRERERyR4DEREREckeAxERERHJHgMRERERyR4DEREREckeAxERERHJHgMRERERyR4DEREREckeAxERERHJHgMRERERyR4DEREREckeAxERERHJHgMRERERyR4DEREREckeAxERERHJHgMRERERyR4DEREREckeAxERERHJHgMRERERyR4DEREREckeAxERERHJHgMRERERyR4DEREREckeAxERERHJHgMRERERyR4DEREREckeAxERERHJHgMRERERyR4DEREREckeAxERERHJHgMRERERyR4DEREREcmeXgPRsmXL4OnpCZVKBZVKBbVajV27dknzHz16hODgYNSoUQPm5ubo06cP0tLStNaRnJwMPz8/mJqawsbGBpMnT0Z+fr5Wn6ioKDRr1gxKpRKurq6IiIioiN0jIiKi14ReA5GjoyO+/PJLxMbG4vTp0+jUqRN69eqFCxcuAAAmTJiA7du3Y8OGDYiOjsadO3fQu3dvafmCggL4+fkhLy8Px44dw6pVqxAREYHp06dLfZKSkuDn54eOHTsiLi4O48ePx7Bhw7Bnz54K318iIiKqnBRCCKHvIp5UvXp1zJs3D3379oW1tTXWrl2Lvn37AgAuXboENzc3xMTEoFWrVti1axfee+893LlzB7a2tgCA5cuXIyQkBHfv3oWxsTFCQkKwc+dOnD9/XtpG//79kZGRgd27d5eqJo1GA0tLS2RmZkKlUr30vnlN/umll6U3T+y8AH2XQET0RtPl87vSjCEqKCjAr7/+ipycHKjVasTGxuLx48fw9vaW+jRs2BC1a9dGTEwMACAmJgYeHh5SGAIAHx8faDQa6ShTTEyM1jqK+hStg4iIiKiKvguIj4+HWq3Go0ePYG5uji1btsDd3R1xcXEwNjaGlZWVVn9bW1ukpqYCAFJTU7XCUNH8onnP66PRaPDw4UOYmJgUqyk3Nxe5ubnStEajeeX9JCIiospL70eIGjRogLi4OJw4cQKjRo1CYGAgLl68qNeawsPDYWlpKT2cnJz0Wg8RERGVL70HImNjY7i6usLLywvh4eFo0qQJFi1aBDs7O+Tl5SEjI0Orf1paGuzs7AAAdnZ2xa46K5p+UR+VSlXi0SEACA0NRWZmpvS4detWWewqERERVVJ6D0RPKywsRG5uLry8vGBkZIT9+/dL8xITE5GcnAy1Wg0AUKvViI+PR3p6utQnMjISKpUK7u7uUp8n11HUp2gdJVEqldKtAIoeRERE9ObS6xii0NBQ+Pr6onbt2sjKysLatWsRFRWFPXv2wNLSEkFBQZg4cSKqV68OlUqFsWPHQq1Wo1WrVgCArl27wt3dHYMGDcLcuXORmpqKadOmITg4GEqlEgAwcuRILF26FFOmTMHQoUNx4MABrF+/Hjt37tTnrhMREVElotdAlJ6ejoCAAKSkpMDS0hKenp7Ys2cPunTpAgBYsGABDAwM0KdPH+Tm5sLHxwfffvuttLyhoSF27NiBUaNGQa1Ww8zMDIGBgQgLC5P6uLi4YOfOnZgwYQIWLVoER0dHrFy5Ej4+PhW+v0RERFQ5Vbr7EFVGvA8RlQfeh4iIqHy9lvchIiIiItIXBiIiIiKSPQYiIiIikj0GIiIiIpI9BiIiIiKSPQYiIiIikj0GIiIiIpI9BiIiIiKSPQYiIiIikj0GIiIiIpI9BiIiIiKSPQYiIiIikj0GIiIiIpI9BiIiIiKSPQYiIiIikj0GIiIiIpI9BiIiIiKSPQYiIiIikj0GIiIiIpI9BiIiIiKSPQYiIiIikj0GIiIiIpI9BiIiIiKSPQYiIiIikj0GIiIiIpK9MglEGRkZZbEaIiIiIr3QORDNmTMH69atk6b79euHGjVqoFatWjh79myZFkdERERUEXQORMuXL4eTkxMAIDIyEpGRkdi1axd8fX0xefLkMi+QiIiIqLxV0XWB1NRUKRDt2LED/fr1Q9euXVGnTh20bNmyzAskIiIiKm86HyGqVq0abt26BQDYvXs3vL29AQBCCBQUFJRtdUREREQVQOcjRL1798aAAQNQr1493Lt3D76+vgCAM2fOwNXVtcwLJCIiIipvOgeiBQsWoE6dOrh16xbmzp0Lc3NzAEBKSgpGjx5d5gUSERERlTedA5GRkRE+/vjjYu0TJkwok4KIiIiIKtpL3Ydo9erVaNOmDRwcHHDz5k0AwMKFC7Ft27YyLY6IiIioIugciJYtW4aJEyfC19cXGRkZ0kBqKysrLFy4sKzrIyIiIip3OgeiJUuW4Pvvv8fUqVNhaGgotTdv3hzx8fFlWhwRERFRRdA5ECUlJeHtt98u1q5UKpGTk6PTusLDw/HOO+/AwsICNjY28Pf3R2JiolafDh06QKFQaD1Gjhyp1Sc5ORl+fn4wNTWFjY0NJk+ejPz8fK0+UVFRaNasGZRKJVxdXREREaFTrURERPTm0jkQubi4IC4urlj77t274ebmptO6oqOjERwcjOPHjyMyMhKPHz9G165diwWr4cOHIyUlRXrMnTtXmldQUAA/Pz/k5eXh2LFjWLVqFSIiIjB9+nSpT1JSEvz8/NCxY0fExcVh/PjxGDZsGPbs2aPbzhMREdEbSeerzCZOnIjg4GA8evQIQgicPHkSv/zyC8LDw7Fy5Uqd1rV7926t6YiICNjY2CA2Nhbt2rWT2k1NTWFnZ1fiOvbu3YuLFy9i3759sLW1RdOmTTF79myEhIRg5syZMDY2xvLly+Hi4oL58+cDANzc3HDkyBEsWLAAPj4+Oj4DRERE9KbR+QjRsGHDMGfOHEybNg0PHjzAgAEDsGzZMixatAj9+/d/pWIyMzMBANWrV9dqX7NmDWrWrInGjRsjNDQUDx48kObFxMTAw8MDtra2UpuPjw80Gg0uXLgg9Sm6o/aTfWJiYkqsIzc3FxqNRutBREREby6djxABwMCBAzFw4EA8ePAA2dnZsLGxeeVCCgsLMX78eLRu3RqNGzeW2gcMGABnZ2c4ODjg3LlzCAkJQWJiIjZv3gzgn+9WezIMAZCmU1NTn9tHo9Hg4cOHMDEx0ZoXHh6OWbNmvfI+ERER0etB50CUlJSE/Px81KtXD6ampjA1NQUAXLlyBUZGRqhTp85LFRIcHIzz58/jyJEjWu0jRoyQfvbw8IC9vT06d+6Ma9euoW7dui+1rRcJDQ3FxIkTpWmNRiN9oS0RERG9eXQ+ZTZ48GAcO3asWPuJEycwePDglypizJgx2LFjBw4ePAhHR8fn9m3ZsiUA4OrVqwAAOzs7pKWlafUpmi4ad/SsPiqVqtjRIeCfK+ZUKpXWg4iIiN5cOgeiM2fOoHXr1sXaW7VqVeLVZ88jhMCYMWOwZcsWHDhwAC4uLi9cpmgb9vb2AAC1Wo34+Hikp6dLfSIjI6FSqeDu7i712b9/v9Z6IiMjoVardaqXiIiI3kw6ByKFQoGsrKxi7ZmZmdJdq0srODgYP//8M9auXQsLCwukpqYiNTUVDx8+BABcu3YNs2fPRmxsLG7cuIHffvsNAQEBaNeuHTw9PQEAXbt2hbu7OwYNGoSzZ89iz549mDZtGoKDg6FUKgEAI0eOxPXr1zFlyhRcunQJ3377LdavX8/vXyMiIiIALxGI2rVrh/DwcK3wU1BQgPDwcLRp00andS1btgyZmZno0KED7O3tpce6desAAMbGxti3bx+6du2Khg0bYtKkSejTpw+2b98urcPQ0BA7duyAoaEh1Go1PvzwQwQEBCAsLEzq4+Ligp07dyIyMhJNmjTB/PnzsXLlSl5yT0RERAAAhRBC6LLAxYsX0a5dO1hZWaFt27YAgMOHD0Oj0eDAgQNaV4i9KTQaDSwtLZGZmflK44m8Jv9UhlXR6y52XoC+SyAieqPp8vmt8xEid3d3nDt3Dv369UN6ejqysrIQEBCAS5cuvZFhiIiIiN58L3UfIgcHB3zxxRdlXQsRERGRXpQqEJ07dw6NGzeGgYEBzp0799y+RYOdiYiIiF4XpQpETZs2RWpqKmxsbNC0aVMoFAqUNPRIoVDofKUZERERkb6VKhAlJSXB2tpa+pmIiIjoTVKqQOTs7Fziz0RERERvglIFot9++63UK+zZs+dLF0NERESkD6UKRP7+/qVaGccQERER0euoVIGosLCwvOsgIiIi0hudb8xIRERE9KZ5qUAUHR2NHj16wNXVFa6urujZsycOHz5c1rURERERVQidA9HPP/8Mb29vmJqaYty4cRg3bhxMTEzQuXNnrF27tjxqJCIiIipXOn91x+eff465c+diwoQJUtu4cePw9ddfY/bs2RgwYECZFkhERERU3nQ+QnT9+nX06NGjWHvPnj1500YiIiJ6LekciJycnLB///5i7fv27YOTk1OZFEVERERUkXQ+ZTZp0iSMGzcOcXFxePfddwEAR48eRUREBBYtWlTmBRIRERGVN50D0ahRo2BnZ4f58+dj/fr1AAA3NzesW7cOvXr1KvMCiYiIiMqbToFICIGrV6+ifv36iIqKQpUqOucpIiIiokqn1GOIkpKS4OnpiYYNG8LT0xN169bF6dOny7M2IiIiogpR6kA0efJk5Ofn4+eff8bGjRvh6OiIESNGlGdtRERERBWi1Oe8jhw5go0bN6JNmzYAgFatWsHR0RE5OTkwMzMrtwKJiIiIylupjxClp6ejXr160rS9vT1MTEyQnp5eLoURERERVZRSHyFSKBTIzs6GiYmJ1GZgYICsrCxoNBqpTaVSlW2FREREROWs1IFICIH69esXa3v77belnxUKBQoKCsq2QiIiIqJyVupAdPDgwfKsg4iIiEhvSh2I2rdvX551EBEREemNzt9lRkRERPSmYSAiIiIi2WMgIiIiItljICIiIiLZe+lAdPXqVezZswcPHz4E8M9l90RERESvI50D0b179+Dt7Y369euje/fuSElJAQAEBQVh0qRJZV4gERERUXnTORBNmDABVapUQXJyMkxNTaX2999/H7t37y7T4oiIiIgqQqnvQ1Rk79692LNnDxwdHbXa69Wrh5s3b5ZZYUREREQVRecjRDk5OVpHhorcv38fSqWyTIoiIiIiqkg6B6K2bdvip59+kqYVCgUKCwsxd+5cdOzYUad1hYeH45133oGFhQVsbGzg7++PxMRErT6PHj1CcHAwatSoAXNzc/Tp0wdpaWlafZKTk+Hn5wdTU1PY2Nhg8uTJyM/P1+oTFRWFZs2aQalUwtXVFREREbrtOBEREb2xdA5Ec+fOxYoVK+Dr64u8vDxMmTIFjRs3xqFDhzBnzhyd1hUdHY3g4GAcP34ckZGRePz4Mbp27YqcnBypz4QJE7B9+3Zs2LAB0dHRuHPnDnr37i3NLygogJ+fH/Ly8nDs2DGsWrUKERERmD59utQnKSkJfn5+6NixI+Li4jB+/HgMGzYMe/bs0XX3iYiI6A2kEC9xvXxmZiaWLl2Ks2fPIjs7G82aNUNwcDDs7e1fqZi7d+/CxsYG0dHRaNeuHTIzM2FtbY21a9eib9++AIBLly7Bzc0NMTExaNWqFXbt2oX33nsPd+7cga2tLQBg+fLlCAkJwd27d2FsbIyQkBDs3LkT58+fl7bVv39/ZGRklGoguEajgaWlJTIzM6FSqV56/7wm//TiTiQbsfMC9F0CEdEbTZfPb50HVQOApaUlpk6d+lLFPU9mZiYAoHr16gCA2NhYPH78GN7e3lKfhg0bonbt2lIgiomJgYeHhxSGAMDHxwejRo3ChQsX8PbbbyMmJkZrHUV9xo8fX+b7QERERK+fUgWic+fOlXqFnp6eL1VIYWEhxo8fj9atW6Nx48YAgNTUVBgbG8PKykqrr62tLVJTU6U+T4ahovlF857XR6PR4OHDhzAxMdGal5ubi9zcXGlao9G81D4RERHR66FUgahp06ZQKBQQQkChUEjtRWfbnmwrKCh4qUKCg4Nx/vx5HDly5KWWL0vh4eGYNWuWvssgIiKiClKqQdVJSUm4fv06kpKSsGnTJri4uODbb79FXFwc4uLi8O2336Ju3brYtGnTSxUxZswY7NixAwcPHtS6v5GdnR3y8vKQkZGh1T8tLQ12dnZSn6evOiuaflEflUpV7OgQAISGhiIzM1N63Lp166X2i4iIiF4PpTpC5OzsLP3873//G4sXL0b37t2lNk9PTzg5OeHTTz+Fv79/qTcuhMDYsWOxZcsWREVFwcXFRWu+l5cXjIyMsH//fvTp0wcAkJiYiOTkZKjVagCAWq3G559/jvT0dNjY2AAAIiMjoVKp4O7uLvX5/ffftdYdGRkpreNpSqWS91QiIiKSEZ0HVcfHxxcLLgDg4uKCixcv6rSu4OBgrF27Ftu2bYOFhYU05sfS0hImJiawtLREUFAQJk6ciOrVq0OlUmHs2LFQq9Vo1aoVAKBr165wd3fHoEGDMHfuXKSmpmLatGkIDg6WQs3IkSOxdOlSTJkyBUOHDsWBAwewfv167Ny5U9fdJyIiojeQzvchcnNzQ3h4OPLy8qS2vLw8hIeHw83NTad1LVu2DJmZmejQoQPs7e2lx7p166Q+CxYswHvvvYc+ffqgXbt2sLOzw+bNm6X5hoaG2LFjBwwNDaFWq/Hhhx8iICAAYWFhUh8XFxfs3LkTkZGRaNKkCebPn4+VK1fCx8dH190nIiKiN5DO9yE6efIkevToASGEdEXZuXPnoFAosH37drRo0aJcCtUn3oeIygPvQ0REVL7K9T5ELVq0wPXr17FmzRpcunQJwD/fdD9gwACYmZm9XMVEREREevRSN2Y0MzPDiBEjyroWIiIiIr3QeQwRERER0ZuGgYiIiIhkj4GIiIiIZI+BiIiIiGTvpQJRRkYGVq5cidDQUNy/fx8A8Mcff+DPP/8s0+KIiIiIKoLOV5mdO3cO3t7esLS0xI0bNzB8+HBUr14dmzdvRnJyMn76iffaISIioteLzkeIJk6ciMGDB+PKlSuoWrWq1N69e3ccOnSoTIsjIiIiqgg6B6JTp07ho48+KtZeq1Yt6bvIiIiIiF4nOgcipVIJjUZTrP3y5cuwtrYuk6KIiIiIKpLOgahnz54ICwvD48ePAQAKhQLJyckICQlBnz59yrxAIiIiovKmcyCaP38+srOzYWNjg4cPH6J9+/ZwdXWFhYUFPv/88/KokYiIiKhc6XyVmaWlJSIjI3H06FGcPXsW2dnZaNasGby9vcujPiIiIqJyp1Mgevz4MUxMTBAXF4fWrVujdevW5VUXERERUYXR6ZSZkZERateujYKCgvKqh4iIiKjC6TyGaOrUqfjkk0+kO1QTERERve50HkO0dOlSXL16FQ4ODnB2doaZmZnW/D/++KPMiiMiIiKqCDoHIn9//3Iog4iIiEh/dA5EM2bMKI86iIiIiPRG50BU5PTp00hISAAAuLu7w8vLq8yKIiIiIqpIOgei27dv44MPPsDRo0dhZWUFAMjIyMC7776LX3/9FY6OjmVdIxEREVG50vkqs2HDhuHx48dISEjA/fv3cf/+fSQkJKCwsBDDhg0rjxqJiIiIypXOR4iio6Nx7NgxNGjQQGpr0KABlixZgrZt25ZpcUREREQVQecjRE5OTtIXuz6poKAADg4OZVIUERERUUXSORDNmzcPY8eOxenTp6W206dP4z//+Q+++uqrMi2OiIiIqCKU6pRZtWrVoFAopOmcnBy0bNkSVar8s3h+fj6qVKmCoUOH8j5FRERE9NopVSBauHBhOZdBREREpD+lCkSBgYHlXQcRERGR3rz0jRnT09ORnp6OwsJCrXZPT89XLoqIiIioIukciGJjYxEYGIiEhAQIIbTmKRQKFBQUlFlxRERERBVB50A0dOhQ1K9fHz/88ANsbW21BlsTERERvY50DkTXr1/Hpk2b4OrqWh71EBEREVU4ne9D1LlzZ5w9e7Y8aiEiIiLSC52PEK1cuRKBgYE4f/48GjduDCMjI635PXv2LLPiiIiIiCqCzoEoJiYGR48exa5du4rN46BqIiIieh3pfMps7Nix+PDDD5GSkoLCwkKth65h6NChQ+jRowccHBygUCiwdetWrfmDBw+GQqHQenTr1k2rz/379zFw4ECoVCpYWVkhKCgI2dnZWn3OnTuHtm3bomrVqnBycsLcuXN13W0iIiJ6g+kciO7du4cJEybA1tb2lTeek5ODJk2a4Jtvvnlmn27duiElJUV6/PLLL1rzBw4ciAsXLiAyMhI7duzAoUOHMGLECGm+RqNB165d4ezsjNjYWMybNw8zZ87EihUrXrl+IiIiejPofMqsd+/eOHjwIOrWrfvKG/f19YWvr+9z+yiVStjZ2ZU4LyEhAbt378apU6fQvHlzAMCSJUvQvXt3fPXVV3BwcMCaNWuQl5eH//3vfzA2NkajRo0QFxeHr7/+Wis4ERERkXzpHIjq16+P0NBQHDlyBB4eHsUGVY8bN67MigOAqKgo2NjYoFq1aujUqRM+++wz1KhRA8A/45msrKykMAQA3t7eMDAwwIkTJ/Cvf/0LMTExaNeuHYyNjaU+Pj4+mDNnDv7++29Uq1at2DZzc3ORm5srTWs0mjLdJyIiIqpcXuoqM3Nzc0RHRyM6OlprnkKhKNNA1K1bN/Tu3RsuLi64du0aPvnkE/j6+iImJgaGhoZITU2FjY2N1jJVqlRB9erVkZqaCgBITU2Fi4uLVp+i032pqaklBqLw8HDMmjWrzPaDiIiIKjedA1FSUlJ51FGi/v37Sz97eHjA09MTdevWRVRUFDp37lxu2w0NDcXEiROlaY1GAycnp3LbHhEREemXzoOqnySEKPZ9ZuXprbfeQs2aNXH16lUAgJ2dHdLT07X65Ofn4/79+9K4Izs7O6SlpWn1KZp+1tgkpVIJlUql9SAiIqI310sFop9++gkeHh4wMTGBiYkJPD09sXr16rKurZjbt2/j3r17sLe3BwCo1WpkZGQgNjZW6nPgwAEUFhaiZcuWUp9Dhw7h8ePHUp/IyEg0aNCgxNNlREREJD86B6Kvv/4ao0aNQvfu3bF+/XqsX78e3bp1w8iRI7FgwQKd1pWdnY24uDjExcUB+Od0XFxcHJKTk5GdnY3Jkyfj+PHjuHHjBvbv349evXrB1dUVPj4+AAA3Nzd069YNw4cPx8mTJ3H06FGMGTMG/fv3h4ODAwBgwIABMDY2RlBQEC5cuIB169Zh0aJFWqfEiIiISN4UQsdzXi4uLpg1axYCAgK02letWoWZM2fqNMYoKioKHTt2LNYeGBiIZcuWwd/fH2fOnEFGRgYcHBzQtWtXzJ49W+seSPfv38eYMWOwfft2GBgYoE+fPli8eDHMzc2lPufOnUNwcDBOnTqFmjVrYuzYsQgJCSl1nRqNBpaWlsjMzHyl02dek3966WXpzRM7L+DFnYiI6KXp8vmtcyCqWrUqzp8/X+zb7q9cuQIPDw88evRI94orOQYiKg8MRERE5UuXz2+dT5m5urpi/fr1xdrXrVuHevXq6bo6IiIiIr3T+bL7WbNm4f3338ehQ4fQunVrAMDRo0exf//+EoMSERERUWWn8xGiPn364MSJE6hZsya2bt2KrVu3ombNmjh58iT+9a9/lUeNREREROVK5yNEAODl5YWff/65rGshIiIi0otXujEjERER0Zug1EeIDAwMoFAonttHoVAgPz//lYsiIiIiqkilDkRbtmx55ryYmBgsXrwYhYWFZVIUERERUUUqdSDq1atXsbbExET897//xfbt2zFw4ECEhYWVaXFEREREFeGlxhDduXMHw4cPh4eHB/Lz8xEXF4dVq1bB2dm5rOsjIiIiKnc6BaLMzEyEhITA1dUVFy5cwP79+7F9+3Y0bty4vOojIiIiKnelPmU2d+5czJkzB3Z2dvjll19KPIVGRERE9DoqdSD673//CxMTE7i6umLVqlVYtWpVif02b95cZsURERERVYRSB6KAgIAXXnZPRERE9DoqdSCKiIgoxzKIiIiI9Id3qiYiIiLZYyAiIiIi2WMgIiIiItljICIiIiLZYyAiIiIi2WMgIiIiItljICIiIiLZYyAiIiIi2WMgIiIiItljICIiIiLZYyAiIiIi2WMgIiIiItljICIiIiLZYyAiIiIi2WMgIiIiItljICIiIiLZYyAiIiIi2WMgIiIiItljICIiIiLZYyAiIiIi2WMgIiIiItnTayA6dOgQevToAQcHBygUCmzdulVrvhAC06dPh729PUxMTODt7Y0rV65o9bl//z4GDhwIlUoFKysrBAUFITs7W6vPuXPn0LZtW1StWhVOTk6YO3duee8aERERvUb0GohycnLQpEkTfPPNNyXOnzt3LhYvXozly5fjxIkTMDMzg4+PDx49eiT1GThwIC5cuIDIyEjs2LEDhw4dwogRI6T5Go0GXbt2hbOzM2JjYzFv3jzMnDkTK1asKPf9IyIiotdDFX1u3NfXF76+viXOE0Jg4cKFmDZtGnr16gUA+Omnn2Bra4utW7eif//+SEhIwO7du3Hq1Ck0b94cALBkyRJ0794dX331FRwcHLBmzRrk5eXhf//7H4yNjdGoUSPExcXh66+/1gpOREREJF+VdgxRUlISUlNT4e3tLbVZWlqiZcuWiImJAQDExMTAyspKCkMA4O3tDQMDA5w4cULq065dOxgbG0t9fHx8kJiYiL///ruC9oaIiIgqM70eIXqe1NRUAICtra1Wu62trTQvNTUVNjY2WvOrVKmC6tWra/VxcXEpto6iedWqVSu27dzcXOTm5krTGo3mFfeGiIiIKrNKe4RIn8LDw2FpaSk9nJyc9F0SERERlaNKG4js7OwAAGlpaVrtaWlp0jw7Ozukp6drzc/Pz8f9+/e1+pS0jie38bTQ0FBkZmZKj1u3br36DhEREVGlVWkDkYuLC+zs7LB//36pTaPR4MSJE1Cr1QAAtVqNjIwMxMbGSn0OHDiAwsJCtGzZUupz6NAhPH78WOoTGRmJBg0alHi6DACUSiVUKpXWg4iIiN5ceg1E2dnZiIuLQ1xcHIB/BlLHxcUhOTkZCoUC48ePx2effYbffvsN8fHxCAgIgIODA/z9/QEAbm5u6NatG4YPH46TJ0/i6NGjGDNmDPr37w8HBwcAwIABA2BsbIygoCBcuHAB69atw6JFizBx4kQ97TURERFVNnodVH369Gl07NhRmi4KKYGBgYiIiMCUKVOQk5ODESNGICMjA23atMHu3btRtWpVaZk1a9ZgzJgx6Ny5MwwMDNCnTx8sXrxYmm9paYm9e/ciODgYXl5eqFmzJqZPn85L7omIiEiiEEIIfRdR2Wk0GlhaWiIzM/OVTp95Tf6pDKui113svAB9l0BE9EbT5fO70o4hIiIiIqooDEREREQkewxEREREJHsMRERERCR7DEREREQkewxEREREJHsMRERERCR7DEREREQkewxEREREJHsMRERERCR7DEREREQkewxEREREJHsMRERERCR7DEREREQkewxEREREJHsMRERERCR7DEREREQkewxEREREJHsMRERERCR7DEREREQkewxEREREJHsMRERERCR7DEREREQkewxEREREJHsMRERERCR7DEREREQkewxEREREJHsMRERERCR7DEREREQkewxEREREJHsMRERERCR7DEREREQkewxEREREJHsMRERERCR7DEREREQkewxEREREJHuVOhDNnDkTCoVC69GwYUNp/qNHjxAcHIwaNWrA3Nwcffr0QVpamtY6kpOT4efnB1NTU9jY2GDy5MnIz8+v6F0hIiKiSqyKvgt4kUaNGmHfvn3SdJUq/1fyhAkTsHPnTmzYsAGWlpYYM2YMevfujaNHjwIACgoK4OfnBzs7Oxw7dgwpKSkICAiAkZERvvjiiwrfFyIiIqqcKn0gqlKlCuzs7Iq1Z2Zm4ocffsDatWvRqVMnAMCPP/4INzc3HD9+HK1atcLevXtx8eJF7Nu3D7a2tmjatClmz56NkJAQzJw5E8bGxhW9O0RERFQJVepTZgBw5coVODg44K233sLAgQORnJwMAIiNjcXjx4/h7e0t9W3YsCFq166NmJgYAEBMTAw8PDxga2sr9fHx8YFGo8GFCxeeuc3c3FxoNBqtBxEREb25KnUgatmyJSIiIrB7924sW7YMSUlJaNu2LbKyspCamgpjY2NYWVlpLWNra4vU1FQAQGpqqlYYKppfNO9ZwsPDYWlpKT2cnJzKdseIiIioUqnUp8x8fX2lnz09PdGyZUs4Oztj/fr1MDExKbfthoaGYuLEidK0RqNhKCIiInqDVeojRE+zsrJC/fr1cfXqVdjZ2SEvLw8ZGRlafdLS0qQxR3Z2dsWuOiuaLmlcUhGlUgmVSqX1ICIiojfXaxWIsrOzce3aNdjb28PLywtGRkbYv3+/ND8xMRHJyclQq9UAALVajfj4eKSnp0t9IiMjoVKp4O7uXuH1ExERUeVUqU+Zffzxx+jRowecnZ1x584dzJgxA4aGhvjggw9gaWmJoKAgTJw4EdWrV4dKpcLYsWOhVqvRqlUrAEDXrl3h7u6OQYMGYe7cuUhNTcW0adMQHBwMpVKp570jIiKiyqJSB6Lbt2/jgw8+wL1792BtbY02bdrg+PHjsLa2BgAsWLAABgYG6NOnD3Jzc+Hj44Nvv/1WWt7Q0BA7duzAqFGjoFarYWZmhsDAQISFhelrl4iIiKgSUgghhL6LqOw0Gg0sLS2RmZn5SuOJvCb/VIZV0esudl6AvksgInqj6fL5/VqNISIiIiIqDwxEREREJHsMRERERCR7DEREREQkewxEREREJHsMRERERCR7DEREREQkewxEREREJHsMRERERCR7DEREREQkewxEREREJHsMRERERCR7DEREREQkewxEREREJHsMRERERCR7DEREREQkewxEREREJHsMRERERCR7DEREREQkewxEREREJHsMRERERCR7DEREREQkewxEREREJHsMRERERCR7DEREREQkewxEREREJHsMRERERCR7VfRdABHpT3KYh75LoEqm9vR4fZdApBc8QkRERESyx0BEREREssdARERERLLHQERERESyx0BEREREssdARERERLLHQERERESyJ6tA9M0336BOnTqoWrUqWrZsiZMnT+q7JCIiIqoEZBOI1q1bh4kTJ2LGjBn4448/0KRJE/j4+CA9PV3fpREREZGeySYQff311xg+fDiGDBkCd3d3LF++HKampvjf//6n79KIiIhIz2QRiPLy8hAbGwtvb2+pzcDAAN7e3oiJidFjZURERFQZyOK7zP766y8UFBTA1tZWq93W1haXLl0q1j83Nxe5ubnSdGZmJgBAo9G8Uh0FuQ9faXl6s7zq+6ksZD0q0HcJVMlUhvdll+Vd9F0CVSKRIyNfetmi97MQ4oV9ZRGIdBUeHo5Zs2YVa3dyctJDNfSmslwyUt8lEBUXbqnvCoi0WIa8+nsyKysLlpbPX48sAlHNmjVhaGiItLQ0rfa0tDTY2dkV6x8aGoqJEydK04WFhbh//z5q1KgBhUJR7vW+yTQaDZycnHDr1i2oVCp9l0PE9yRVSnxflg0hBLKysuDg4PDCvrIIRMbGxvDy8sL+/fvh7+8P4J+Qs3//fowZM6ZYf6VSCaVSqdVmZWVVAZXKh0ql4i85VSp8T1JlxPflq3vRkaEisghEADBx4kQEBgaiefPmaNGiBRYuXIicnBwMGTJE36URERGRnskmEL3//vu4e/cupk+fjtTUVDRt2hS7d+8uNtCaiIiI5Ec2gQgAxowZU+IpMqo4SqUSM2bMKHZKkkhf+J6kyojvy4qnEKW5Fo2IiIjoDSaLGzMSERERPQ8DEREREckeAxERERHJHgMRERERyR4DEVWIQ4cOoUePHnBwcIBCocDWrVv1XRLJXHh4ON555x1YWFjAxsYG/v7+SExM1HdZJGPLli2Dp6endDNGtVqNXbt26bss2WAgogqRk5ODJk2a4JtvvtF3KUQAgOjoaAQHB+P48eOIjIzE48eP0bVrV+Tk5Oi7NJIpR0dHfPnll4iNjcXp06fRqVMn9OrVCxcuXNB3abLAy+6pwikUCmzZskX6GhWiyuDu3buwsbFBdHQ02rVrp+9yiAAA1atXx7x58xAUFKTvUt54sroxIxHRs2RmZgL45wOISN8KCgqwYcMG5OTkQK1W67scWWAgIiLZKywsxPjx49G6dWs0btxY3+WQjMXHx0OtVuPRo0cwNzfHli1b4O7uru+yZIGBiIhkLzg4GOfPn8eRI0f0XQrJXIMGDRAXF4fMzExs3LgRgYGBiI6OZiiqAAxERCRrY8aMwY4dO3Do0CE4OjrquxySOWNjY7i6ugIAvLy8cOrUKSxatAjfffednit78zEQEZEsCSEwduxYbNmyBVFRUXBxcdF3SUTFFBYWIjc3V99lyAIDEVWI7OxsXL16VZpOSkpCXFwcqlevjtq1a+uxMpKr4OBgrF27Ftu2bYOFhQVSU1MBAJaWljAxMdFzdSRHoaGh8PX1Re3atZGVlYW1a9ciKioKe/bs0XdpssDL7qlCREVFoWPHjsXaAwMDERERUfEFkewpFIoS23/88UcMHjy4YoshAhAUFIT9+/cjJSUFlpaW8PT0REhICLp06aLv0mSBgYiIiIhkj3eqJiIiItljICIiIiLZYyAiIiIi2WMgIiIiItljICIiIiLZYyAiIiIi2WMgIiJ6gaioKCxbtkzfZRBROWIgIqJSi4iIgJWVld62f+PGDSgUCsTFxVXYNq9fv44PP/wQ77zzTqmXiYqKgkKhQEZGRvkV9gr08TwSVXYMRESvkcGDB0OhUODLL7/Uat+6desz77xM2orCStHD2toa3bt3R3x8fLG+ubm56N+/P77//ns0b95cD9W+usGDB8Pf31+rzcnJCSkpKWjcuLF+iiKqhBiIiF4zVatWxZw5c/D333/ru5RSycvL03cJJUpMTERKSgr27NmD3Nxc+Pn5FatVqVTi5MmT8PX11VOV5cPQ0BB2dnaoUoVfZ0lUhIGI6DXj7e0NOzs7hIeHP7ffpk2b0KhRIyiVStSpUwfz58/Xml+nTh189tlnCAgIgLm5OZydnfHbb7/h7t276NWrF8zNzeHp6YnTp08XW/fWrVtRr149VK1aFT4+Prh165Y0b+bMmWjatClWrlwJFxcXVK1aFQCQkZGBYcOGwdraGiqVCp06dcLZs2efuw8nT57E22+/japVq6J58+Y4c+ZMsT7nz5+Hr68vzM3NYWtri0GDBuGvv/567noBwMbGBnZ2dmjWrBnGjx+PW7du4dKlS9L8I0eOoG3btjAxMYGTkxPGjRuHnJwcaX5ubi5CQkLg5OQEpVIJV1dX/PDDDyVu6969e/jggw9Qq1YtmJqawsPDA7/88otWnw4dOmDs2LEYP348qlWrBltbW3z//ffIycnBkCFDYGFhAVdXV+zatUtapqCgAEFBQXBxcYGJiQkaNGiARYsWSfNnzpyJVatWYdu2bdIRsaioqBJPmUVHR6NFixZQKpWwt7fHf//7X+Tn52vVN27cOEyZMgXVq1eHnZ0dZs6cKc0XQmDmzJmoXbs2lEolHBwcMG7cuBe+DkSVhiCi10ZgYKDo1auX2Lx5s6hataq4deuWEEKILVu2iCd/nU+fPi0MDAxEWFiYSExMFD/++KMwMTERP/74o9TH2dlZVK9eXSxfvlxcvnxZjBo1SqhUKtGtWzexfv16kZiYKPz9/YWbm5soLCwUQgjx448/CiMjI9G8eXNx7Ngxcfr0adGiRQvx7rvvSuudMWOGMDMzE926dRN//PGHOHv2rBBCCG9vb9GjRw9x6tQpcfnyZTFp0iRRo0YNce/evRL3NSsrS1hbW4sBAwaI8+fPi+3bt4u33npLABBnzpwRQgjx999/C2traxEaGioSEhLEH3/8Ibp06SI6duz4zOfw4MGDAoD4+++/hRBCZGRkiAEDBggAIiEhQQghxNWrV4WZmZlYsGCBuHz5sjh69Kh4++23xeDBg6X19OvXTzg5OYnNmzeLa9euiX379olff/21xG3cvn1bzJs3T5w5c0Zcu3ZNLF68WBgaGooTJ05I62vfvr2wsLAQs2fPFpcvXxazZ88WhoaGwtfXV6xYsUJ6jWrUqCFycnKEEELk5eWJ6dOni1OnTonr16+Ln3/+WZiamop169ZJz2G/fv1Et27dREpKikhJSRG5ubkiKSlJ63m8ffu2MDU1FaNHjxYJCQliy5YtombNmmLGjBla9alUKjFz5kxx+fJlsWrVKqFQKMTevXuFEEJs2LBBqFQq8fvvv4ubN2+KEydOiBUrVjzzdSCqbBiIiF4jRYFICCFatWolhg4dKoQoHogGDBggunTporXs5MmThbu7uzTt7OwsPvzwQ2k6JSVFABCffvqp1BYTEyMAiJSUFCHEP4EIgDh+/LjUJyEhQQCQPtxnzJghjIyMRHp6utTn8OHDQqVSiUePHmnVVLduXfHdd9+VuK/fffedqFGjhnj48KHUtmzZMq0P8tmzZ4uuXbtqLXfr1i0BQCQmJpa43qKwYmZmJszMzAQAAUD07NlT6hMUFCRGjBihtdzhw4eFgYGBePjwoUhMTBQARGRk5HO3URSISuLn5ycmTZokTbdv3160adNGms7PzxdmZmZi0KBBUlvRaxQTE/PM9QYHB4s+ffpI00++Z4o8HYg++eQT0aBBAyn4CiHEN998I8zNzUVBQUGJ9QkhxDvvvCNCQkKEEELMnz9f1K9fX+Tl5T2zNqLKjKfMiF5Tc+bMwapVq5CQkFBsXkJCAlq3bq3V1rp1a1y5cgUFBQVSm6enp/Szra0tAMDDw6NYW3p6utRWpUoVrSuuGjZsCCsrK606nJ2dYW1tLU2fPXsW2dnZqFGjBszNzaVHUlISrl27VuL+JSQkwNPTUzrlBgBqtVqrz9mzZ3Hw4EGtdTZs2BAAnrneIocPH0ZsbCwiIiJQv359LF++XGu9ERERWuv18fFBYWEhkpKSEBcXB0NDQ7Rv3/652yhSUFCA2bNnw8PDA9WrV4e5uTn27NmD5ORkrX5Pvh6GhoaoUaPGC1+Pb775Bl5eXrC2toa5uTlWrFhRbL0vkpCQALVarTUwv3Xr1sjOzsbt27dLrA8A7O3tpVr+/e9/4+HDh3jrrbcwfPhwbNmyReuUG1FlxxF1RK+pdu3awcfHB6GhoRg8ePBLrcPIyEj6uejDsKS2wsJCndZrZmamNZ2dnQ17e3tERUUV6/sql/FnZ2ejR48emDNnTrF59vb2z13WxcUFVlZWaNCgAdLT0/H+++/j0KFD0no/+uijEsfA1K5dG1evXtWpznnz5mHRokVYuHAhPDw8YGZmhvHjxxcbxP3kcw/88/w/7/X49ddf8fHHH2P+/PlQq9WwsLDAvHnzcOLECZ3qK62S6iuqxcnJCYmJidi3bx8iIyMxevRozJs3D9HR0cWWI6qMGIiIXmNffvklmjZtigYNGmi1u7m54ejRo1ptR48eRf369WFoaPhK28zPz8fp06fRokULAP9crZWRkQE3N7dnLtOsWTOkpqaiSpUqqFOnTqm24+bmhtWrV+PRo0fSUaLjx48XW++mTZtQp06dV7piKjg4GOHh4diyZQv+9a9/oVmzZrh48SJcXV1L7O/h4YHCwkJER0fD29v7hes/evQoevXqhQ8//BDAP4Hm8uXLcHd3f+mai9b77rvvYvTo0VLb00fGjI2NtY4KlsTNzQ2bNm2CEEIKXUePHoWFhQUcHR1LXY+JiQl69OiBHj16IDg4GA0bNkR8fDyaNWumw14R6QdPmRG9xjw8PDBw4EAsXrxYq33SpEnYv38/Zs+ejcuXL2PVqlVYunQpPv7441feppGREcaOHYsTJ04gNjYWgwcPRqtWraSAVBJvb2+o1Wr4+/tj7969uHHjBo4dO4apU6eWeBUbAAwYMAAKhQLDhw/HxYsX8fvvv+Orr77S6hMcHIz79+/jgw8+wKlTp3Dt2jXs2bMHQ4YMeWEIeJKpqSmGDx+OGTNmQAiBkJAQHDt2DGPGjEFcXByuXLmCbdu2YcyYMQD+uUIvMDAQQ4cOxdatW5GUlISoqCisX7++xPXXq1cPkZGROHbsGBISEvDRRx8hLS2t1PU9S7169XD69Gns2bMHly9fxqeffopTp05p9alTpw7OnTuHxMRE/PXXX3j8+HGx9YwePRq3bt3C2LFjcenSJWzbtg0zZszAxIkTYWBQuo+JiIgI/PDDDzh//jyuX7+On3/+GSYmJnB2dn7l/SSqCAxERK+5sLCwYqe0mjVrhvXr1+PXX39F48aNMX36dISFhb30qbUnmZqaIiQkBAMGDEDr1q1hbm6OdevWPXcZhUKB33//He3atcOQIUNQv3599O/fHzdv3pTGxTzN3Nwc27dvR3x8PN5++21MnTq12KkxBwcHHD16FAUFBejatSs8PDwwfvx4WFlZlfqDvMiYMWOQkJCADRs2wNPTE9HR0bh8+TLatm2Lt99+G9OnT4eDg4PUf9myZejbty9Gjx6Nhg0bYvjw4VqX5T9p2rRpaNasGXx8fNChQwfY2dkVu1niy/joo4/Qu3dvvP/++2jZsiXu3bundbQIAIYPH44GDRqgefPmsLa2LnbkEABq1aqF33//HSdPnkSTJk0wcuRIBAUFYdq0aaWuxcrKCt9//z1at24NT09P7Nu3D9u3b0eNGjVeeT+JKoJCCCH0XQQRERGRPvEIEREREckeAxERERHJHgMRERERyR4DEREREckeAxERERHJHgMRERERyR4DEREREckeAxERERHJHgMRERERyR4DEREREckeAxERERHJHgMRERERyd7/A6MFwrT242YRAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# diagramme à barres montrant la répartition de 'NB_Claim' \n",
    "sns.countplot(x='NB_Claim', data=claims_data)\n",
    "plt.pyplot.title('Distribution du Nombre de Réclamations')\n",
    "plt.pyplot.xlabel('Nombre de Réclamations')\n",
    "plt.pyplot.ylabel('Nombre de Polices')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76902d34",
   "metadata": {},
   "source": [
    "### Sur la période allant de 2013 à 2016, l'on a enrigistré principalement 1 réclamation par contrat (Plus de 75% de la base)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b75c563",
   "metadata": {},
   "source": [
    "# Prétraitement + EDA de 'contract_data'\n",
    "\n",
    "Cette base de données contient les informations relatives aux contrats d'assurance souscrits par les clients. Voici les types de variables typiquement incluses :\n",
    "\n",
    "- **Id_pol** : L'identifiant unique de la police d'assurance, servant de clé principale.\n",
    "- **Duration** : La durée de couverture de l'assurance, exprimée en jours.\n",
    "- **Insured.age** : L'âge de l'assuré, un facteur important dans le calcul du risque et de la prime.\n",
    "- **Insured.sex** : Le sexe de l'assuré, qui peut influencer les statistiques de risque.\n",
    "- **Car.age** : L'âge du véhicule assuré, plus le véhicule est vieux, potentiellement plus le risque de panne est élevé.\n",
    "- **Marital** : Le statut marital de l'assuré, pouvant affecter le profil de risque.\n",
    "- **Car.use** : L'utilisation du véhicule, comme privée ou commerciale, affectant également le risque.\n",
    "- **Credit.score** : Le score de crédit de l'assuré, indicatif de sa fiabilité financière. \n",
    "\n",
    "« La discipline financière d’un assuré est représentative du soin qu’il porte à sa voiture ou son habitation », élabore Anne Morin, responsable des affaires publiques du Bureau d’assurance du Canada (BAC).\n",
    "Le pointage (ou score) de crédit est une cote, variant entre 300 et 900, attribuée par les agences de crédit (Equifax et TransUnion),au Canada, qui confectionnent votre dossier de crédit. Si votre cote dépasse les 700, c’est très bon.\n",
    "https://www.guideautoweb.com/articles/62376/les-impacts-de-votre-score-de-credit-sur-votre-police-d-assurance-automobile/\n",
    "\n",
    "- **Region** : La région de résidence de l'assuré, car les risques varient géographiquement.\n",
    "- **Annual.miles.drive** : Les miles annuels prévus, affectant directement l'exposition au risque.\n",
    "- **Years.noclaims** : Le nombre d'années sans réclamation, un indicateur de la prudence du conducteur.\n",
    "\n",
    "En principe, la variable \"Years.noclaims\" représente le nombre d'années sans réclamation au moment de la souscription du contrat. Il est possible que le nombre d'années sans réclamation soit supérieur à la durée du contrat. Cela pourrait indiquer que l'assuré avait déjà un historique de plusieurs années sans réclamation avant de souscrire ce contrat spécifique.\n",
    "\n",
    "- **Territory** : Le code territorial où le véhicule est principalement utilisé.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "5d04f842",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Id_pol                  int64\n",
       "Duration                int64\n",
       "Insured.age             int64\n",
       "Insured.sex            object\n",
       "Car.age                 int64\n",
       "Marital                object\n",
       "Car.use                object\n",
       "Credit.score          float64\n",
       "Region                 object\n",
       "Annual.miles.drive    float64\n",
       "Years.noclaims         object\n",
       "Territory               int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "contract_data.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8eada26a",
   "metadata": {},
   "source": [
    "Nous allons d'abord nous intéresser aux variables catégorielles."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "da0b5903",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Insured.sex</th>\n",
       "      <th>Marital</th>\n",
       "      <th>Car.use</th>\n",
       "      <th>Region</th>\n",
       "      <th>Years.noclaims</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>100399</td>\n",
       "      <td>100307</td>\n",
       "      <td>100399</td>\n",
       "      <td>100271</td>\n",
       "      <td>100399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>111</td>\n",
       "      <td>2</td>\n",
       "      <td>84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>Male</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>Urban</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>45932</td>\n",
       "      <td>65666</td>\n",
       "      <td>49855</td>\n",
       "      <td>78358</td>\n",
       "      <td>2436</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Insured.sex  Marital  Car.use  Region  Years.noclaims\n",
       "count       100399   100307   100399  100271          100399\n",
       "unique           5        4      111       2              84\n",
       "top           Male  Married  Commute   Urban               9\n",
       "freq         45932    65666    49855   78358            2436"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "contract_data.describe(include='object')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "644b42b0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Commute       49855\n",
       "Private       46103\n",
       "Commercial     2650\n",
       "Farmer         1411\n",
       "                 17\n",
       "              ...  \n",
       "97                1\n",
       "49                1\n",
       "83                1\n",
       "73                1\n",
       "                  1\n",
       "Name: Car.use, Length: 111, dtype: int64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Les catégories d'usage des véhicules\n",
    "contract_data['Car.use'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "6329a4e7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#on ne retient que les 4 catégories d'usage qui nous intéressent (elles sont majoritaires)\n",
    "contract_data = contract_data[contract_data['Car.use'].isin(['Private', 'Commute', 'Farmer', 'Commercial'])]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "c353d35d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Male       45737\n",
       "Female     38880\n",
       "H           8165\n",
       "F           7124\n",
       "Unknown      113\n",
       "Name: Insured.sex, dtype: int64"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#sexes des assurés\n",
    "contract_data['Insured.sex'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "a2b8bb2d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#on retire les lignes de sexes unkown\n",
    "contract_data = contract_data[contract_data['Insured.sex'] != 'Unknown']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "60e58e06",
   "metadata": {},
   "outputs": [],
   "source": [
    "#on uniformise les differents enregistrements de sexes\n",
    "contract_data['Insured.sex']=contract_data['Insured.sex'].str.replace('H','Male')\n",
    "contract_data['Insured.sex']=contract_data['Insured.sex'].str.replace('F','Female')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "758f19cd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Male           53902\n",
       "Femaleemale    38880\n",
       "Female          7124\n",
       "Name: Insured.sex, dtype: int64"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "contract_data['Insured.sex'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "b019899a",
   "metadata": {},
   "outputs": [],
   "source": [
    "contract_data['Insured.sex']=contract_data['Insured.sex'].str.replace('Femaleemale','Female')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "98fdf819",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Male      53902\n",
       "Female    46004\n",
       "Name: Insured.sex, dtype: int64"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "contract_data['Insured.sex'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1f82692",
   "metadata": {},
   "source": [
    "On a presqu'autant d'hommes que de femmes dans nos données.(environ 54% d'hommes et 46%de femmes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "7f2e63ab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Married    65319\n",
       "Single     28068\n",
       "Marié       4467\n",
       "Celib       1960\n",
       "Name: Marital, dtype: int64"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "contract_data['Marital'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "4d39b743",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Married    69786\n",
       "Single     30028\n",
       "Name: Marital, dtype: int64"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "contract_data['Marital']=contract_data['Marital'].str.replace('Marié','Married')\n",
    "contract_data['Marital']=contract_data['Marital'].str.replace('Celib','Single')\n",
    "contract_data['Marital'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ca00dfe",
   "metadata": {},
   "source": [
    "Il y'a plus de personnnes mariées que célibataires parmi les assurés. (environ 70% de mariés contre 30% de célibataires)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "916ea7d8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Urban    77989\n",
       "Rural    21789\n",
       "Name: Region, dtype: int64"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "contract_data['Region'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "687981fe",
   "metadata": {},
   "source": [
    "La majorité des assurés vit en zone urbaine. (environ 78%)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "a15cde5a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Marital  Insured.sex  Region\n",
       "Married  Male         Urban     31342\n",
       "         Female       Urban     22151\n",
       "Single   Female       Urban     13149\n",
       "         Male         Urban     11277\n",
       "Married  Male         Rural      8553\n",
       "         Female       Rural      7647\n",
       "Single   Female       Rural      2953\n",
       "         Male         Rural      2614\n",
       "dtype: int64"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "contract_data[['Marital','Insured.sex','Region']].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "f01d59d3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Marital  Insured.sex  Region\n",
      "Married  Male         Urban     31.440724\n",
      "         Female       Urban     22.220773\n",
      "Single   Female       Urban     13.190418\n",
      "         Male         Urban     11.312521\n",
      "Married  Male         Rural      8.579941\n",
      "         Female       Rural      7.671087\n",
      "Single   Female       Rural      2.962302\n",
      "         Male         Rural      2.622234\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Calcul des pourcentage pour chaque combinaison de valeurs dans les colonnes 'Marital', 'Insured.sex' et 'Region'\n",
    "group_analysis = contract_data[['Marital', 'Insured.sex', 'Region']].value_counts(normalize=True) * 100\n",
    "\n",
    "# Afficher les comptes en pourcentage\n",
    "print(group_analysis)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd2e6bc8",
   "metadata": {},
   "source": [
    "L'analyse en pourcentage des données révèle des différences significatives dans la répartition des variables étudiées.\n",
    "Environ 31,4% des assurés sont mariés, de sexe masculin et résident en zone urbaine, contre environ 22,2% de sexe féminin. \n",
    "En revanche, environ 8,6% d'hommes mariés vivent en zone rurale contre environ 7,7% de femmes mariées. \n",
    "\n",
    "Ces données fournissent des insights sur les tendances démographiques des assurés dans différentes régions, mettant en évidence des disparités potentiellement importantes en fonction du statut marital et du sexe.\n",
    "\n",
    "Dans notre ensemble de données, l'on constate que ces disparités ne sont pas très importantes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "f1d665d3",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "invalid literal for int() with base 10: 'EAJ'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[50], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m#Years.noclaims représente le nombre d'années sans réclamation. nous allons donc convertir le type de cette colonne en integer\u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m \u001b[43mcontract_data\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mYears.noclaims\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mastype\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mint\u001b[39;49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.10/site-packages/pandas/core/generic.py:6240\u001b[0m, in \u001b[0;36mNDFrame.astype\u001b[0;34m(self, dtype, copy, errors)\u001b[0m\n\u001b[1;32m   6233\u001b[0m     results \u001b[38;5;241m=\u001b[39m [\n\u001b[1;32m   6234\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39miloc[:, i]\u001b[38;5;241m.\u001b[39mastype(dtype, copy\u001b[38;5;241m=\u001b[39mcopy)\n\u001b[1;32m   6235\u001b[0m         \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(\u001b[38;5;28mlen\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns))\n\u001b[1;32m   6236\u001b[0m     ]\n\u001b[1;32m   6238\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m   6239\u001b[0m     \u001b[38;5;66;03m# else, only a single dtype is given\u001b[39;00m\n\u001b[0;32m-> 6240\u001b[0m     new_data \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_mgr\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mastype\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcopy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcopy\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   6241\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_constructor(new_data)\u001b[38;5;241m.\u001b[39m__finalize__(\u001b[38;5;28mself\u001b[39m, method\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mastype\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m   6243\u001b[0m \u001b[38;5;66;03m# GH 33113: handle empty frame or series\u001b[39;00m\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.10/site-packages/pandas/core/internals/managers.py:448\u001b[0m, in \u001b[0;36mBaseBlockManager.astype\u001b[0;34m(self, dtype, copy, errors)\u001b[0m\n\u001b[1;32m    447\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mastype\u001b[39m(\u001b[38;5;28mself\u001b[39m: T, dtype, copy: \u001b[38;5;28mbool\u001b[39m \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m, errors: \u001b[38;5;28mstr\u001b[39m \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mraise\u001b[39m\u001b[38;5;124m\"\u001b[39m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m T:\n\u001b[0;32m--> 448\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mapply\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mastype\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcopy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcopy\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.10/site-packages/pandas/core/internals/managers.py:352\u001b[0m, in \u001b[0;36mBaseBlockManager.apply\u001b[0;34m(self, f, align_keys, ignore_failures, **kwargs)\u001b[0m\n\u001b[1;32m    350\u001b[0m         applied \u001b[38;5;241m=\u001b[39m b\u001b[38;5;241m.\u001b[39mapply(f, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m    351\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 352\u001b[0m         applied \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mgetattr\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mb\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mf\u001b[49m\u001b[43m)\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    353\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m (\u001b[38;5;167;01mTypeError\u001b[39;00m, \u001b[38;5;167;01mNotImplementedError\u001b[39;00m):\n\u001b[1;32m    354\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m ignore_failures:\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.10/site-packages/pandas/core/internals/blocks.py:526\u001b[0m, in \u001b[0;36mBlock.astype\u001b[0;34m(self, dtype, copy, errors)\u001b[0m\n\u001b[1;32m    508\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    509\u001b[0m \u001b[38;5;124;03mCoerce to the new dtype.\u001b[39;00m\n\u001b[1;32m    510\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    522\u001b[0m \u001b[38;5;124;03mBlock\u001b[39;00m\n\u001b[1;32m    523\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    524\u001b[0m values \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mvalues\n\u001b[0;32m--> 526\u001b[0m new_values \u001b[38;5;241m=\u001b[39m \u001b[43mastype_array_safe\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvalues\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcopy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcopy\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    528\u001b[0m new_values \u001b[38;5;241m=\u001b[39m maybe_coerce_values(new_values)\n\u001b[1;32m    529\u001b[0m newb \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmake_block(new_values)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.10/site-packages/pandas/core/dtypes/astype.py:299\u001b[0m, in \u001b[0;36mastype_array_safe\u001b[0;34m(values, dtype, copy, errors)\u001b[0m\n\u001b[1;32m    296\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m values\u001b[38;5;241m.\u001b[39mcopy()\n\u001b[1;32m    298\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 299\u001b[0m     new_values \u001b[38;5;241m=\u001b[39m \u001b[43mastype_array\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvalues\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcopy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcopy\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    300\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m (\u001b[38;5;167;01mValueError\u001b[39;00m, \u001b[38;5;167;01mTypeError\u001b[39;00m):\n\u001b[1;32m    301\u001b[0m     \u001b[38;5;66;03m# e.g. astype_nansafe can fail on object-dtype of strings\u001b[39;00m\n\u001b[1;32m    302\u001b[0m     \u001b[38;5;66;03m#  trying to convert to float\u001b[39;00m\n\u001b[1;32m    303\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m errors \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mignore\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.10/site-packages/pandas/core/dtypes/astype.py:230\u001b[0m, in \u001b[0;36mastype_array\u001b[0;34m(values, dtype, copy)\u001b[0m\n\u001b[1;32m    227\u001b[0m     values \u001b[38;5;241m=\u001b[39m values\u001b[38;5;241m.\u001b[39mastype(dtype, copy\u001b[38;5;241m=\u001b[39mcopy)\n\u001b[1;32m    229\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 230\u001b[0m     values \u001b[38;5;241m=\u001b[39m \u001b[43mastype_nansafe\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvalues\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcopy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcopy\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    232\u001b[0m \u001b[38;5;66;03m# in pandas we don't store numpy str dtypes, so convert to object\u001b[39;00m\n\u001b[1;32m    233\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(dtype, np\u001b[38;5;241m.\u001b[39mdtype) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28missubclass\u001b[39m(values\u001b[38;5;241m.\u001b[39mdtype\u001b[38;5;241m.\u001b[39mtype, \u001b[38;5;28mstr\u001b[39m):\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.10/site-packages/pandas/core/dtypes/astype.py:170\u001b[0m, in \u001b[0;36mastype_nansafe\u001b[0;34m(arr, dtype, copy, skipna)\u001b[0m\n\u001b[1;32m    166\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(msg)\n\u001b[1;32m    168\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m copy \u001b[38;5;129;01mor\u001b[39;00m is_object_dtype(arr\u001b[38;5;241m.\u001b[39mdtype) \u001b[38;5;129;01mor\u001b[39;00m is_object_dtype(dtype):\n\u001b[1;32m    169\u001b[0m     \u001b[38;5;66;03m# Explicit copy, or required since NumPy can't view from / to object.\u001b[39;00m\n\u001b[0;32m--> 170\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43marr\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mastype\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcopy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\n\u001b[1;32m    172\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m arr\u001b[38;5;241m.\u001b[39mastype(dtype, copy\u001b[38;5;241m=\u001b[39mcopy)\n",
      "\u001b[0;31mValueError\u001b[0m: invalid literal for int() with base 10: 'EAJ'"
     ]
    }
   ],
   "source": [
    "#Years.noclaims représente le nombre d'années sans réclamation. nous allons donc convertir le type de cette colonne en integer\n",
    "contract_data['Years.noclaims'].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "ad619d2f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Il y'a un élément qui bloque la modification du type de 'Years.noclaims'. Nous allons retirer les lignes où 'Years.noclaims' = 'EAJ'\n",
    "contract_data=contract_data[contract_data['Years.noclaims']!='EAJ']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "4dc43b54",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Nous pouvons maintenant procéder à la transformation\n",
    "contract_data['Years.noclaims']=contract_data['Years.noclaims'].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "01b0050d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Insured.sex</th>\n",
       "      <th>Marital</th>\n",
       "      <th>Car.use</th>\n",
       "      <th>Region</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>99870</td>\n",
       "      <td>99778</td>\n",
       "      <td>99870</td>\n",
       "      <td>99742</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>Male</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>53883</td>\n",
       "      <td>69763</td>\n",
       "      <td>49771</td>\n",
       "      <td>77958</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Insured.sex  Marital  Car.use Region\n",
       "count        99870    99778    99870  99742\n",
       "unique           2        2        4      2\n",
       "top           Male  Married  Commute  Urban\n",
       "freq         53883    69763    49771  77958"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "contract_data.describe(include='object')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07b8f446",
   "metadata": {},
   "source": [
    "Il semblerait que les retraitements aient été bien effectués."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "d4abfa4a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Id_pol                  0\n",
       "Duration                0\n",
       "Insured.age             0\n",
       "Insured.sex             0\n",
       "Car.age                 0\n",
       "Marital                92\n",
       "Car.use                 0\n",
       "Credit.score            0\n",
       "Region                128\n",
       "Annual.miles.drive      0\n",
       "Years.noclaims          0\n",
       "Territory               0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Passons maintenant aux valeurs manquantes\n",
    "contract_data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "540d8f81",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "99870"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(contract_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75009a9e",
   "metadata": {},
   "source": [
    "Il y'a 92 valeurs manquantes au niveau du statut conjugal et 128 au niveau de Region.\n",
    "Vu que nous avons plus de 99000 lignes dans le dataset et qu'il s'agit de variables catégorielles, nous allons remplacer les valeurs manquantes par les valeurs les plus fréquentes des colonnes concernées."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "b193213c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#remplacement des NA par les valeurs les plus fréquentes\n",
    "contract_data['Marital'].fillna(contract_data['Marital'].mode()[0], inplace=True)\n",
    "contract_data['Region'].fillna(contract_data['Region'].mode()[0], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "e68c1314",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Id_pol                0\n",
       "Duration              0\n",
       "Insured.age           0\n",
       "Insured.sex           0\n",
       "Car.age               0\n",
       "Marital               0\n",
       "Car.use               0\n",
       "Credit.score          0\n",
       "Region                0\n",
       "Annual.miles.drive    0\n",
       "Years.noclaims        0\n",
       "Territory             0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "contract_data.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9db63c92",
   "metadata": {},
   "source": [
    "Il n'y a plus de valeur manquante."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "bdf4d212",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#on s'intéresse maintenant aux doublons\n",
    "contract_data.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "646335f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#suppression des doublons purs de contract_data\n",
    "contract_data=contract_data[contract_data.duplicated()!=True]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "c0333093",
   "metadata": {},
   "outputs": [],
   "source": [
    "#doublons sur la base de l'id du contrat\n",
    "duplicates_contract=contract_data[contract_data.duplicated(subset='Id_pol',keep=False)]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "55a7c95d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id_pol</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Insured.age</th>\n",
       "      <th>Insured.sex</th>\n",
       "      <th>Car.age</th>\n",
       "      <th>Marital</th>\n",
       "      <th>Car.use</th>\n",
       "      <th>Credit.score</th>\n",
       "      <th>Region</th>\n",
       "      <th>Annual.miles.drive</th>\n",
       "      <th>Years.noclaims</th>\n",
       "      <th>Territory</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2699</th>\n",
       "      <td>143962</td>\n",
       "      <td>181</td>\n",
       "      <td>47</td>\n",
       "      <td>Female</td>\n",
       "      <td>-1</td>\n",
       "      <td>Single</td>\n",
       "      <td>Commute</td>\n",
       "      <td>814.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.420</td>\n",
       "      <td>30</td>\n",
       "      <td>83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3549</th>\n",
       "      <td>187006</td>\n",
       "      <td>366</td>\n",
       "      <td>42</td>\n",
       "      <td>Female</td>\n",
       "      <td>7</td>\n",
       "      <td>Single</td>\n",
       "      <td>Commute</td>\n",
       "      <td>754.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.420</td>\n",
       "      <td>26</td>\n",
       "      <td>87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4104</th>\n",
       "      <td>170468</td>\n",
       "      <td>366</td>\n",
       "      <td>59</td>\n",
       "      <td>Female</td>\n",
       "      <td>8</td>\n",
       "      <td>Single</td>\n",
       "      <td>Commute</td>\n",
       "      <td>713.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>11184.678</td>\n",
       "      <td>35</td>\n",
       "      <td>84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4457</th>\n",
       "      <td>126690</td>\n",
       "      <td>182</td>\n",
       "      <td>44</td>\n",
       "      <td>Female</td>\n",
       "      <td>3</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>575.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.420</td>\n",
       "      <td>20</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4510</th>\n",
       "      <td>191319</td>\n",
       "      <td>365</td>\n",
       "      <td>35</td>\n",
       "      <td>Male</td>\n",
       "      <td>8</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>818.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.420</td>\n",
       "      <td>11</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98633</th>\n",
       "      <td>218371</td>\n",
       "      <td>183</td>\n",
       "      <td>78</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>Married</td>\n",
       "      <td>Private</td>\n",
       "      <td>848.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>6213.710</td>\n",
       "      <td>61</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98996</th>\n",
       "      <td>178092</td>\n",
       "      <td>0</td>\n",
       "      <td>71</td>\n",
       "      <td>Male</td>\n",
       "      <td>6</td>\n",
       "      <td>Married</td>\n",
       "      <td>Private</td>\n",
       "      <td>842.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>6213.710</td>\n",
       "      <td>43</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99368</th>\n",
       "      <td>126690</td>\n",
       "      <td>0</td>\n",
       "      <td>44</td>\n",
       "      <td>Female</td>\n",
       "      <td>3</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>575.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.420</td>\n",
       "      <td>20</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99851</th>\n",
       "      <td>129569</td>\n",
       "      <td>182</td>\n",
       "      <td>68</td>\n",
       "      <td>Male</td>\n",
       "      <td>5</td>\n",
       "      <td>Married</td>\n",
       "      <td>Private</td>\n",
       "      <td>900.0</td>\n",
       "      <td>Rural</td>\n",
       "      <td>12427.420</td>\n",
       "      <td>52</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100186</th>\n",
       "      <td>195218</td>\n",
       "      <td>366</td>\n",
       "      <td>39</td>\n",
       "      <td>Male</td>\n",
       "      <td>7</td>\n",
       "      <td>Single</td>\n",
       "      <td>Commute</td>\n",
       "      <td>762.0</td>\n",
       "      <td>Rural</td>\n",
       "      <td>12427.420</td>\n",
       "      <td>23</td>\n",
       "      <td>57</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>94 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Id_pol  Duration  Insured.age Insured.sex  Car.age  Marital  Car.use  \\\n",
       "2699    143962       181           47      Female       -1   Single  Commute   \n",
       "3549    187006       366           42      Female        7   Single  Commute   \n",
       "4104    170468       366           59      Female        8   Single  Commute   \n",
       "4457    126690       182           44      Female        3  Married  Commute   \n",
       "4510    191319       365           35        Male        8  Married  Commute   \n",
       "...        ...       ...          ...         ...      ...      ...      ...   \n",
       "98633   218371       183           78        Male        0  Married  Private   \n",
       "98996   178092         0           71        Male        6  Married  Private   \n",
       "99368   126690         0           44      Female        3  Married  Commute   \n",
       "99851   129569       182           68        Male        5  Married  Private   \n",
       "100186  195218       366           39        Male        7   Single  Commute   \n",
       "\n",
       "        Credit.score Region  Annual.miles.drive  Years.noclaims  Territory  \n",
       "2699           814.0  Urban           12427.420              30         83  \n",
       "3549           754.0  Urban           12427.420              26         87  \n",
       "4104           713.0  Urban           11184.678              35         84  \n",
       "4457           575.0  Urban           12427.420              20         26  \n",
       "4510           818.0  Urban           12427.420              11         70  \n",
       "...              ...    ...                 ...             ...        ...  \n",
       "98633          848.0  Urban            6213.710              61         60  \n",
       "98996          842.0  Urban            6213.710              43         30  \n",
       "99368          575.0  Urban           12427.420              20         26  \n",
       "99851          900.0  Rural           12427.420              52         31  \n",
       "100186         762.0  Rural           12427.420              23         57  \n",
       "\n",
       "[94 rows x 12 columns]"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "duplicates_contract"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "de8b7b75",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id_pol</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Insured.age</th>\n",
       "      <th>Insured.sex</th>\n",
       "      <th>Car.age</th>\n",
       "      <th>Marital</th>\n",
       "      <th>Car.use</th>\n",
       "      <th>Credit.score</th>\n",
       "      <th>Region</th>\n",
       "      <th>Annual.miles.drive</th>\n",
       "      <th>Years.noclaims</th>\n",
       "      <th>Territory</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>50865</th>\n",
       "      <td>218371</td>\n",
       "      <td>66</td>\n",
       "      <td>78</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>Single</td>\n",
       "      <td>Private</td>\n",
       "      <td>848.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>6213.71</td>\n",
       "      <td>61</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98633</th>\n",
       "      <td>218371</td>\n",
       "      <td>183</td>\n",
       "      <td>78</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>Married</td>\n",
       "      <td>Private</td>\n",
       "      <td>848.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>6213.71</td>\n",
       "      <td>61</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Id_pol  Duration  Insured.age Insured.sex  Car.age  Marital  Car.use  \\\n",
       "50865  218371        66           78        Male        0   Single  Private   \n",
       "98633  218371       183           78        Male        0  Married  Private   \n",
       "\n",
       "       Credit.score Region  Annual.miles.drive  Years.noclaims  Territory  \n",
       "50865         848.0  Urban             6213.71              61         60  \n",
       "98633         848.0  Urban             6213.71              61         60  "
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "duplicates_contract[duplicates_contract['Id_pol']==218371]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "0a972415",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id_pol</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Insured.age</th>\n",
       "      <th>Insured.sex</th>\n",
       "      <th>Car.age</th>\n",
       "      <th>Marital</th>\n",
       "      <th>Car.use</th>\n",
       "      <th>Credit.score</th>\n",
       "      <th>Region</th>\n",
       "      <th>Annual.miles.drive</th>\n",
       "      <th>Years.noclaims</th>\n",
       "      <th>Territory</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2699</th>\n",
       "      <td>143962</td>\n",
       "      <td>181</td>\n",
       "      <td>47</td>\n",
       "      <td>Female</td>\n",
       "      <td>-1</td>\n",
       "      <td>Single</td>\n",
       "      <td>Commute</td>\n",
       "      <td>814.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.42</td>\n",
       "      <td>30</td>\n",
       "      <td>83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52534</th>\n",
       "      <td>143962</td>\n",
       "      <td>365</td>\n",
       "      <td>47</td>\n",
       "      <td>Female</td>\n",
       "      <td>-1</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>814.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.42</td>\n",
       "      <td>30</td>\n",
       "      <td>83</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Id_pol  Duration  Insured.age Insured.sex  Car.age  Marital  Car.use  \\\n",
       "2699   143962       181           47      Female       -1   Single  Commute   \n",
       "52534  143962       365           47      Female       -1  Married  Commute   \n",
       "\n",
       "       Credit.score Region  Annual.miles.drive  Years.noclaims  Territory  \n",
       "2699          814.0  Urban            12427.42              30         83  \n",
       "52534         814.0  Urban            12427.42              30         83  "
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "duplicates_contract[duplicates_contract['Id_pol']==143962]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "da105404",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id_pol</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Insured.age</th>\n",
       "      <th>Insured.sex</th>\n",
       "      <th>Car.age</th>\n",
       "      <th>Marital</th>\n",
       "      <th>Car.use</th>\n",
       "      <th>Credit.score</th>\n",
       "      <th>Region</th>\n",
       "      <th>Annual.miles.drive</th>\n",
       "      <th>Years.noclaims</th>\n",
       "      <th>Territory</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4457</th>\n",
       "      <td>126690</td>\n",
       "      <td>182</td>\n",
       "      <td>44</td>\n",
       "      <td>Female</td>\n",
       "      <td>3</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>575.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.42</td>\n",
       "      <td>20</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99368</th>\n",
       "      <td>126690</td>\n",
       "      <td>0</td>\n",
       "      <td>44</td>\n",
       "      <td>Female</td>\n",
       "      <td>3</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>575.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.42</td>\n",
       "      <td>20</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Id_pol  Duration  Insured.age Insured.sex  Car.age  Marital  Car.use  \\\n",
       "4457   126690       182           44      Female        3  Married  Commute   \n",
       "99368  126690         0           44      Female        3  Married  Commute   \n",
       "\n",
       "       Credit.score Region  Annual.miles.drive  Years.noclaims  Territory  \n",
       "4457          575.0  Urban            12427.42              20         26  \n",
       "99368         575.0  Urban            12427.42              20         26  "
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "duplicates_contract[duplicates_contract['Id_pol']==126690]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "a4b6b731",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id_pol</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Insured.age</th>\n",
       "      <th>Insured.sex</th>\n",
       "      <th>Car.age</th>\n",
       "      <th>Marital</th>\n",
       "      <th>Car.use</th>\n",
       "      <th>Credit.score</th>\n",
       "      <th>Region</th>\n",
       "      <th>Annual.miles.drive</th>\n",
       "      <th>...</th>\n",
       "      <th>Insured.age_changed</th>\n",
       "      <th>Insured.sex_changed</th>\n",
       "      <th>Car.age_changed</th>\n",
       "      <th>Marital_changed</th>\n",
       "      <th>Car.use_changed</th>\n",
       "      <th>Credit.score_changed</th>\n",
       "      <th>Region_changed</th>\n",
       "      <th>Annual.miles.drive_changed</th>\n",
       "      <th>Years.noclaims_changed</th>\n",
       "      <th>Territory_changed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>143962</td>\n",
       "      <td>181</td>\n",
       "      <td>47</td>\n",
       "      <td>Female</td>\n",
       "      <td>-1</td>\n",
       "      <td>Single</td>\n",
       "      <td>Commute</td>\n",
       "      <td>814.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.420</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>187006</td>\n",
       "      <td>366</td>\n",
       "      <td>42</td>\n",
       "      <td>Female</td>\n",
       "      <td>7</td>\n",
       "      <td>Single</td>\n",
       "      <td>Commute</td>\n",
       "      <td>754.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.420</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>170468</td>\n",
       "      <td>366</td>\n",
       "      <td>59</td>\n",
       "      <td>Female</td>\n",
       "      <td>8</td>\n",
       "      <td>Single</td>\n",
       "      <td>Commute</td>\n",
       "      <td>713.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>11184.678</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>126690</td>\n",
       "      <td>182</td>\n",
       "      <td>44</td>\n",
       "      <td>Female</td>\n",
       "      <td>3</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>575.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.420</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>191319</td>\n",
       "      <td>365</td>\n",
       "      <td>35</td>\n",
       "      <td>Male</td>\n",
       "      <td>8</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>818.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.420</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>89</th>\n",
       "      <td>218371</td>\n",
       "      <td>183</td>\n",
       "      <td>78</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>Married</td>\n",
       "      <td>Private</td>\n",
       "      <td>848.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>6213.710</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90</th>\n",
       "      <td>178092</td>\n",
       "      <td>0</td>\n",
       "      <td>71</td>\n",
       "      <td>Male</td>\n",
       "      <td>6</td>\n",
       "      <td>Married</td>\n",
       "      <td>Private</td>\n",
       "      <td>842.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>6213.710</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>91</th>\n",
       "      <td>126690</td>\n",
       "      <td>0</td>\n",
       "      <td>44</td>\n",
       "      <td>Female</td>\n",
       "      <td>3</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>575.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.420</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92</th>\n",
       "      <td>129569</td>\n",
       "      <td>182</td>\n",
       "      <td>68</td>\n",
       "      <td>Male</td>\n",
       "      <td>5</td>\n",
       "      <td>Married</td>\n",
       "      <td>Private</td>\n",
       "      <td>900.0</td>\n",
       "      <td>Rural</td>\n",
       "      <td>12427.420</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93</th>\n",
       "      <td>195218</td>\n",
       "      <td>366</td>\n",
       "      <td>39</td>\n",
       "      <td>Male</td>\n",
       "      <td>7</td>\n",
       "      <td>Single</td>\n",
       "      <td>Commute</td>\n",
       "      <td>762.0</td>\n",
       "      <td>Rural</td>\n",
       "      <td>12427.420</td>\n",
       "      <td>...</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>94 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Id_pol  Duration  Insured.age Insured.sex  Car.age  Marital  Car.use  \\\n",
       "0   143962       181           47      Female       -1   Single  Commute   \n",
       "1   187006       366           42      Female        7   Single  Commute   \n",
       "2   170468       366           59      Female        8   Single  Commute   \n",
       "3   126690       182           44      Female        3  Married  Commute   \n",
       "4   191319       365           35        Male        8  Married  Commute   \n",
       "..     ...       ...          ...         ...      ...      ...      ...   \n",
       "89  218371       183           78        Male        0  Married  Private   \n",
       "90  178092         0           71        Male        6  Married  Private   \n",
       "91  126690         0           44      Female        3  Married  Commute   \n",
       "92  129569       182           68        Male        5  Married  Private   \n",
       "93  195218       366           39        Male        7   Single  Commute   \n",
       "\n",
       "    Credit.score Region  Annual.miles.drive  ...  Insured.age_changed  \\\n",
       "0          814.0  Urban           12427.420  ...                False   \n",
       "1          754.0  Urban           12427.420  ...                False   \n",
       "2          713.0  Urban           11184.678  ...                False   \n",
       "3          575.0  Urban           12427.420  ...                False   \n",
       "4          818.0  Urban           12427.420  ...                False   \n",
       "..           ...    ...                 ...  ...                  ...   \n",
       "89         848.0  Urban            6213.710  ...                False   \n",
       "90         842.0  Urban            6213.710  ...                False   \n",
       "91         575.0  Urban           12427.420  ...                False   \n",
       "92         900.0  Rural           12427.420  ...                False   \n",
       "93         762.0  Rural           12427.420  ...                False   \n",
       "\n",
       "    Insured.sex_changed  Car.age_changed  Marital_changed  Car.use_changed  \\\n",
       "0                 False            False             True            False   \n",
       "1                 False            False             True            False   \n",
       "2                 False            False             True            False   \n",
       "3                 False            False            False            False   \n",
       "4                 False            False             True            False   \n",
       "..                  ...              ...              ...              ...   \n",
       "89                False            False             True            False   \n",
       "90                False            False            False            False   \n",
       "91                False            False            False            False   \n",
       "92                False            False             True            False   \n",
       "93                False            False             True            False   \n",
       "\n",
       "    Credit.score_changed  Region_changed  Annual.miles.drive_changed  \\\n",
       "0                  False           False                       False   \n",
       "1                  False           False                       False   \n",
       "2                  False           False                       False   \n",
       "3                  False           False                       False   \n",
       "4                  False           False                       False   \n",
       "..                   ...             ...                         ...   \n",
       "89                 False           False                       False   \n",
       "90                 False           False                       False   \n",
       "91                 False           False                       False   \n",
       "92                 False           False                       False   \n",
       "93                 False           False                       False   \n",
       "\n",
       "    Years.noclaims_changed  Territory_changed  \n",
       "0                    False              False  \n",
       "1                    False              False  \n",
       "2                    False              False  \n",
       "3                    False              False  \n",
       "4                    False              False  \n",
       "..                     ...                ...  \n",
       "89                   False              False  \n",
       "90                   False              False  \n",
       "91                   False              False  \n",
       "92                   False              False  \n",
       "93                   False              False  \n",
       "\n",
       "[94 rows x 24 columns]"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Identifier les doublons par 'Id_pol'\n",
    "duplicates_contract = contract_data[contract_data.duplicated('Id_pol', keep=False)]\n",
    "\n",
    "# Fonction pour identifier les changements\n",
    "def identify_column_changes(group):\n",
    "    changes = {}\n",
    "    # Comparer chaque colonne\n",
    "    for col in group.columns:\n",
    "        if group[col].nunique() > 1:  # Si la colonne contient plusieurs valeurs différentes\n",
    "            changes[col + '_changed'] = True\n",
    "        else:\n",
    "            changes[col + '_changed'] = False\n",
    "    return pd.Series(changes)\n",
    "\n",
    "# Appliquer la fonction de comparaison à chaque groupe de doublons\n",
    "changes_df = duplicates_contract.groupby('Id_pol').apply(identify_column_changes).reset_index()\n",
    "\n",
    "# Joindre les indicateurs de changement au DataFrame original pour une analyse intégrée\n",
    "final_df = pd.merge(duplicates_contract, changes_df, on='Id_pol', how='left')\n",
    "final_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "dbe0b795",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id_pol_changed</th>\n",
       "      <th>Duration_changed</th>\n",
       "      <th>Insured.age_changed</th>\n",
       "      <th>Insured.sex_changed</th>\n",
       "      <th>Car.age_changed</th>\n",
       "      <th>Marital_changed</th>\n",
       "      <th>Car.use_changed</th>\n",
       "      <th>Credit.score_changed</th>\n",
       "      <th>Region_changed</th>\n",
       "      <th>Annual.miles.drive_changed</th>\n",
       "      <th>Years.noclaims_changed</th>\n",
       "      <th>Territory_changed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>94</td>\n",
       "      <td>94</td>\n",
       "      <td>94</td>\n",
       "      <td>94</td>\n",
       "      <td>94</td>\n",
       "      <td>94</td>\n",
       "      <td>94</td>\n",
       "      <td>94</td>\n",
       "      <td>94</td>\n",
       "      <td>94</td>\n",
       "      <td>94</td>\n",
       "      <td>94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>94</td>\n",
       "      <td>92</td>\n",
       "      <td>94</td>\n",
       "      <td>94</td>\n",
       "      <td>94</td>\n",
       "      <td>84</td>\n",
       "      <td>94</td>\n",
       "      <td>94</td>\n",
       "      <td>94</td>\n",
       "      <td>94</td>\n",
       "      <td>94</td>\n",
       "      <td>94</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Id_pol_changed Duration_changed Insured.age_changed  \\\n",
       "count              94               94                  94   \n",
       "unique              1                2                   1   \n",
       "top             False             True               False   \n",
       "freq               94               92                  94   \n",
       "\n",
       "       Insured.sex_changed Car.age_changed Marital_changed Car.use_changed  \\\n",
       "count                   94              94              94              94   \n",
       "unique                   1               1               2               1   \n",
       "top                  False           False            True           False   \n",
       "freq                    94              94              84              94   \n",
       "\n",
       "       Credit.score_changed Region_changed Annual.miles.drive_changed  \\\n",
       "count                    94             94                         94   \n",
       "unique                    1              1                          1   \n",
       "top                   False          False                      False   \n",
       "freq                     94             94                         94   \n",
       "\n",
       "       Years.noclaims_changed Territory_changed  \n",
       "count                      94                94  \n",
       "unique                      1                 1  \n",
       "top                     False             False  \n",
       "freq                       94                94  "
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df.describe(include='boolean')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8eb935b9",
   "metadata": {},
   "source": [
    "\n",
    "Id_pol_changed: Pas de changements détectés ici, car chaque Id_pol reste le même.\n",
    "\n",
    "Changements significatifs:\n",
    "Duration_changed: Les changements dans la durée ont été détectés dans 92 des 94 cas (presque tous).\n",
    "\n",
    "Marital_changed: 10 groupes sur 94 montrent des changements dans le statut marital.\n",
    "\n",
    "Aucun changement dans les autres attributs tels que Insured.age, Insured.sex, Car.use, etc. dans tous les doublons, car tous affichent \"False\" comme valeur la plus fréquente.\n",
    "\n",
    "Les changements sont principalement observés dans la durée des contrats et dans quelques cas dans le statut marital.\n",
    "Les autres attributs restent constants pour chaque Id_pol, ce qui pourrait indiquer une continuité dans les informations fournies ou une stabilité dans le comportement des assurés.\n",
    "\n",
    "Logique de Filtrage\n",
    "\n",
    "Supprimer les Doublons Non Changés:\n",
    "Si Duration change mais que Marital ne change pas, supprimer la ligne dupliquée.\n",
    "\n",
    "Conserver les Changements de Statut:\n",
    "Si Marital change, conserver toutes les lignes pour suivre l'historique.\n",
    "\n",
    "Doublons Non Changés:\n",
    "Si le statut marital ne change pas parmi les doublons d'un même Id_pol, ne conserver que la ligne avec la plus grande Duration.\n",
    "\n",
    "Doublons Changés:\n",
    "Si le statut marital change parmi les doublons d'un même Id_pol, conserver toutes les lignes pour préserver l'historique des variations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "e1390c9e",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 94 entries, 2699 to 100186\n",
      "Data columns (total 12 columns):\n",
      " #   Column              Non-Null Count  Dtype  \n",
      "---  ------              --------------  -----  \n",
      " 0   Id_pol              94 non-null     object \n",
      " 1   Duration            94 non-null     int64  \n",
      " 2   Insured.age         94 non-null     int64  \n",
      " 3   Insured.sex         94 non-null     object \n",
      " 4   Car.age             94 non-null     int64  \n",
      " 5   Marital             94 non-null     object \n",
      " 6   Car.use             94 non-null     object \n",
      " 7   Credit.score        94 non-null     float64\n",
      " 8   Region              94 non-null     object \n",
      " 9   Annual.miles.drive  94 non-null     float64\n",
      " 10  Years.noclaims      94 non-null     int64  \n",
      " 11  Territory           94 non-null     int64  \n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 9.5+ KB\n"
     ]
    }
   ],
   "source": [
    "duplicates_contract.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "f6c05fd6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Id_pol                0\n",
       "Duration              0\n",
       "Insured.age           0\n",
       "Insured.sex           0\n",
       "Car.age               0\n",
       "Marital               0\n",
       "Car.use               0\n",
       "Credit.score          0\n",
       "Region                0\n",
       "Annual.miles.drive    0\n",
       "Years.noclaims        0\n",
       "Territory             0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "duplicates_contract.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "97dc7709",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/df/tzlk6_xs46dbdsn2dm2mr21m0000gp/T/ipykernel_31415/1642986842.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  duplicates_contract['Id_pol'] = duplicates_contract['Id_pol'].astype(str)\n"
     ]
    }
   ],
   "source": [
    "# Convertir `Id_pol` en chaîne dans chaque base de données\n",
    "contract_data['Id_pol'] = contract_data['Id_pol'].astype(str)\n",
    "duplicates_contract['Id_pol'] = duplicates_contract['Id_pol'].astype(str)\n",
    "filtered_contracts['Id_pol'] = filtered_contracts['Id_pol'].astype(str)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "4877fcf9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Indices à garder : 89\n",
      "Indices à exclure : 5\n"
     ]
    }
   ],
   "source": [
    "# Listes pour stocker les indices à garder et à exclure\n",
    "indices_to_keep = []\n",
    "indices_to_exclude = []\n",
    "\n",
    "# Parcourir chaque groupe de doublons\n",
    "for id_pol, group in duplicates_contract.groupby('Id_pol'):\n",
    "    if group['Marital'].nunique() > 1:  # Si `Marital` change\n",
    "        indices_to_keep.extend(group.index)\n",
    "    else:  # Sinon, garder seulement la ligne avec la plus longue durée\n",
    "        max_duration_idx = group['Duration'].idxmax()\n",
    "        indices_to_keep.append(max_duration_idx)\n",
    "        indices_to_exclude.extend(group.index.difference([max_duration_idx]))\n",
    "\n",
    "# Vérifier les résultats\n",
    "print(f\"Indices à garder : {len(indices_to_keep)}\")\n",
    "print(f\"Indices à exclure : {len(indices_to_exclude)}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "25f9f7d0",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lignes à garder :\n",
      "       Id_pol  Duration  Insured.age Insured.sex  Car.age  Marital  Car.use  \\\n",
      "29582  126070       366           50        Male       12  Married  Commute   \n",
      "44050  126070       110           50        Male       12   Single  Commute   \n",
      "4457   126690       182           44      Female        3  Married  Commute   \n",
      "37670  129177       255           44        Male        3   Single  Commute   \n",
      "42532  129177       365           44        Male        3  Married  Commute   \n",
      "...       ...       ...          ...         ...      ...      ...      ...   \n",
      "53187  218653       184           48      Female        6  Married  Commute   \n",
      "42790  218672       366           64      Female        8  Married  Private   \n",
      "63916  218672        50           64      Female        8   Single  Private   \n",
      "12806  220234       220           40        Male        5   Single  Commute   \n",
      "70526  220234       365           40        Male        5  Married  Commute   \n",
      "\n",
      "       Credit.score Region  Annual.miles.drive  Years.noclaims  Territory  \n",
      "29582         900.0  Urban            9320.565              19         71  \n",
      "44050         900.0  Urban            9320.565              19         71  \n",
      "4457          575.0  Urban           12427.420              20         26  \n",
      "37670         885.0  Rural           12427.420              24         79  \n",
      "42532         885.0  Rural           12427.420              24         79  \n",
      "...             ...    ...                 ...             ...        ...  \n",
      "53187         847.0  Urban           12427.420              14         84  \n",
      "42790         844.0  Urban            6213.710              47         80  \n",
      "63916         844.0  Urban            6213.710              47         80  \n",
      "12806         777.0  Urban            9320.565              15         72  \n",
      "70526         777.0  Urban            9320.565              15         72  \n",
      "\n",
      "[89 rows x 12 columns]\n",
      "\n",
      "Lignes à exclure :\n",
      "       Id_pol  Duration  Insured.age Insured.sex  Car.age  Marital  Car.use  \\\n",
      "99368  126690         0           44      Female        3  Married  Commute   \n",
      "81455  147733         0           84        Male       10  Married  Private   \n",
      "98996  178092         0           71        Male        6  Married  Private   \n",
      "96027  187368         0           45        Male       -1  Married  Commute   \n",
      "85550  218653         0           48      Female        6  Married  Commute   \n",
      "\n",
      "       Credit.score Region  Annual.miles.drive  Years.noclaims  Territory  \n",
      "99368         575.0  Urban            12427.42              20         26  \n",
      "81455         856.0  Urban             6213.71              65         70  \n",
      "98996         842.0  Urban             6213.71              43         30  \n",
      "96027         609.0  Urban             6213.71              25         70  \n",
      "85550         847.0  Urban            12427.42              14         84  \n"
     ]
    }
   ],
   "source": [
    "# Créer les DataFrames basés sur les indices à garder et à exclure\n",
    "df_to_keep = duplicates_contract.loc[indices_to_keep]\n",
    "df_to_exclude = duplicates_contract.loc[indices_to_exclude]\n",
    "\n",
    "# Afficher les DataFrames\n",
    "print(\"Lignes à garder :\")\n",
    "print(df_to_keep)\n",
    "\n",
    "print(\"\\nLignes à exclure :\")\n",
    "print(df_to_exclude)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "9f40f768",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id_pol</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Insured.age</th>\n",
       "      <th>Insured.sex</th>\n",
       "      <th>Car.age</th>\n",
       "      <th>Marital</th>\n",
       "      <th>Car.use</th>\n",
       "      <th>Credit.score</th>\n",
       "      <th>Region</th>\n",
       "      <th>Annual.miles.drive</th>\n",
       "      <th>Years.noclaims</th>\n",
       "      <th>Territory</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>99368</th>\n",
       "      <td>126690</td>\n",
       "      <td>0</td>\n",
       "      <td>44</td>\n",
       "      <td>Female</td>\n",
       "      <td>3</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>575.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.42</td>\n",
       "      <td>20</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>81455</th>\n",
       "      <td>147733</td>\n",
       "      <td>0</td>\n",
       "      <td>84</td>\n",
       "      <td>Male</td>\n",
       "      <td>10</td>\n",
       "      <td>Married</td>\n",
       "      <td>Private</td>\n",
       "      <td>856.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>6213.71</td>\n",
       "      <td>65</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98996</th>\n",
       "      <td>178092</td>\n",
       "      <td>0</td>\n",
       "      <td>71</td>\n",
       "      <td>Male</td>\n",
       "      <td>6</td>\n",
       "      <td>Married</td>\n",
       "      <td>Private</td>\n",
       "      <td>842.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>6213.71</td>\n",
       "      <td>43</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96027</th>\n",
       "      <td>187368</td>\n",
       "      <td>0</td>\n",
       "      <td>45</td>\n",
       "      <td>Male</td>\n",
       "      <td>-1</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>609.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>6213.71</td>\n",
       "      <td>25</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>85550</th>\n",
       "      <td>218653</td>\n",
       "      <td>0</td>\n",
       "      <td>48</td>\n",
       "      <td>Female</td>\n",
       "      <td>6</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>847.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.42</td>\n",
       "      <td>14</td>\n",
       "      <td>84</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Id_pol  Duration  Insured.age Insured.sex  Car.age  Marital  Car.use  \\\n",
       "99368  126690         0           44      Female        3  Married  Commute   \n",
       "81455  147733         0           84        Male       10  Married  Private   \n",
       "98996  178092         0           71        Male        6  Married  Private   \n",
       "96027  187368         0           45        Male       -1  Married  Commute   \n",
       "85550  218653         0           48      Female        6  Married  Commute   \n",
       "\n",
       "       Credit.score Region  Annual.miles.drive  Years.noclaims  Territory  \n",
       "99368         575.0  Urban            12427.42              20         26  \n",
       "81455         856.0  Urban             6213.71              65         70  \n",
       "98996         842.0  Urban             6213.71              43         30  \n",
       "96027         609.0  Urban             6213.71              25         70  \n",
       "85550         847.0  Urban            12427.42              14         84  "
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_to_exclude"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "51f28a6a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id_pol</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Insured.age</th>\n",
       "      <th>Insured.sex</th>\n",
       "      <th>Car.age</th>\n",
       "      <th>Marital</th>\n",
       "      <th>Car.use</th>\n",
       "      <th>Credit.score</th>\n",
       "      <th>Region</th>\n",
       "      <th>Annual.miles.drive</th>\n",
       "      <th>Years.noclaims</th>\n",
       "      <th>Territory</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>67688</th>\n",
       "      <td>178092</td>\n",
       "      <td>183</td>\n",
       "      <td>71</td>\n",
       "      <td>Male</td>\n",
       "      <td>6</td>\n",
       "      <td>Married</td>\n",
       "      <td>Private</td>\n",
       "      <td>842.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>6213.71</td>\n",
       "      <td>43</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98996</th>\n",
       "      <td>178092</td>\n",
       "      <td>0</td>\n",
       "      <td>71</td>\n",
       "      <td>Male</td>\n",
       "      <td>6</td>\n",
       "      <td>Married</td>\n",
       "      <td>Private</td>\n",
       "      <td>842.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>6213.71</td>\n",
       "      <td>43</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Id_pol  Duration  Insured.age Insured.sex  Car.age  Marital  Car.use  \\\n",
       "67688  178092       183           71        Male        6  Married  Private   \n",
       "98996  178092         0           71        Male        6  Married  Private   \n",
       "\n",
       "       Credit.score Region  Annual.miles.drive  Years.noclaims  Territory  \n",
       "67688         842.0  Urban             6213.71              43         30  \n",
       "98996         842.0  Urban             6213.71              43         30  "
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "duplicates_contract[duplicates_contract['Id_pol']=='178092']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "03b1e91a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'[99368, 81455, 98996, 96027, 85550] not found in axis'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[90], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# Exclure les indices identifiés dans `contract_data`\u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m contract_data\u001b[38;5;241m=\u001b[39m \u001b[43mcontract_data\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdrop\u001b[49m\u001b[43m(\u001b[49m\u001b[43mindex\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mindices_to_exclude\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      3\u001b[0m contract_data\u001b[38;5;241m.\u001b[39minfo()\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.10/site-packages/pandas/util/_decorators.py:331\u001b[0m, in \u001b[0;36mdeprecate_nonkeyword_arguments.<locals>.decorate.<locals>.wrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    325\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(args) \u001b[38;5;241m>\u001b[39m num_allow_args:\n\u001b[1;32m    326\u001b[0m     warnings\u001b[38;5;241m.\u001b[39mwarn(\n\u001b[1;32m    327\u001b[0m         msg\u001b[38;5;241m.\u001b[39mformat(arguments\u001b[38;5;241m=\u001b[39m_format_argument_list(allow_args)),\n\u001b[1;32m    328\u001b[0m         \u001b[38;5;167;01mFutureWarning\u001b[39;00m,\n\u001b[1;32m    329\u001b[0m         stacklevel\u001b[38;5;241m=\u001b[39mfind_stack_level(),\n\u001b[1;32m    330\u001b[0m     )\n\u001b[0;32m--> 331\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfunc\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.10/site-packages/pandas/core/frame.py:5399\u001b[0m, in \u001b[0;36mDataFrame.drop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   5251\u001b[0m \u001b[38;5;129m@deprecate_nonkeyword_arguments\u001b[39m(version\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, allowed_args\u001b[38;5;241m=\u001b[39m[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mself\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mlabels\u001b[39m\u001b[38;5;124m\"\u001b[39m])\n\u001b[1;32m   5252\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mdrop\u001b[39m(  \u001b[38;5;66;03m# type: ignore[override]\u001b[39;00m\n\u001b[1;32m   5253\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   5260\u001b[0m     errors: IgnoreRaise \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mraise\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[1;32m   5261\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m DataFrame \u001b[38;5;241m|\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m   5262\u001b[0m     \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m   5263\u001b[0m \u001b[38;5;124;03m    Drop specified labels from rows or columns.\u001b[39;00m\n\u001b[1;32m   5264\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   5397\u001b[0m \u001b[38;5;124;03m            weight  1.0     0.8\u001b[39;00m\n\u001b[1;32m   5398\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m-> 5399\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43msuper\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdrop\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   5400\u001b[0m \u001b[43m        \u001b[49m\u001b[43mlabels\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlabels\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5401\u001b[0m \u001b[43m        \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maxis\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5402\u001b[0m \u001b[43m        \u001b[49m\u001b[43mindex\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mindex\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5403\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcolumns\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5404\u001b[0m \u001b[43m        \u001b[49m\u001b[43mlevel\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlevel\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5405\u001b[0m \u001b[43m        \u001b[49m\u001b[43minplace\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minplace\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5406\u001b[0m \u001b[43m        \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   5407\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.10/site-packages/pandas/util/_decorators.py:331\u001b[0m, in \u001b[0;36mdeprecate_nonkeyword_arguments.<locals>.decorate.<locals>.wrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    325\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(args) \u001b[38;5;241m>\u001b[39m num_allow_args:\n\u001b[1;32m    326\u001b[0m     warnings\u001b[38;5;241m.\u001b[39mwarn(\n\u001b[1;32m    327\u001b[0m         msg\u001b[38;5;241m.\u001b[39mformat(arguments\u001b[38;5;241m=\u001b[39m_format_argument_list(allow_args)),\n\u001b[1;32m    328\u001b[0m         \u001b[38;5;167;01mFutureWarning\u001b[39;00m,\n\u001b[1;32m    329\u001b[0m         stacklevel\u001b[38;5;241m=\u001b[39mfind_stack_level(),\n\u001b[1;32m    330\u001b[0m     )\n\u001b[0;32m--> 331\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfunc\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.10/site-packages/pandas/core/generic.py:4505\u001b[0m, in \u001b[0;36mNDFrame.drop\u001b[0;34m(self, labels, axis, index, columns, level, inplace, errors)\u001b[0m\n\u001b[1;32m   4503\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m axis, labels \u001b[38;5;129;01min\u001b[39;00m axes\u001b[38;5;241m.\u001b[39mitems():\n\u001b[1;32m   4504\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m labels \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m-> 4505\u001b[0m         obj \u001b[38;5;241m=\u001b[39m \u001b[43mobj\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_drop_axis\u001b[49m\u001b[43m(\u001b[49m\u001b[43mlabels\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlevel\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlevel\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   4507\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m inplace:\n\u001b[1;32m   4508\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_update_inplace(obj)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.10/site-packages/pandas/core/generic.py:4546\u001b[0m, in \u001b[0;36mNDFrame._drop_axis\u001b[0;34m(self, labels, axis, level, errors, only_slice)\u001b[0m\n\u001b[1;32m   4544\u001b[0m         new_axis \u001b[38;5;241m=\u001b[39m axis\u001b[38;5;241m.\u001b[39mdrop(labels, level\u001b[38;5;241m=\u001b[39mlevel, errors\u001b[38;5;241m=\u001b[39merrors)\n\u001b[1;32m   4545\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 4546\u001b[0m         new_axis \u001b[38;5;241m=\u001b[39m \u001b[43maxis\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdrop\u001b[49m\u001b[43m(\u001b[49m\u001b[43mlabels\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merrors\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43merrors\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   4547\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m axis\u001b[38;5;241m.\u001b[39mget_indexer(new_axis)\n\u001b[1;32m   4549\u001b[0m \u001b[38;5;66;03m# Case for non-unique axis\u001b[39;00m\n\u001b[1;32m   4550\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.10/site-packages/pandas/core/indexes/base.py:6934\u001b[0m, in \u001b[0;36mIndex.drop\u001b[0;34m(self, labels, errors)\u001b[0m\n\u001b[1;32m   6932\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m mask\u001b[38;5;241m.\u001b[39many():\n\u001b[1;32m   6933\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m errors \u001b[38;5;241m!=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mignore\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[0;32m-> 6934\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlist\u001b[39m(labels[mask])\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m not found in axis\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m   6935\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m indexer[\u001b[38;5;241m~\u001b[39mmask]\n\u001b[1;32m   6936\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdelete(indexer)\n",
      "\u001b[0;31mKeyError\u001b[0m: '[99368, 81455, 98996, 96027, 85550] not found in axis'"
     ]
    }
   ],
   "source": [
    "# Exclure les indices identifiés dans `contract_data`\n",
    "contract_data= contract_data.drop(index=indices_to_exclude)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "12bce7e9",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 99860 entries, 0 to 100398\n",
      "Data columns (total 12 columns):\n",
      " #   Column              Non-Null Count  Dtype  \n",
      "---  ------              --------------  -----  \n",
      " 0   Id_pol              99860 non-null  object \n",
      " 1   Duration            99860 non-null  int64  \n",
      " 2   Insured.age         99860 non-null  int64  \n",
      " 3   Insured.sex         99860 non-null  object \n",
      " 4   Car.age             99860 non-null  int64  \n",
      " 5   Marital             99860 non-null  object \n",
      " 6   Car.use             99860 non-null  object \n",
      " 7   Credit.score        99860 non-null  float64\n",
      " 8   Region              99860 non-null  object \n",
      " 9   Annual.miles.drive  99860 non-null  float64\n",
      " 10  Years.noclaims      99860 non-null  int64  \n",
      " 11  Territory           99860 non-null  int64  \n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 11.9+ MB\n"
     ]
    }
   ],
   "source": [
    "contract_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "5840c874",
   "metadata": {},
   "outputs": [],
   "source": [
    "#doublons sur la base de l'id du contrat\n",
    "duplicates_contract=contract_data[contract_data.duplicated(subset='Id_pol',keep=False)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "1543178c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id_pol</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Insured.age</th>\n",
       "      <th>Insured.sex</th>\n",
       "      <th>Car.age</th>\n",
       "      <th>Marital</th>\n",
       "      <th>Car.use</th>\n",
       "      <th>Credit.score</th>\n",
       "      <th>Region</th>\n",
       "      <th>Annual.miles.drive</th>\n",
       "      <th>Years.noclaims</th>\n",
       "      <th>Territory</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2699</th>\n",
       "      <td>143962</td>\n",
       "      <td>181</td>\n",
       "      <td>47</td>\n",
       "      <td>Female</td>\n",
       "      <td>-1</td>\n",
       "      <td>Single</td>\n",
       "      <td>Commute</td>\n",
       "      <td>814.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.420</td>\n",
       "      <td>30</td>\n",
       "      <td>83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3549</th>\n",
       "      <td>187006</td>\n",
       "      <td>366</td>\n",
       "      <td>42</td>\n",
       "      <td>Female</td>\n",
       "      <td>7</td>\n",
       "      <td>Single</td>\n",
       "      <td>Commute</td>\n",
       "      <td>754.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.420</td>\n",
       "      <td>26</td>\n",
       "      <td>87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4104</th>\n",
       "      <td>170468</td>\n",
       "      <td>366</td>\n",
       "      <td>59</td>\n",
       "      <td>Female</td>\n",
       "      <td>8</td>\n",
       "      <td>Single</td>\n",
       "      <td>Commute</td>\n",
       "      <td>713.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>11184.678</td>\n",
       "      <td>35</td>\n",
       "      <td>84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4510</th>\n",
       "      <td>191319</td>\n",
       "      <td>365</td>\n",
       "      <td>35</td>\n",
       "      <td>Male</td>\n",
       "      <td>8</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>818.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.420</td>\n",
       "      <td>11</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5818</th>\n",
       "      <td>140955</td>\n",
       "      <td>365</td>\n",
       "      <td>46</td>\n",
       "      <td>Male</td>\n",
       "      <td>3</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>862.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.420</td>\n",
       "      <td>25</td>\n",
       "      <td>73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97132</th>\n",
       "      <td>197768</td>\n",
       "      <td>130</td>\n",
       "      <td>62</td>\n",
       "      <td>Female</td>\n",
       "      <td>7</td>\n",
       "      <td>Single</td>\n",
       "      <td>Commute</td>\n",
       "      <td>875.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>6213.710</td>\n",
       "      <td>43</td>\n",
       "      <td>52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98385</th>\n",
       "      <td>144494</td>\n",
       "      <td>39</td>\n",
       "      <td>76</td>\n",
       "      <td>Female</td>\n",
       "      <td>1</td>\n",
       "      <td>Single</td>\n",
       "      <td>Private</td>\n",
       "      <td>900.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>9320.565</td>\n",
       "      <td>50</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98633</th>\n",
       "      <td>218371</td>\n",
       "      <td>183</td>\n",
       "      <td>78</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>Married</td>\n",
       "      <td>Private</td>\n",
       "      <td>848.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>6213.710</td>\n",
       "      <td>61</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99851</th>\n",
       "      <td>129569</td>\n",
       "      <td>182</td>\n",
       "      <td>68</td>\n",
       "      <td>Male</td>\n",
       "      <td>5</td>\n",
       "      <td>Married</td>\n",
       "      <td>Private</td>\n",
       "      <td>900.0</td>\n",
       "      <td>Rural</td>\n",
       "      <td>12427.420</td>\n",
       "      <td>52</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100186</th>\n",
       "      <td>195218</td>\n",
       "      <td>366</td>\n",
       "      <td>39</td>\n",
       "      <td>Male</td>\n",
       "      <td>7</td>\n",
       "      <td>Single</td>\n",
       "      <td>Commute</td>\n",
       "      <td>762.0</td>\n",
       "      <td>Rural</td>\n",
       "      <td>12427.420</td>\n",
       "      <td>23</td>\n",
       "      <td>57</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>84 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Id_pol  Duration  Insured.age Insured.sex  Car.age  Marital  Car.use  \\\n",
       "2699    143962       181           47      Female       -1   Single  Commute   \n",
       "3549    187006       366           42      Female        7   Single  Commute   \n",
       "4104    170468       366           59      Female        8   Single  Commute   \n",
       "4510    191319       365           35        Male        8  Married  Commute   \n",
       "5818    140955       365           46        Male        3  Married  Commute   \n",
       "...        ...       ...          ...         ...      ...      ...      ...   \n",
       "97132   197768       130           62      Female        7   Single  Commute   \n",
       "98385   144494        39           76      Female        1   Single  Private   \n",
       "98633   218371       183           78        Male        0  Married  Private   \n",
       "99851   129569       182           68        Male        5  Married  Private   \n",
       "100186  195218       366           39        Male        7   Single  Commute   \n",
       "\n",
       "        Credit.score Region  Annual.miles.drive  Years.noclaims  Territory  \n",
       "2699           814.0  Urban           12427.420              30         83  \n",
       "3549           754.0  Urban           12427.420              26         87  \n",
       "4104           713.0  Urban           11184.678              35         84  \n",
       "4510           818.0  Urban           12427.420              11         70  \n",
       "5818           862.0  Urban           12427.420              25         73  \n",
       "...              ...    ...                 ...             ...        ...  \n",
       "97132          875.0  Urban            6213.710              43         52  \n",
       "98385          900.0  Urban            9320.565              50         14  \n",
       "98633          848.0  Urban            6213.710              61         60  \n",
       "99851          900.0  Rural           12427.420              52         31  \n",
       "100186         762.0  Rural           12427.420              23         57  \n",
       "\n",
       "[84 rows x 12 columns]"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "duplicates_contract"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "c1653235",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "42"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Identifier les doublons en gardant uniquement la ligne avec la durée la plus longue\n",
    "indices_to_keep = duplicates_contract.groupby('Id_pol')['Duration'].idxmax()\n",
    "len(indices_to_keep)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "efb6d21e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Nombre de lignes initial: 99860\n",
      "Nombre de lignes après nettoyage: 99818\n"
     ]
    }
   ],
   "source": [
    "# Identifier les indices à garder dans les doublons\n",
    "indices_to_keep = duplicates_contract.groupby('Id_pol')['Duration'].idxmax()\n",
    "\n",
    "# Retirer les indices à exclure de `contract_data`\n",
    "contract_data_cleaned = contract_data.drop(index=duplicates_contract.index.difference(indices_to_keep))\n",
    "\n",
    "# Vérifier les résultats\n",
    "print(f\"Nombre de lignes initial: {contract_data.shape[0]}\")\n",
    "print(f\"Nombre de lignes après nettoyage: {contract_data_cleaned.shape[0]}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "58d841e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "contract_data = contract_data_cleaned"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "53ab439b",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 99818 entries, 0 to 100398\n",
      "Data columns (total 12 columns):\n",
      " #   Column              Non-Null Count  Dtype  \n",
      "---  ------              --------------  -----  \n",
      " 0   Id_pol              99818 non-null  object \n",
      " 1   Duration            99818 non-null  int64  \n",
      " 2   Insured.age         99818 non-null  int64  \n",
      " 3   Insured.sex         99818 non-null  object \n",
      " 4   Car.age             99818 non-null  int64  \n",
      " 5   Marital             99818 non-null  object \n",
      " 6   Car.use             99818 non-null  object \n",
      " 7   Credit.score        99818 non-null  float64\n",
      " 8   Region              99818 non-null  object \n",
      " 9   Annual.miles.drive  99818 non-null  float64\n",
      " 10  Years.noclaims      99818 non-null  int64  \n",
      " 11  Territory           99818 non-null  int64  \n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 9.9+ MB\n"
     ]
    }
   ],
   "source": [
    "contract_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "46b811f7",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Duration</th>\n",
       "      <th>Insured.age</th>\n",
       "      <th>Insured.sex</th>\n",
       "      <th>Car.age</th>\n",
       "      <th>Marital</th>\n",
       "      <th>Car.use</th>\n",
       "      <th>Credit.score</th>\n",
       "      <th>Region</th>\n",
       "      <th>Annual.miles.drive</th>\n",
       "      <th>Years.noclaims</th>\n",
       "      <th>Territory</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Id_pol</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>121744</th>\n",
       "      <td>365</td>\n",
       "      <td>59</td>\n",
       "      <td>Female</td>\n",
       "      <td>5</td>\n",
       "      <td>Single</td>\n",
       "      <td>Private</td>\n",
       "      <td>491.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.42</td>\n",
       "      <td>40</td>\n",
       "      <td>77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>123584</th>\n",
       "      <td>182</td>\n",
       "      <td>32</td>\n",
       "      <td>Female</td>\n",
       "      <td>10</td>\n",
       "      <td>Married</td>\n",
       "      <td>Private</td>\n",
       "      <td>730.0</td>\n",
       "      <td>Rural</td>\n",
       "      <td>6213.71</td>\n",
       "      <td>4</td>\n",
       "      <td>89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>133223</th>\n",
       "      <td>365</td>\n",
       "      <td>59</td>\n",
       "      <td>Female</td>\n",
       "      <td>9</td>\n",
       "      <td>Single</td>\n",
       "      <td>Commute</td>\n",
       "      <td>689.0</td>\n",
       "      <td>Rural</td>\n",
       "      <td>12427.42</td>\n",
       "      <td>41</td>\n",
       "      <td>85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124356</th>\n",
       "      <td>237</td>\n",
       "      <td>54</td>\n",
       "      <td>Male</td>\n",
       "      <td>8</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>794.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>6213.71</td>\n",
       "      <td>37</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192713</th>\n",
       "      <td>365</td>\n",
       "      <td>40</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>880.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.42</td>\n",
       "      <td>8</td>\n",
       "      <td>76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>130825</th>\n",
       "      <td>365</td>\n",
       "      <td>31</td>\n",
       "      <td>Female</td>\n",
       "      <td>5</td>\n",
       "      <td>Married</td>\n",
       "      <td>Private</td>\n",
       "      <td>743.0</td>\n",
       "      <td>Rural</td>\n",
       "      <td>12427.42</td>\n",
       "      <td>15</td>\n",
       "      <td>86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>137315</th>\n",
       "      <td>354</td>\n",
       "      <td>45</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>813.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.42</td>\n",
       "      <td>3</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>205973</th>\n",
       "      <td>365</td>\n",
       "      <td>64</td>\n",
       "      <td>Female</td>\n",
       "      <td>8</td>\n",
       "      <td>Single</td>\n",
       "      <td>Private</td>\n",
       "      <td>816.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>6213.71</td>\n",
       "      <td>44</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>177552</th>\n",
       "      <td>330</td>\n",
       "      <td>49</td>\n",
       "      <td>Male</td>\n",
       "      <td>6</td>\n",
       "      <td>Single</td>\n",
       "      <td>Private</td>\n",
       "      <td>883.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.42</td>\n",
       "      <td>32</td>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>178187</th>\n",
       "      <td>365</td>\n",
       "      <td>63</td>\n",
       "      <td>Male</td>\n",
       "      <td>-1</td>\n",
       "      <td>Married</td>\n",
       "      <td>Private</td>\n",
       "      <td>815.0</td>\n",
       "      <td>Urban</td>\n",
       "      <td>6213.71</td>\n",
       "      <td>42</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>99818 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Duration  Insured.age Insured.sex  Car.age  Marital  Car.use  \\\n",
       "Id_pol                                                                 \n",
       "121744       365           59      Female        5   Single  Private   \n",
       "123584       182           32      Female       10  Married  Private   \n",
       "133223       365           59      Female        9   Single  Commute   \n",
       "124356       237           54        Male        8  Married  Commute   \n",
       "192713       365           40      Female        0  Married  Commute   \n",
       "...          ...          ...         ...      ...      ...      ...   \n",
       "130825       365           31      Female        5  Married  Private   \n",
       "137315       354           45        Male        0  Married  Commute   \n",
       "205973       365           64      Female        8   Single  Private   \n",
       "177552       330           49        Male        6   Single  Private   \n",
       "178187       365           63        Male       -1  Married  Private   \n",
       "\n",
       "        Credit.score Region  Annual.miles.drive  Years.noclaims  Territory  \n",
       "Id_pol                                                                      \n",
       "121744         491.0  Urban            12427.42              40         77  \n",
       "123584         730.0  Rural             6213.71               4         89  \n",
       "133223         689.0  Rural            12427.42              41         85  \n",
       "124356         794.0  Urban             6213.71              37         70  \n",
       "192713         880.0  Urban            12427.42               8         76  \n",
       "...              ...    ...                 ...             ...        ...  \n",
       "130825         743.0  Rural            12427.42              15         86  \n",
       "137315         813.0  Urban            12427.42               3         39  \n",
       "205973         816.0  Urban             6213.71              44         26  \n",
       "177552         883.0  Urban            12427.42              32         88  \n",
       "178187         815.0  Urban             6213.71              42         70  \n",
       "\n",
       "[99818 rows x 11 columns]"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Id_pol sera notre index\n",
    "contract_data.set_index('Id_pol')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "1c9844ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Duration</th>\n",
       "      <th>Insured.age</th>\n",
       "      <th>Car.age</th>\n",
       "      <th>Credit.score</th>\n",
       "      <th>Annual.miles.drive</th>\n",
       "      <th>Years.noclaims</th>\n",
       "      <th>Territory</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>99818.000000</td>\n",
       "      <td>99818.000000</td>\n",
       "      <td>99818.000000</td>\n",
       "      <td>99818.000000</td>\n",
       "      <td>99818.000000</td>\n",
       "      <td>99818.000000</td>\n",
       "      <td>99818.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>314.159280</td>\n",
       "      <td>51.372658</td>\n",
       "      <td>5.638622</td>\n",
       "      <td>800.896882</td>\n",
       "      <td>9123.642721</td>\n",
       "      <td>28.863972</td>\n",
       "      <td>56.520658</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>79.775595</td>\n",
       "      <td>15.471355</td>\n",
       "      <td>4.062165</td>\n",
       "      <td>83.369963</td>\n",
       "      <td>3826.159380</td>\n",
       "      <td>16.151904</td>\n",
       "      <td>24.033165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>-2.000000</td>\n",
       "      <td>422.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>11.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>200.000000</td>\n",
       "      <td>39.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>766.000000</td>\n",
       "      <td>6213.710000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>35.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>365.000000</td>\n",
       "      <td>51.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>825.000000</td>\n",
       "      <td>7456.452000</td>\n",
       "      <td>29.000000</td>\n",
       "      <td>62.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>366.000000</td>\n",
       "      <td>63.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>856.000000</td>\n",
       "      <td>12427.420000</td>\n",
       "      <td>41.000000</td>\n",
       "      <td>78.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>366.000000</td>\n",
       "      <td>103.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>900.000000</td>\n",
       "      <td>56731.172300</td>\n",
       "      <td>85.000000</td>\n",
       "      <td>91.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Duration   Insured.age       Car.age  Credit.score  \\\n",
       "count  99818.000000  99818.000000  99818.000000  99818.000000   \n",
       "mean     314.159280     51.372658      5.638622    800.896882   \n",
       "std       79.775595     15.471355      4.062165     83.369963   \n",
       "min        0.000000     16.000000     -2.000000    422.000000   \n",
       "25%      200.000000     39.000000      2.000000    766.000000   \n",
       "50%      365.000000     51.000000      5.000000    825.000000   \n",
       "75%      366.000000     63.000000      8.000000    856.000000   \n",
       "max      366.000000    103.000000     20.000000    900.000000   \n",
       "\n",
       "       Annual.miles.drive  Years.noclaims     Territory  \n",
       "count        99818.000000    99818.000000  99818.000000  \n",
       "mean          9123.642721       28.863972     56.520658  \n",
       "std           3826.159380       16.151904     24.033165  \n",
       "min              0.000000        0.000000     11.000000  \n",
       "25%           6213.710000       15.000000     35.000000  \n",
       "50%           7456.452000       29.000000     62.000000  \n",
       "75%          12427.420000       41.000000     78.000000  \n",
       "max          56731.172300       85.000000     91.000000  "
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "contract_data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "80b1d4f8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id_pol</th>\n",
       "      <th>Insured.sex</th>\n",
       "      <th>Marital</th>\n",
       "      <th>Car.use</th>\n",
       "      <th>Region</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>99818</td>\n",
       "      <td>99818</td>\n",
       "      <td>99818</td>\n",
       "      <td>99818</td>\n",
       "      <td>99818</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>99818</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>121744</td>\n",
       "      <td>Male</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>Urban</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "      <td>53852</td>\n",
       "      <td>69825</td>\n",
       "      <td>49740</td>\n",
       "      <td>78049</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Id_pol Insured.sex  Marital  Car.use Region\n",
       "count    99818       99818    99818    99818  99818\n",
       "unique   99818           2        2        4      2\n",
       "top     121744        Male  Married  Commute  Urban\n",
       "freq         1       53852    69825    49740  78049"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "contract_data.describe(include='object')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5bbe9e4d",
   "metadata": {},
   "source": [
    "#### Bining\n",
    "Pourquoi binning?\n",
    "Le regroupement est un processus qui consiste à transformer des variables numériques continues en \"catégories\" discrètes, en vue d'une analyse groupée.\n",
    "\n",
    "Nous allons utiliser la méthode Pandas \"cut\" pour segmenter la colonne \"Credit.score\" en 3 bacs: faibles, moyens élevés"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "9ed63cde",
   "metadata": {},
   "outputs": [],
   "source": [
    "contract_data[\"Credit.score\"]=contract_data[\"Credit.score\"].astype(int, copy=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "d46d94e3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Credit.score bins')"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.pyplot.hist(contract_data[\"Credit.score\"])\n",
    "\n",
    "# set x/y labels and plot title\n",
    "plt.pyplot.xlabel(\"Credit.score\")\n",
    "plt.pyplot.ylabel(\"count\")\n",
    "plt.pyplot.title(\"Credit.score bins\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "49d00400",
   "metadata": {},
   "source": [
    "Nous aimerions avoir 3 bacs d'une largeur de bande de taille égale, nous utilisons donc la fonction numpy linspace(start_value, end_value, numbers_generated\n",
    "\n",
    "Comme nous voulons inclure la valeur minimale de la puissance, nous devons définir start_value=min(df[\"Credit.score\"]).\n",
    "\n",
    "Comme nous voulons inclure la valeur maximale de la puissance, nous devons définir end_value=max(df[\"Credit.score\"]).\n",
    "\n",
    "Puisque nous construisons 3 bacs de même longueur, il devrait y avoir 4 diviseurs, donc numbers_generated=4.\n",
    "\n",
    "Nous construisons un tableau de cases, d'une valeur minimale à une valeur maximale, avec la largeur de bande calculée ci-dessus. Les cellules seront les valeurs utilisées pour déterminer quand une cellule se termine et quand une autre commence."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "dd7d5e8a",
   "metadata": {},
   "outputs": [],
   "source": [
    "bins = np.linspace(min(contract_data[\"Credit.score\"]), max(contract_data[\"Credit.score\"]), 4)\n",
    "bins \n",
    "group_names = ['Low', 'Medium', 'High']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e43423c3",
   "metadata": {},
   "source": [
    "La plupart des créanciers accordent une importance particulière aux scores de crédit de 780 ou plus et proposent les meilleurs taux possibles à ces emprunteurs. Les emprunteurs dont le score se situe entre 720 et 780 obtiennent également des taux d'intérêt plus bas et sont considérés comme d'excellents candidats par les prêteurs. Les scores compris entre 660 et 719 sont également respectables et permettent d'obtenir la plupart des prêts; cependant, ces personnes se voient appliquer des taux plus élevés.\n",
    "\n",
    "Un score inférieur à 660 limitera vos options à quelques programmes spécifiques et vous obligera à payer des taux d'intérêt plus élevés. Les personnes ayant un score de crédit de 580 ou moins risquent de ne pas voir leur prêt approuvé. Si leur demande est acceptée, elles devront probablement faire face à des taux d'intérêt très élevés. https://assurancemortgage.com/credit-score-determined/#:~:text=Credit%20scores%20fall%20within%20a,cost%20of%20private%20mortgage%20insurance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "dc15246a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Credit.score</th>\n",
       "      <th>Credit_score_cat</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>491</td>\n",
       "      <td>Low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>730</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>689</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>794</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>880</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>839</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>900</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>821</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>820</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>850</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>687</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>601</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>701</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>673</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>841</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>900</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>728</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>850</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>725</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>846</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Credit.score Credit_score_cat\n",
       "0            491              Low\n",
       "1            730           Medium\n",
       "2            689           Medium\n",
       "3            794             High\n",
       "4            880             High\n",
       "5            839             High\n",
       "6            900             High\n",
       "7            821             High\n",
       "8            820             High\n",
       "9            850             High\n",
       "10           687           Medium\n",
       "11           601           Medium\n",
       "12           701           Medium\n",
       "13           673           Medium\n",
       "14           841             High\n",
       "15           900             High\n",
       "16           728           Medium\n",
       "17           850             High\n",
       "18           725           Medium\n",
       "19           846             High"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "contract_data['Credit_score_cat'] = pd.cut(contract_data['Credit.score'], bins, labels=group_names, include_lowest=True )\n",
    "contract_data[['Credit.score','Credit_score_cat']].head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "1b9f7fca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "High      80422\n",
       "Medium    16700\n",
       "Low        2696\n",
       "Name: Credit_score_cat, dtype: int64"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "contract_data['Credit_score_cat'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "fe0a42b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "group_names = ['High', 'Medium', 'Low']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "09f82130",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Credit_score_categories')"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "pyplot.bar(group_names, contract_data[\"Credit_score_cat\"].value_counts())\n",
    "\n",
    "# set x/y labels and plot title\n",
    "plt.pyplot.xlabel(\"Credit_score_cat\")\n",
    "plt.pyplot.ylabel(\"count\")\n",
    "plt.pyplot.title(\"Credit_score_categories\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "e8f30200",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id_pol</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Insured.age</th>\n",
       "      <th>Insured.sex</th>\n",
       "      <th>Car.age</th>\n",
       "      <th>Marital</th>\n",
       "      <th>Car.use</th>\n",
       "      <th>Credit.score</th>\n",
       "      <th>Region</th>\n",
       "      <th>Annual.miles.drive</th>\n",
       "      <th>Years.noclaims</th>\n",
       "      <th>Territory</th>\n",
       "      <th>Credit_score_cat</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>121744</td>\n",
       "      <td>365</td>\n",
       "      <td>59</td>\n",
       "      <td>Female</td>\n",
       "      <td>5</td>\n",
       "      <td>Single</td>\n",
       "      <td>Private</td>\n",
       "      <td>491</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.420</td>\n",
       "      <td>40</td>\n",
       "      <td>77</td>\n",
       "      <td>Low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>125274</td>\n",
       "      <td>361</td>\n",
       "      <td>29</td>\n",
       "      <td>Female</td>\n",
       "      <td>10</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>577</td>\n",
       "      <td>Urban</td>\n",
       "      <td>9320.565</td>\n",
       "      <td>13</td>\n",
       "      <td>52</td>\n",
       "      <td>Low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>158230</td>\n",
       "      <td>365</td>\n",
       "      <td>29</td>\n",
       "      <td>Male</td>\n",
       "      <td>10</td>\n",
       "      <td>Married</td>\n",
       "      <td>Private</td>\n",
       "      <td>499</td>\n",
       "      <td>Urban</td>\n",
       "      <td>6213.710</td>\n",
       "      <td>13</td>\n",
       "      <td>61</td>\n",
       "      <td>Low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>165967</td>\n",
       "      <td>365</td>\n",
       "      <td>53</td>\n",
       "      <td>Male</td>\n",
       "      <td>8</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>573</td>\n",
       "      <td>Rural</td>\n",
       "      <td>12427.420</td>\n",
       "      <td>36</td>\n",
       "      <td>38</td>\n",
       "      <td>Low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>154</th>\n",
       "      <td>129597</td>\n",
       "      <td>366</td>\n",
       "      <td>29</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>505</td>\n",
       "      <td>Urban</td>\n",
       "      <td>6213.710</td>\n",
       "      <td>12</td>\n",
       "      <td>18</td>\n",
       "      <td>Low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100277</th>\n",
       "      <td>142307</td>\n",
       "      <td>366</td>\n",
       "      <td>44</td>\n",
       "      <td>Male</td>\n",
       "      <td>5</td>\n",
       "      <td>Single</td>\n",
       "      <td>Private</td>\n",
       "      <td>557</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.420</td>\n",
       "      <td>15</td>\n",
       "      <td>38</td>\n",
       "      <td>Low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100311</th>\n",
       "      <td>164716</td>\n",
       "      <td>365</td>\n",
       "      <td>31</td>\n",
       "      <td>Male</td>\n",
       "      <td>14</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>490</td>\n",
       "      <td>Urban</td>\n",
       "      <td>6213.710</td>\n",
       "      <td>5</td>\n",
       "      <td>13</td>\n",
       "      <td>Low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100332</th>\n",
       "      <td>173097</td>\n",
       "      <td>365</td>\n",
       "      <td>51</td>\n",
       "      <td>Male</td>\n",
       "      <td>8</td>\n",
       "      <td>Married</td>\n",
       "      <td>Private</td>\n",
       "      <td>480</td>\n",
       "      <td>Urban</td>\n",
       "      <td>6213.710</td>\n",
       "      <td>11</td>\n",
       "      <td>18</td>\n",
       "      <td>Low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100342</th>\n",
       "      <td>187382</td>\n",
       "      <td>182</td>\n",
       "      <td>54</td>\n",
       "      <td>Male</td>\n",
       "      <td>9</td>\n",
       "      <td>Single</td>\n",
       "      <td>Private</td>\n",
       "      <td>543</td>\n",
       "      <td>Rural</td>\n",
       "      <td>6213.710</td>\n",
       "      <td>38</td>\n",
       "      <td>89</td>\n",
       "      <td>Low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100385</th>\n",
       "      <td>207721</td>\n",
       "      <td>366</td>\n",
       "      <td>23</td>\n",
       "      <td>Female</td>\n",
       "      <td>1</td>\n",
       "      <td>Single</td>\n",
       "      <td>Commute</td>\n",
       "      <td>553</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.420</td>\n",
       "      <td>5</td>\n",
       "      <td>18</td>\n",
       "      <td>Low</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2696 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Id_pol  Duration  Insured.age Insured.sex  Car.age  Marital  Car.use  \\\n",
       "0       121744       365           59      Female        5   Single  Private   \n",
       "36      125274       361           29      Female       10  Married  Commute   \n",
       "41      158230       365           29        Male       10  Married  Private   \n",
       "49      165967       365           53        Male        8  Married  Commute   \n",
       "154     129597       366           29        Male        0  Married  Commute   \n",
       "...        ...       ...          ...         ...      ...      ...      ...   \n",
       "100277  142307       366           44        Male        5   Single  Private   \n",
       "100311  164716       365           31        Male       14  Married  Commute   \n",
       "100332  173097       365           51        Male        8  Married  Private   \n",
       "100342  187382       182           54        Male        9   Single  Private   \n",
       "100385  207721       366           23      Female        1   Single  Commute   \n",
       "\n",
       "        Credit.score Region  Annual.miles.drive  Years.noclaims  Territory  \\\n",
       "0                491  Urban           12427.420              40         77   \n",
       "36               577  Urban            9320.565              13         52   \n",
       "41               499  Urban            6213.710              13         61   \n",
       "49               573  Rural           12427.420              36         38   \n",
       "154              505  Urban            6213.710              12         18   \n",
       "...              ...    ...                 ...             ...        ...   \n",
       "100277           557  Urban           12427.420              15         38   \n",
       "100311           490  Urban            6213.710               5         13   \n",
       "100332           480  Urban            6213.710              11         18   \n",
       "100342           543  Rural            6213.710              38         89   \n",
       "100385           553  Urban           12427.420               5         18   \n",
       "\n",
       "       Credit_score_cat  \n",
       "0                   Low  \n",
       "36                  Low  \n",
       "41                  Low  \n",
       "49                  Low  \n",
       "154                 Low  \n",
       "...                 ...  \n",
       "100277              Low  \n",
       "100311              Low  \n",
       "100332              Low  \n",
       "100342              Low  \n",
       "100385              Low  \n",
       "\n",
       "[2696 rows x 13 columns]"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "contract_data[contract_data['Credit_score_cat']=='Low']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "4ba75165",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'histogramme montrant la distribution des données de Years.noclaims')"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#histogramme montrant la distribution des données de AMT_Claim\n",
    "\n",
    "plt.pyplot.hist(contract_data[\"Years.noclaims\"])\n",
    "\n",
    "# set x/y labels and plot title\n",
    "plt.pyplot.xlabel(\"Years.noclaims\")\n",
    "plt.pyplot.ylabel(\"count\")\n",
    "plt.pyplot.title(\"histogramme montrant la distribution des données de Years.noclaims\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "51463882",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'nombre d années sans réclamations')"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#boîte à moustache du montant des sinistres\n",
    "sns.boxplot(x=contract_data[\"Years.noclaims\"])\n",
    "plt.pyplot.title('Boxplot du nombre d années sans réclamations')\n",
    "plt.pyplot.xlabel('nombre d années sans réclamations')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "8990b09e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pourcentage de valeurs aberrantes : 0.00%\n"
     ]
    }
   ],
   "source": [
    "Q1 = contract_data[\"Years.noclaims\"].quantile(0.25)\n",
    "Q3 = contract_data[\"Years.noclaims\"].quantile(0.75)\n",
    "IQR = Q3 - Q1\n",
    "\n",
    "# Calcul du seuil au-delà duquel une valeur est considérée comme une valeur aberrante\n",
    "outlier_threshold = Q3 + 1.5 * IQR\n",
    "\n",
    "# Identification les valeurs aberrantes\n",
    "outliers = contract_data[contract_data[\"Years.noclaims\"] > outlier_threshold]\n",
    "\n",
    "# Calcul du pourcentage des valeurs aberrantes par rapport au total des observations\n",
    "percentage_outliers = (len(outliers) / len(contract_data)) * 100\n",
    "\n",
    "print(f\"Pourcentage de valeurs aberrantes : {percentage_outliers:.2f}%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "a94ffcf2",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Retirer les outliers s'il y'en a \n",
    "contract_data = contract_data[contract_data[\"Years.noclaims\"] <= outlier_threshold]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "a2e1842d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'histogramme montrant la distribution des données de Annual.miles.drive')"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#histogramme montrant la distribution des données de AMT_Claim\n",
    "\n",
    "plt.pyplot.hist(contract_data[\"Annual.miles.drive\"])\n",
    "\n",
    "# set x/y labels and plot title\n",
    "plt.pyplot.xlabel(\"Annual.miles.drive\")\n",
    "plt.pyplot.ylabel(\"count\")\n",
    "plt.pyplot.title(\"histogramme montrant la distribution des données de Annual.miles.drive\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "15af412d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'nombre de miles parcourus par année')"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#boîte à moustache du montant des sinistres\n",
    "sns.boxplot(x=contract_data[\"Annual.miles.drive\"])\n",
    "plt.pyplot.title('Boxplot du nombre de miles parcourus par années')\n",
    "plt.pyplot.xlabel('nombre de miles parcourus par année')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "8f780f56",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pourcentage de valeurs aberrantes : 0.64%\n"
     ]
    }
   ],
   "source": [
    "Q1 = contract_data[\"Annual.miles.drive\"].quantile(0.25)\n",
    "Q3 = contract_data[\"Annual.miles.drive\"].quantile(0.75)\n",
    "IQR = Q3 - Q1\n",
    "\n",
    "# Calcul du seuil au-delà duquel une valeur est considérée comme une valeur aberrante\n",
    "outlier_threshold = Q3 + 1.5 * IQR\n",
    "\n",
    "# Identification les valeurs aberrantes\n",
    "outliers = contract_data[contract_data[\"Annual.miles.drive\"] > outlier_threshold]\n",
    "\n",
    "# Calcul du pourcentage des valeurs aberrantes par rapport au total des observations\n",
    "percentage_outliers = (len(outliers) / len(contract_data)) * 100\n",
    "\n",
    "print(f\"Pourcentage de valeurs aberrantes : {percentage_outliers:.2f}%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "84a6c6ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "#Retirer les outliers s'il y'en a \n",
    "contract_data = contract_data[contract_data[\"Annual.miles.drive\"] <= outlier_threshold]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "a5918166",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 99174 entries, 0 to 100398\n",
      "Data columns (total 13 columns):\n",
      " #   Column              Non-Null Count  Dtype   \n",
      "---  ------              --------------  -----   \n",
      " 0   Id_pol              99174 non-null  object  \n",
      " 1   Duration            99174 non-null  int64   \n",
      " 2   Insured.age         99174 non-null  int64   \n",
      " 3   Insured.sex         99174 non-null  object  \n",
      " 4   Car.age             99174 non-null  int64   \n",
      " 5   Marital             99174 non-null  object  \n",
      " 6   Car.use             99174 non-null  object  \n",
      " 7   Credit.score        99174 non-null  int64   \n",
      " 8   Region              99174 non-null  object  \n",
      " 9   Annual.miles.drive  99174 non-null  float64 \n",
      " 10  Years.noclaims      99174 non-null  int64   \n",
      " 11  Territory           99174 non-null  int64   \n",
      " 12  Credit_score_cat    99174 non-null  category\n",
      "dtypes: category(1), float64(1), int64(6), object(5)\n",
      "memory usage: 9.9+ MB\n"
     ]
    }
   ],
   "source": [
    "contract_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "e19585d7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Duration</th>\n",
       "      <th>Insured.age</th>\n",
       "      <th>Car.age</th>\n",
       "      <th>Credit.score</th>\n",
       "      <th>Annual.miles.drive</th>\n",
       "      <th>Years.noclaims</th>\n",
       "      <th>Territory</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>99174.000000</td>\n",
       "      <td>99174.000000</td>\n",
       "      <td>99174.000000</td>\n",
       "      <td>99174.000000</td>\n",
       "      <td>99174.000000</td>\n",
       "      <td>99174.000000</td>\n",
       "      <td>99174.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>314.025571</td>\n",
       "      <td>51.409755</td>\n",
       "      <td>5.648134</td>\n",
       "      <td>801.082794</td>\n",
       "      <td>9007.422186</td>\n",
       "      <td>28.882257</td>\n",
       "      <td>56.489433</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>79.855783</td>\n",
       "      <td>15.485710</td>\n",
       "      <td>4.063589</td>\n",
       "      <td>83.320600</td>\n",
       "      <td>3538.078035</td>\n",
       "      <td>16.170802</td>\n",
       "      <td>24.028217</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>-2.000000</td>\n",
       "      <td>422.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>11.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>199.000000</td>\n",
       "      <td>39.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>766.000000</td>\n",
       "      <td>6213.710000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>35.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>365.000000</td>\n",
       "      <td>51.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>825.000000</td>\n",
       "      <td>7456.452000</td>\n",
       "      <td>29.000000</td>\n",
       "      <td>62.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>366.000000</td>\n",
       "      <td>64.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>856.000000</td>\n",
       "      <td>12427.420000</td>\n",
       "      <td>41.000000</td>\n",
       "      <td>78.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>366.000000</td>\n",
       "      <td>103.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>900.000000</td>\n",
       "      <td>21747.985000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>91.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Duration   Insured.age       Car.age  Credit.score  \\\n",
       "count  99174.000000  99174.000000  99174.000000  99174.000000   \n",
       "mean     314.025571     51.409755      5.648134    801.082794   \n",
       "std       79.855783     15.485710      4.063589     83.320600   \n",
       "min        0.000000     16.000000     -2.000000    422.000000   \n",
       "25%      199.000000     39.000000      2.000000    766.000000   \n",
       "50%      365.000000     51.000000      5.000000    825.000000   \n",
       "75%      366.000000     64.000000      8.000000    856.000000   \n",
       "max      366.000000    103.000000     20.000000    900.000000   \n",
       "\n",
       "       Annual.miles.drive  Years.noclaims     Territory  \n",
       "count        99174.000000    99174.000000  99174.000000  \n",
       "mean          9007.422186       28.882257     56.489433  \n",
       "std           3538.078035       16.170802     24.028217  \n",
       "min              0.000000        0.000000     11.000000  \n",
       "25%           6213.710000       15.000000     35.000000  \n",
       "50%           7456.452000       29.000000     62.000000  \n",
       "75%          12427.420000       41.000000     78.000000  \n",
       "max          21747.985000       80.000000     91.000000  "
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "contract_data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "c6298fb4",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "contract_data['Credit_score_cat'] = contract_data['Credit_score_cat'].astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "68ff2e79",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id_pol</th>\n",
       "      <th>Insured.sex</th>\n",
       "      <th>Marital</th>\n",
       "      <th>Car.use</th>\n",
       "      <th>Region</th>\n",
       "      <th>Credit_score_cat</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>99174</td>\n",
       "      <td>99174</td>\n",
       "      <td>99174</td>\n",
       "      <td>99174</td>\n",
       "      <td>99174</td>\n",
       "      <td>99174</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>99174</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>121744</td>\n",
       "      <td>Male</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>Urban</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "      <td>53421</td>\n",
       "      <td>69384</td>\n",
       "      <td>49329</td>\n",
       "      <td>77607</td>\n",
       "      <td>79960</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Id_pol Insured.sex  Marital  Car.use Region Credit_score_cat\n",
       "count    99174       99174    99174    99174  99174            99174\n",
       "unique   99174           2        2        4      2                3\n",
       "top     121744        Male  Married  Commute  Urban             High\n",
       "freq         1       53421    69384    49329  77607            79960"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "contract_data.describe(include='object')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e77ec43d",
   "metadata": {},
   "source": [
    "### Analyse des Statistiques Descriptives\n",
    "\n",
    "#### Variables Numériques\n",
    "- **Duration (Durée)**:\n",
    "  - **Moyenne**: 314 jours, ce qui indique que la plupart des contrats sont presque complets.\n",
    "  - **Écart-Type**: 79,86 jours, suggérant une certaine variation dans les durées.\n",
    "  - **Minimale/Moyenne/Médiane/Maximale**: La durée varie de 0 à 366 jours, indiquant que certains contrats sont très courts.\n",
    "\n",
    "- **Insured.age (Âge de l'assuré)**:\n",
    "  - **Moyenne**: 51,41 ans, ce qui représente un groupe d'âge relativement mature.\n",
    "  - **Écart-Type**: 15,49, indiquant une dispersion notable entre les âges.\n",
    "  - **Extrêmes**: L'âge varie entre 16 et 103 ans.\n",
    "\n",
    "- **Car.age (Âge du véhicule)**:\n",
    "  - **Moyenne**: 5,65 ans, ce qui suggère des véhicules relativement récents.\n",
    "  - **Écart-Type**: 4,06, indiquant des véhicules de différentes générations.\n",
    "  - **Extrêmes**: Les âges varient de -2  à 20 ans.\n",
    "  \n",
    "  L'âge négatif indique que l'utilisateur a acheté un véhicule qu'il n'a pas encore utilisé. Nous retirerons donc ces valeurs si non significatives dans l'echantillon global.\n",
    "\n",
    "- **Credit.score (Score de crédit)**:\n",
    "  - **Moyenne**: 801,08, ce qui indique un score de crédit généralement bon.\n",
    "  - **Écart-Type**: 83,32, signifiant des variations entre les individus.\n",
    "  - **Extrêmes**: Les scores varient entre 422 et 900.\n",
    "\n",
    "- **Annual.miles.drive (Distance annuelle parcourue)**:\n",
    "  - **Moyenne**: 9007,42 miles par an.\n",
    "  - **Écart-Type**: 3538,08, indiquant des variations importantes dans la conduite.\n",
    "  - **Extrêmes**: Variations de 0 à 21 748 miles.\n",
    "\n",
    "- **Years.noclaims (Années sans sinistre)**:\n",
    "  - **Moyenne**: 28,88 années sans sinistre.\n",
    "  - **Écart-Type**: 16,17, ce qui suggère une grande diversité d'expérience.\n",
    "  - **Extrêmes**: Variations de 0 à 80 ans.\n",
    "\n",
    "- **Territory**:\n",
    "  - **Moyenne**: 56,49, couvrant plusieurs territoires.\n",
    "\n",
    "#### Variables Catégoriques\n",
    "- **Id_pol (ID du contrat)**:\n",
    "  - Chaque contrat est unique.\n",
    "\n",
    "- **Insured.sex (Sexe de l'assuré)**:\n",
    "  - **Top**: `Male` (Homme), le sexe le plus représenté, représentant 53 421 individus sur 99 174.\n",
    "\n",
    "- **Marital (Statut marital)**:\n",
    "  - **Top**: `Married` (Marié), avec 69 384 individus.\n",
    "\n",
    "- **Car.use (Utilisation du véhicule)**:\n",
    "  - **Top**: `Commute`, le motif le plus courant.\n",
    "\n",
    "- **Region (Région)**:\n",
    "  - **Top**: `Urban`, la majorité des assurés vivent en zone urbaine.\n",
    "\n",
    "- **Credit_score_cat (Catégorie du score de crédit)**:\n",
    "  - **Top**: `High`, 79 960 assurés ayant un score élevé.\n",
    "\n",
    "### Interprétation Générale\n",
    "- **Risques de Sinistre**: Les années sans sinistre et les scores de crédit suggèrent une population globalement prudente, mais le comportement varie.\n",
    "- **Véhicules et Âge**: Les véhicules sont relativement récents, et les conducteurs couvrent un large éventail d'âges.\n",
    "- **Statut Marital et Région**: La majorité des conducteurs sont mariés et vivent en zone urbaine, ce qui pourrait influencer les comportements et le risque."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "75ecac9e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Nombre de valeurs négatives dans `Car.age`: 1919\n",
      "Pourcentage de valeurs négatives dans le DataFrame: 1.93%\n"
     ]
    }
   ],
   "source": [
    "# Identifier les valeurs négatives dans la colonne `Car.age`\n",
    "negative_values = contract_data[contract_data['Car.age'] < 0]\n",
    "\n",
    "# Calculer le pourcentage des valeurs négatives dans l'ensemble du DataFrame\n",
    "total_rows = len(contract_data)\n",
    "negative_count = len(negative_values)\n",
    "negative_percentage = (negative_count / total_rows) * 100\n",
    "\n",
    "# Afficher le résultat\n",
    "print(f\"Nombre de valeurs négatives dans `Car.age`: {negative_count}\")\n",
    "print(f\"Pourcentage de valeurs négatives dans le DataFrame: {negative_percentage:.2f}%\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "0a99dfbe",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Filtrer les lignes qui ont des valeurs négatives dans `Car.age`\n",
    "contract_data = contract_data[contract_data['Car.age'] >= 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "73682152",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Id_pol                0\n",
       "Duration              0\n",
       "Insured.age           0\n",
       "Insured.sex           0\n",
       "Car.age               0\n",
       "Marital               0\n",
       "Car.use               0\n",
       "Credit.score          0\n",
       "Region                0\n",
       "Annual.miles.drive    0\n",
       "Years.noclaims        0\n",
       "Territory             0\n",
       "Credit_score_cat      0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "contract_data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "812aeeaf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'âge des véhicules assurés')"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#boîte à moustache du montant des sinistres\n",
    "sns.boxplot(x=contract_data[\"Car.age\"])\n",
    "plt.pyplot.title('Boxplot de l âge des véhicules assurés')\n",
    "plt.pyplot.xlabel('âge des véhicules assurés')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "f2a7b950",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pourcentage de valeurs aberrantes : 0.00%\n"
     ]
    }
   ],
   "source": [
    "Q1 = contract_data[\"Car.age\"].quantile(0.25)\n",
    "Q3 = contract_data[\"Car.age\"].quantile(0.75)\n",
    "IQR = Q3 - Q1\n",
    "\n",
    "# Calcul du seuil au-delà duquel une valeur est considérée comme une valeur aberrante\n",
    "outlier_threshold = Q3 + 1.5 * IQR\n",
    "\n",
    "# Identification les valeurs aberrantes\n",
    "outliers = contract_data[contract_data[\"Car.age\"] > outlier_threshold]\n",
    "\n",
    "# Calcul du pourcentage des valeurs aberrantes par rapport au total des observations\n",
    "percentage_outliers = (len(outliers) / len(contract_data)) * 100\n",
    "\n",
    "print(f\"Pourcentage de valeurs aberrantes : {percentage_outliers:.2f}%\")\n",
    "#Retirer les outliers s'il y'en a \n",
    "contract_data = contract_data[contract_data[\"Car.age\"] <= outlier_threshold]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "9d61e465",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 97254 entries, 0 to 100397\n",
      "Data columns (total 13 columns):\n",
      " #   Column              Non-Null Count  Dtype  \n",
      "---  ------              --------------  -----  \n",
      " 0   Id_pol              97254 non-null  object \n",
      " 1   Duration            97254 non-null  int64  \n",
      " 2   Insured.age         97254 non-null  int64  \n",
      " 3   Insured.sex         97254 non-null  object \n",
      " 4   Car.age             97254 non-null  int64  \n",
      " 5   Marital             97254 non-null  object \n",
      " 6   Car.use             97254 non-null  object \n",
      " 7   Credit.score        97254 non-null  int64  \n",
      " 8   Region              97254 non-null  object \n",
      " 9   Annual.miles.drive  97254 non-null  float64\n",
      " 10  Years.noclaims      97254 non-null  int64  \n",
      " 11  Territory           97254 non-null  int64  \n",
      " 12  Credit_score_cat    97254 non-null  object \n",
      "dtypes: float64(1), int64(6), object(6)\n",
      "memory usage: 10.4+ MB\n"
     ]
    }
   ],
   "source": [
    "contract_data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c190ede3",
   "metadata": {},
   "source": [
    "### Prétraitement et EDA de `telematics_data`\n",
    "\n",
    "Cette base de données contient des informations télématiques sur le comportement des conducteurs, fournissant des insights sur les risques potentiels liés à la conduite. Voici une explication des variables :\n",
    "\n",
    "1. **Id_pol** : Identifiant unique de la police d'assurance, pour faire le lien avec les autres bases.\n",
    "\n",
    "2. **Annual.pct.driven** : Pourcentage annuel du temps pendant lequel le véhicule est conduit.\n",
    "\n",
    "3. **Total.miles.driven** : Distance totale parcourue par le véhicule pendant la période de couverture.\n",
    "\n",
    "4. **Pct.drive.mon/tue/wed/thr/fri/sat/sun** : Pourcentage de conduite effectué chaque jour de la semaine.\n",
    "\n",
    "5. **Pct.drive.2hrs/3hrs/4hrs** : Pourcentage de conduite effectué pendant des intervalles horaires spécifiques.\n",
    "\n",
    "6. **Pct.drive.wkday/wkend** : Pourcentage de conduite pendant les jours de semaine (lundi-vendredi) et le week-end.\n",
    "\n",
    "7. **Pct.drive.rush am/pm** : Pourcentage de conduite pendant les heures de pointe du matin ou de l'après-midi.\n",
    "\n",
    "8. **Avgdays.week** : Moyenne du nombre de jours de conduite par semaine.\n",
    "\n",
    "9. **Accel.xxmiles/Brake.xxmiles** : Nombre d'accélérations ou de freinages brusques par 1000 miles, indiquant un comportement agressif.\n",
    "\n",
    "10. **Left.turn.intensityxx/Right.turn.intensityxx** : Nombre de virages à gauche ou à droite à intensité élevée par 1000 miles.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "b4432cdc",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Id_pol                     object\n",
       "Annual.pct.driven          object\n",
       "Total.miles.driven         object\n",
       "Pct.drive.mon              object\n",
       "Pct.drive.tue              object\n",
       "Pct.drive.wed              object\n",
       "Pct.drive.thr              object\n",
       "Pct.drive.fri              object\n",
       "Pct.drive.sat              object\n",
       "Pct.drive.sun              object\n",
       "Pct.drive.2hrs             object\n",
       "Pct.drive.3hrs             object\n",
       "Pct.drive.4hrs             object\n",
       "Pct.drive.wkday            object\n",
       "Pct.drive.wkend            object\n",
       "Pct.drive.rush am          object\n",
       "Pct.drive.rush pm          object\n",
       "Avgdays.week               object\n",
       "Accel.06miles             float64\n",
       "Accel.08miles             float64\n",
       "Accel.09miles             float64\n",
       "Accel.11miles             float64\n",
       "Accel.12miles             float64\n",
       "Accel.14miles             float64\n",
       "Brake.06miles             float64\n",
       "Brake.08miles             float64\n",
       "Brake.09miles             float64\n",
       "Brake.11miles             float64\n",
       "Brake.12miles             float64\n",
       "Brake.14miles             float64\n",
       "Left.turn.intensity08     float64\n",
       "Left.turn.intensity09     float64\n",
       "Left.turn.intensity10     float64\n",
       "Left.turn.intensity11     float64\n",
       "Left.turn.intensity12     float64\n",
       "Right.turn.intensity08    float64\n",
       "Right.turn.intensity09    float64\n",
       "Right.turn.intensity10    float64\n",
       "Right.turn.intensity11    float64\n",
       "Right.turn.intensity12    float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "telematics_data.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "0635fa7b",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Id_pol                    0\n",
       "Annual.pct.driven         0\n",
       "Total.miles.driven        0\n",
       "Pct.drive.mon             0\n",
       "Pct.drive.tue             0\n",
       "Pct.drive.wed             0\n",
       "Pct.drive.thr             0\n",
       "Pct.drive.fri             0\n",
       "Pct.drive.sat             0\n",
       "Pct.drive.sun             0\n",
       "Pct.drive.2hrs            0\n",
       "Pct.drive.3hrs            0\n",
       "Pct.drive.4hrs            0\n",
       "Pct.drive.wkday           0\n",
       "Pct.drive.wkend           0\n",
       "Pct.drive.rush am         0\n",
       "Pct.drive.rush pm         0\n",
       "Avgdays.week              0\n",
       "Accel.06miles             0\n",
       "Accel.08miles             0\n",
       "Accel.09miles             0\n",
       "Accel.11miles             0\n",
       "Accel.12miles             0\n",
       "Accel.14miles             0\n",
       "Brake.06miles             0\n",
       "Brake.08miles             0\n",
       "Brake.09miles             0\n",
       "Brake.11miles             0\n",
       "Brake.12miles             0\n",
       "Brake.14miles             0\n",
       "Left.turn.intensity08     0\n",
       "Left.turn.intensity09     0\n",
       "Left.turn.intensity10     0\n",
       "Left.turn.intensity11     0\n",
       "Left.turn.intensity12     0\n",
       "Right.turn.intensity08    0\n",
       "Right.turn.intensity09    0\n",
       "Right.turn.intensity10    0\n",
       "Right.turn.intensity11    0\n",
       "Right.turn.intensity12    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "telematics_data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "a1a7a209",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id_pol</th>\n",
       "      <th>Annual.pct.driven</th>\n",
       "      <th>Total.miles.driven</th>\n",
       "      <th>Pct.drive.mon</th>\n",
       "      <th>Pct.drive.tue</th>\n",
       "      <th>Pct.drive.wed</th>\n",
       "      <th>Pct.drive.thr</th>\n",
       "      <th>Pct.drive.fri</th>\n",
       "      <th>Pct.drive.sat</th>\n",
       "      <th>Pct.drive.sun</th>\n",
       "      <th>...</th>\n",
       "      <th>Left.turn.intensity08</th>\n",
       "      <th>Left.turn.intensity09</th>\n",
       "      <th>Left.turn.intensity10</th>\n",
       "      <th>Left.turn.intensity11</th>\n",
       "      <th>Left.turn.intensity12</th>\n",
       "      <th>Right.turn.intensity08</th>\n",
       "      <th>Right.turn.intensity09</th>\n",
       "      <th>Right.turn.intensity10</th>\n",
       "      <th>Right.turn.intensity11</th>\n",
       "      <th>Right.turn.intensity12</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>cnt_122389</td>\n",
       "      <td>0,997260274</td>\n",
       "      <td>5372,837273</td>\n",
       "      <td>0,192885196</td>\n",
       "      <td>0,169068979</td>\n",
       "      <td>0,197889028</td>\n",
       "      <td>0,184917416</td>\n",
       "      <td>0,16189224</td>\n",
       "      <td>0,056223054</td>\n",
       "      <td>0,037124086</td>\n",
       "      <td>...</td>\n",
       "      <td>2366.0</td>\n",
       "      <td>1609.0</td>\n",
       "      <td>751.0</td>\n",
       "      <td>339.0</td>\n",
       "      <td>107.0</td>\n",
       "      <td>766.0</td>\n",
       "      <td>366.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>cnt_125019</td>\n",
       "      <td>0,912328767</td>\n",
       "      <td>5780,818246</td>\n",
       "      <td>0,103235423</td>\n",
       "      <td>0,11866897</td>\n",
       "      <td>0,107923307</td>\n",
       "      <td>0,137310889</td>\n",
       "      <td>0,174103462</td>\n",
       "      <td>0,203041338</td>\n",
       "      <td>0,155716612</td>\n",
       "      <td>...</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>cnt_181154</td>\n",
       "      <td>0,526027397</td>\n",
       "      <td>9149,738331</td>\n",
       "      <td>0,116469365</td>\n",
       "      <td>0,145887688</td>\n",
       "      <td>0,13527532</td>\n",
       "      <td>0,173257616</td>\n",
       "      <td>0,160496263</td>\n",
       "      <td>0,084183125</td>\n",
       "      <td>0,184430624</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>cnt_140021</td>\n",
       "      <td>1</td>\n",
       "      <td>10582,26663</td>\n",
       "      <td>0,144175656</td>\n",
       "      <td>0,151476187</td>\n",
       "      <td>0,168558752</td>\n",
       "      <td>0,171549272</td>\n",
       "      <td>0,177907998</td>\n",
       "      <td>0,114748693</td>\n",
       "      <td>0,071583442</td>\n",
       "      <td>...</td>\n",
       "      <td>736.0</td>\n",
       "      <td>295.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>656.0</td>\n",
       "      <td>294.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>cnt_170356</td>\n",
       "      <td>0,75890411</td>\n",
       "      <td>9412,021708</td>\n",
       "      <td>0,109676276</td>\n",
       "      <td>0,152352793</td>\n",
       "      <td>0,151707136</td>\n",
       "      <td>0,160847296</td>\n",
       "      <td>0,140824794</td>\n",
       "      <td>0,151463464</td>\n",
       "      <td>0,133128241</td>\n",
       "      <td>...</td>\n",
       "      <td>33.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100327</th>\n",
       "      <td>cnt_215461</td>\n",
       "      <td>0,22739726</td>\n",
       "      <td>1805,053586</td>\n",
       "      <td>0,069532689</td>\n",
       "      <td>0,199659464</td>\n",
       "      <td>0,106125289</td>\n",
       "      <td>0,278542941</td>\n",
       "      <td>0,202474321</td>\n",
       "      <td>0,103859745</td>\n",
       "      <td>0,039805551</td>\n",
       "      <td>...</td>\n",
       "      <td>29.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>109.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100328</th>\n",
       "      <td>cnt_206415</td>\n",
       "      <td>0,961643836</td>\n",
       "      <td>4513,087229</td>\n",
       "      <td>0,152835123</td>\n",
       "      <td>0,153833202</td>\n",
       "      <td>0,105779641</td>\n",
       "      <td>0,155288418</td>\n",
       "      <td>0,123644011</td>\n",
       "      <td>0,180593479</td>\n",
       "      <td>0,128026127</td>\n",
       "      <td>...</td>\n",
       "      <td>60.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>595.0</td>\n",
       "      <td>230.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100329</th>\n",
       "      <td>cnt_187472</td>\n",
       "      <td>0.498630137</td>\n",
       "      <td>7645.396934038791</td>\n",
       "      <td>0.119524428</td>\n",
       "      <td>0.140343686</td>\n",
       "      <td>0.131523148</td>\n",
       "      <td>0.142210447</td>\n",
       "      <td>0.10569621</td>\n",
       "      <td>0.268427804</td>\n",
       "      <td>0.092274277</td>\n",
       "      <td>...</td>\n",
       "      <td>81.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>137.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100330</th>\n",
       "      <td>cnt_193966</td>\n",
       "      <td>0.983561644</td>\n",
       "      <td>9354.42693575792</td>\n",
       "      <td>0.072627342</td>\n",
       "      <td>0.147821284</td>\n",
       "      <td>0.198007487</td>\n",
       "      <td>0.10910057</td>\n",
       "      <td>0.180183148</td>\n",
       "      <td>0.192656561</td>\n",
       "      <td>0.099603607</td>\n",
       "      <td>...</td>\n",
       "      <td>329.0</td>\n",
       "      <td>180.0</td>\n",
       "      <td>71.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>217.0</td>\n",
       "      <td>119.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100331</th>\n",
       "      <td>cnt_129620</td>\n",
       "      <td>0,304109589</td>\n",
       "      <td>2013,059079</td>\n",
       "      <td>0,095567553</td>\n",
       "      <td>0,144426148</td>\n",
       "      <td>0,146339543</td>\n",
       "      <td>0,151470482</td>\n",
       "      <td>0,190755191</td>\n",
       "      <td>0,125101541</td>\n",
       "      <td>0,146339542</td>\n",
       "      <td>...</td>\n",
       "      <td>50.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>472.0</td>\n",
       "      <td>119.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100332 rows × 40 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Id_pol Annual.pct.driven Total.miles.driven Pct.drive.mon  \\\n",
       "0       cnt_122389       0,997260274        5372,837273   0,192885196   \n",
       "1       cnt_125019       0,912328767        5780,818246   0,103235423   \n",
       "2       cnt_181154       0,526027397        9149,738331   0,116469365   \n",
       "3       cnt_140021                 1        10582,26663   0,144175656   \n",
       "4       cnt_170356        0,75890411        9412,021708   0,109676276   \n",
       "...            ...               ...                ...           ...   \n",
       "100327  cnt_215461        0,22739726        1805,053586   0,069532689   \n",
       "100328  cnt_206415       0,961643836        4513,087229   0,152835123   \n",
       "100329  cnt_187472       0.498630137  7645.396934038791   0.119524428   \n",
       "100330  cnt_193966       0.983561644   9354.42693575792   0.072627342   \n",
       "100331  cnt_129620       0,304109589        2013,059079   0,095567553   \n",
       "\n",
       "       Pct.drive.tue Pct.drive.wed Pct.drive.thr Pct.drive.fri Pct.drive.sat  \\\n",
       "0        0,169068979   0,197889028   0,184917416    0,16189224   0,056223054   \n",
       "1         0,11866897   0,107923307   0,137310889   0,174103462   0,203041338   \n",
       "2        0,145887688    0,13527532   0,173257616   0,160496263   0,084183125   \n",
       "3        0,151476187   0,168558752   0,171549272   0,177907998   0,114748693   \n",
       "4        0,152352793   0,151707136   0,160847296   0,140824794   0,151463464   \n",
       "...              ...           ...           ...           ...           ...   \n",
       "100327   0,199659464   0,106125289   0,278542941   0,202474321   0,103859745   \n",
       "100328   0,153833202   0,105779641   0,155288418   0,123644011   0,180593479   \n",
       "100329   0.140343686   0.131523148   0.142210447    0.10569621   0.268427804   \n",
       "100330   0.147821284   0.198007487    0.10910057   0.180183148   0.192656561   \n",
       "100331   0,144426148   0,146339543   0,151470482   0,190755191   0,125101541   \n",
       "\n",
       "       Pct.drive.sun  ... Left.turn.intensity08 Left.turn.intensity09  \\\n",
       "0        0,037124086  ...                2366.0                1609.0   \n",
       "1        0,155716612  ...                   4.0                   1.0   \n",
       "2        0,184430624  ...                   0.0                   0.0   \n",
       "3        0,071583442  ...                 736.0                 295.0   \n",
       "4        0,133128241  ...                  33.0                  12.0   \n",
       "...              ...  ...                   ...                   ...   \n",
       "100327   0,039805551  ...                  29.0                   6.0   \n",
       "100328   0,128026127  ...                  60.0                  14.0   \n",
       "100329   0.092274277  ...                  81.0                  21.0   \n",
       "100330   0.099603607  ...                 329.0                 180.0   \n",
       "100331   0,146339542  ...                  50.0                  11.0   \n",
       "\n",
       "       Left.turn.intensity10 Left.turn.intensity11 Left.turn.intensity12  \\\n",
       "0                      751.0                 339.0                 107.0   \n",
       "1                        0.0                   0.0                   0.0   \n",
       "2                        0.0                   0.0                   0.0   \n",
       "3                       58.0                  16.0                   6.0   \n",
       "4                        2.0                   1.0                   0.0   \n",
       "...                      ...                   ...                   ...   \n",
       "100327                   0.0                   0.0                   0.0   \n",
       "100328                   2.0                   1.0                   0.0   \n",
       "100329                   2.0                   0.0                   0.0   \n",
       "100330                  71.0                  35.0                  17.0   \n",
       "100331                   0.0                   0.0                   0.0   \n",
       "\n",
       "       Right.turn.intensity08 Right.turn.intensity09 Right.turn.intensity10  \\\n",
       "0                       766.0                  366.0                   91.0   \n",
       "1                         5.0                    0.0                    0.0   \n",
       "2                         0.0                    0.0                    0.0   \n",
       "3                       656.0                  294.0                   65.0   \n",
       "4                        39.0                   14.0                    2.0   \n",
       "...                       ...                    ...                    ...   \n",
       "100327                  109.0                   24.0                    2.0   \n",
       "100328                  595.0                  230.0                   42.0   \n",
       "100329                  137.0                   41.0                    7.0   \n",
       "100330                  217.0                  119.0                   43.0   \n",
       "100331                  472.0                  119.0                   16.0   \n",
       "\n",
       "        Right.turn.intensity11  Right.turn.intensity12  \n",
       "0                         35.0                     8.0  \n",
       "1                          0.0                     0.0  \n",
       "2                          0.0                     0.0  \n",
       "3                         18.0                     4.0  \n",
       "4                          0.0                     0.0  \n",
       "...                        ...                     ...  \n",
       "100327                     0.0                     0.0  \n",
       "100328                    15.0                     8.0  \n",
       "100329                     2.0                     1.0  \n",
       "100330                    21.0                    12.0  \n",
       "100331                     3.0                     0.0  \n",
       "\n",
       "[100332 rows x 40 columns]"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "telematics_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "d42b60f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#on retire cnt_ de Id_pol afin de l'uniformiser avec les autres dataset\n",
    "telematics_data['Id_pol'] = telematics_data['Id_pol'].str.replace('cnt_','')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "ba67d035",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "df_telematics=telematics_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "64633308",
   "metadata": {},
   "outputs": [],
   "source": [
    "#convertir toutes les colonnes en object\n",
    "columns=df_telematics.columns.to_list()\n",
    "for column in columns:\n",
    "    df_telematics[column] = df_telematics[column].astype(str)\n",
    "    \n",
    "#remplacer les , par . dans df_telematics\n",
    "for column in columns:\n",
    "    df_telematics[column] = df_telematics[column].str.replace(',','.')\n",
    "\n",
    "#convertir toues les colonnes en float sauf id\n",
    "for column in columns:\n",
    "    if column != 'Id_pol':\n",
    "        df_telematics[column] = df_telematics[column].astype(float)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "3244f21b",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id_pol</th>\n",
       "      <th>Annual.pct.driven</th>\n",
       "      <th>Total.miles.driven</th>\n",
       "      <th>Pct.drive.mon</th>\n",
       "      <th>Pct.drive.tue</th>\n",
       "      <th>Pct.drive.wed</th>\n",
       "      <th>Pct.drive.thr</th>\n",
       "      <th>Pct.drive.fri</th>\n",
       "      <th>Pct.drive.sat</th>\n",
       "      <th>Pct.drive.sun</th>\n",
       "      <th>...</th>\n",
       "      <th>Left.turn.intensity08</th>\n",
       "      <th>Left.turn.intensity09</th>\n",
       "      <th>Left.turn.intensity10</th>\n",
       "      <th>Left.turn.intensity11</th>\n",
       "      <th>Left.turn.intensity12</th>\n",
       "      <th>Right.turn.intensity08</th>\n",
       "      <th>Right.turn.intensity09</th>\n",
       "      <th>Right.turn.intensity10</th>\n",
       "      <th>Right.turn.intensity11</th>\n",
       "      <th>Right.turn.intensity12</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>243</th>\n",
       "      <td>209918</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>480</th>\n",
       "      <td>138604</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1890</th>\n",
       "      <td>168245</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2836</th>\n",
       "      <td>181365</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3956</th>\n",
       "      <td>172860</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>91365</th>\n",
       "      <td>184282</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>91742</th>\n",
       "      <td>155703</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92274</th>\n",
       "      <td>196975</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96242</th>\n",
       "      <td>178232</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99534</th>\n",
       "      <td>194154</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>95 rows × 40 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Id_pol  Annual.pct.driven  Total.miles.driven  Pct.drive.mon  \\\n",
       "243    209918                0.0                 0.0            0.0   \n",
       "480    138604                0.0                 0.0            0.0   \n",
       "1890   168245                0.0                 0.0            0.0   \n",
       "2836   181365                0.0                 0.0            0.0   \n",
       "3956   172860                0.0                 0.0            0.0   \n",
       "...       ...                ...                 ...            ...   \n",
       "91365  184282                0.0                 0.0            0.0   \n",
       "91742  155703                0.0                 0.0            0.0   \n",
       "92274  196975                0.0                 0.0            0.0   \n",
       "96242  178232                0.0                 0.0            0.0   \n",
       "99534  194154                0.0                 0.0            0.0   \n",
       "\n",
       "       Pct.drive.tue  Pct.drive.wed  Pct.drive.thr  Pct.drive.fri  \\\n",
       "243              0.0            0.0            0.0            0.0   \n",
       "480              0.0            0.0            0.0            0.0   \n",
       "1890             0.0            0.0            0.0            0.0   \n",
       "2836             0.0            0.0            0.0            0.0   \n",
       "3956             0.0            0.0            0.0            0.0   \n",
       "...              ...            ...            ...            ...   \n",
       "91365            0.0            0.0            0.0            0.0   \n",
       "91742            0.0            0.0            0.0            0.0   \n",
       "92274            0.0            0.0            0.0            0.0   \n",
       "96242            0.0            0.0            0.0            0.0   \n",
       "99534            0.0            0.0            0.0            0.0   \n",
       "\n",
       "       Pct.drive.sat  Pct.drive.sun  ...  Left.turn.intensity08  \\\n",
       "243              0.0            0.0  ...                    0.0   \n",
       "480              0.0            0.0  ...                    0.0   \n",
       "1890             0.0            0.0  ...                    0.0   \n",
       "2836             0.0            0.0  ...                    0.0   \n",
       "3956             0.0            0.0  ...                    0.0   \n",
       "...              ...            ...  ...                    ...   \n",
       "91365            0.0            0.0  ...                    0.0   \n",
       "91742            0.0            0.0  ...                    0.0   \n",
       "92274            0.0            0.0  ...                    0.0   \n",
       "96242            0.0            0.0  ...                    0.0   \n",
       "99534            0.0            0.0  ...                    0.0   \n",
       "\n",
       "       Left.turn.intensity09  Left.turn.intensity10  Left.turn.intensity11  \\\n",
       "243                      0.0                    0.0                    0.0   \n",
       "480                      0.0                    0.0                    0.0   \n",
       "1890                     0.0                    0.0                    0.0   \n",
       "2836                     0.0                    0.0                    0.0   \n",
       "3956                     0.0                    0.0                    0.0   \n",
       "...                      ...                    ...                    ...   \n",
       "91365                    0.0                    0.0                    0.0   \n",
       "91742                    0.0                    0.0                    0.0   \n",
       "92274                    0.0                    0.0                    0.0   \n",
       "96242                    0.0                    0.0                    0.0   \n",
       "99534                    0.0                    0.0                    0.0   \n",
       "\n",
       "       Left.turn.intensity12  Right.turn.intensity08  Right.turn.intensity09  \\\n",
       "243                      0.0                     0.0                     0.0   \n",
       "480                      0.0                     0.0                     0.0   \n",
       "1890                     0.0                     0.0                     0.0   \n",
       "2836                     0.0                     0.0                     0.0   \n",
       "3956                     0.0                     0.0                     0.0   \n",
       "...                      ...                     ...                     ...   \n",
       "91365                    0.0                     0.0                     0.0   \n",
       "91742                    0.0                     0.0                     0.0   \n",
       "92274                    0.0                     0.0                     0.0   \n",
       "96242                    0.0                     0.0                     0.0   \n",
       "99534                    0.0                     0.0                     0.0   \n",
       "\n",
       "       Right.turn.intensity10  Right.turn.intensity11  Right.turn.intensity12  \n",
       "243                       0.0                     0.0                     0.0  \n",
       "480                       0.0                     0.0                     0.0  \n",
       "1890                      0.0                     0.0                     0.0  \n",
       "2836                      0.0                     0.0                     0.0  \n",
       "3956                      0.0                     0.0                     0.0  \n",
       "...                       ...                     ...                     ...  \n",
       "91365                     0.0                     0.0                     0.0  \n",
       "91742                     0.0                     0.0                     0.0  \n",
       "92274                     0.0                     0.0                     0.0  \n",
       "96242                     0.0                     0.0                     0.0  \n",
       "99534                     0.0                     0.0                     0.0  \n",
       "\n",
       "[95 rows x 40 columns]"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#identifier les lignes où toutes colonnes sont nulles exceptées la colonne Id\n",
    "zero_rows = df_telematics[((df_telematics.iloc[:,1:] == 0)|(df_telematics.iloc[:,1:] == 0.0)).all(axis=1)]\n",
    "zero_rows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "f2cdc929",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_telematics = df_telematics.drop(zero_rows.index)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "496df36d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id_pol</th>\n",
       "      <th>Annual.pct.driven</th>\n",
       "      <th>Total.miles.driven</th>\n",
       "      <th>Pct.drive.mon</th>\n",
       "      <th>Pct.drive.tue</th>\n",
       "      <th>Pct.drive.wed</th>\n",
       "      <th>Pct.drive.thr</th>\n",
       "      <th>Pct.drive.fri</th>\n",
       "      <th>Pct.drive.sat</th>\n",
       "      <th>Pct.drive.sun</th>\n",
       "      <th>...</th>\n",
       "      <th>Left.turn.intensity08</th>\n",
       "      <th>Left.turn.intensity09</th>\n",
       "      <th>Left.turn.intensity10</th>\n",
       "      <th>Left.turn.intensity11</th>\n",
       "      <th>Left.turn.intensity12</th>\n",
       "      <th>Right.turn.intensity08</th>\n",
       "      <th>Right.turn.intensity09</th>\n",
       "      <th>Right.turn.intensity10</th>\n",
       "      <th>Right.turn.intensity11</th>\n",
       "      <th>Right.turn.intensity12</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>122389</td>\n",
       "      <td>0.997260</td>\n",
       "      <td>5372.837273</td>\n",
       "      <td>0.192885</td>\n",
       "      <td>0.169069</td>\n",
       "      <td>0.197889</td>\n",
       "      <td>0.184917</td>\n",
       "      <td>0.161892</td>\n",
       "      <td>0.056223</td>\n",
       "      <td>0.037124</td>\n",
       "      <td>...</td>\n",
       "      <td>2366.0</td>\n",
       "      <td>1609.0</td>\n",
       "      <td>751.0</td>\n",
       "      <td>339.0</td>\n",
       "      <td>107.0</td>\n",
       "      <td>766.0</td>\n",
       "      <td>366.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>125019</td>\n",
       "      <td>0.912329</td>\n",
       "      <td>5780.818246</td>\n",
       "      <td>0.103235</td>\n",
       "      <td>0.118669</td>\n",
       "      <td>0.107923</td>\n",
       "      <td>0.137311</td>\n",
       "      <td>0.174103</td>\n",
       "      <td>0.203041</td>\n",
       "      <td>0.155717</td>\n",
       "      <td>...</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>181154</td>\n",
       "      <td>0.526027</td>\n",
       "      <td>9149.738331</td>\n",
       "      <td>0.116469</td>\n",
       "      <td>0.145888</td>\n",
       "      <td>0.135275</td>\n",
       "      <td>0.173258</td>\n",
       "      <td>0.160496</td>\n",
       "      <td>0.084183</td>\n",
       "      <td>0.184431</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>140021</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>10582.266630</td>\n",
       "      <td>0.144176</td>\n",
       "      <td>0.151476</td>\n",
       "      <td>0.168559</td>\n",
       "      <td>0.171549</td>\n",
       "      <td>0.177908</td>\n",
       "      <td>0.114749</td>\n",
       "      <td>0.071583</td>\n",
       "      <td>...</td>\n",
       "      <td>736.0</td>\n",
       "      <td>295.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>656.0</td>\n",
       "      <td>294.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>170356</td>\n",
       "      <td>0.758904</td>\n",
       "      <td>9412.021708</td>\n",
       "      <td>0.109676</td>\n",
       "      <td>0.152353</td>\n",
       "      <td>0.151707</td>\n",
       "      <td>0.160847</td>\n",
       "      <td>0.140825</td>\n",
       "      <td>0.151463</td>\n",
       "      <td>0.133128</td>\n",
       "      <td>...</td>\n",
       "      <td>33.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100327</th>\n",
       "      <td>215461</td>\n",
       "      <td>0.227397</td>\n",
       "      <td>1805.053586</td>\n",
       "      <td>0.069533</td>\n",
       "      <td>0.199659</td>\n",
       "      <td>0.106125</td>\n",
       "      <td>0.278543</td>\n",
       "      <td>0.202474</td>\n",
       "      <td>0.103860</td>\n",
       "      <td>0.039806</td>\n",
       "      <td>...</td>\n",
       "      <td>29.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>109.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100328</th>\n",
       "      <td>206415</td>\n",
       "      <td>0.961644</td>\n",
       "      <td>4513.087229</td>\n",
       "      <td>0.152835</td>\n",
       "      <td>0.153833</td>\n",
       "      <td>0.105780</td>\n",
       "      <td>0.155288</td>\n",
       "      <td>0.123644</td>\n",
       "      <td>0.180593</td>\n",
       "      <td>0.128026</td>\n",
       "      <td>...</td>\n",
       "      <td>60.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>595.0</td>\n",
       "      <td>230.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100329</th>\n",
       "      <td>187472</td>\n",
       "      <td>0.498630</td>\n",
       "      <td>7645.396934</td>\n",
       "      <td>0.119524</td>\n",
       "      <td>0.140344</td>\n",
       "      <td>0.131523</td>\n",
       "      <td>0.142210</td>\n",
       "      <td>0.105696</td>\n",
       "      <td>0.268428</td>\n",
       "      <td>0.092274</td>\n",
       "      <td>...</td>\n",
       "      <td>81.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>137.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100330</th>\n",
       "      <td>193966</td>\n",
       "      <td>0.983562</td>\n",
       "      <td>9354.426936</td>\n",
       "      <td>0.072627</td>\n",
       "      <td>0.147821</td>\n",
       "      <td>0.198007</td>\n",
       "      <td>0.109101</td>\n",
       "      <td>0.180183</td>\n",
       "      <td>0.192657</td>\n",
       "      <td>0.099604</td>\n",
       "      <td>...</td>\n",
       "      <td>329.0</td>\n",
       "      <td>180.0</td>\n",
       "      <td>71.0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>217.0</td>\n",
       "      <td>119.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100331</th>\n",
       "      <td>129620</td>\n",
       "      <td>0.304110</td>\n",
       "      <td>2013.059079</td>\n",
       "      <td>0.095568</td>\n",
       "      <td>0.144426</td>\n",
       "      <td>0.146340</td>\n",
       "      <td>0.151470</td>\n",
       "      <td>0.190755</td>\n",
       "      <td>0.125102</td>\n",
       "      <td>0.146340</td>\n",
       "      <td>...</td>\n",
       "      <td>50.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>472.0</td>\n",
       "      <td>119.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100237 rows × 40 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Id_pol  Annual.pct.driven  Total.miles.driven  Pct.drive.mon  \\\n",
       "0       122389           0.997260         5372.837273       0.192885   \n",
       "1       125019           0.912329         5780.818246       0.103235   \n",
       "2       181154           0.526027         9149.738331       0.116469   \n",
       "3       140021           1.000000        10582.266630       0.144176   \n",
       "4       170356           0.758904         9412.021708       0.109676   \n",
       "...        ...                ...                 ...            ...   \n",
       "100327  215461           0.227397         1805.053586       0.069533   \n",
       "100328  206415           0.961644         4513.087229       0.152835   \n",
       "100329  187472           0.498630         7645.396934       0.119524   \n",
       "100330  193966           0.983562         9354.426936       0.072627   \n",
       "100331  129620           0.304110         2013.059079       0.095568   \n",
       "\n",
       "        Pct.drive.tue  Pct.drive.wed  Pct.drive.thr  Pct.drive.fri  \\\n",
       "0            0.169069       0.197889       0.184917       0.161892   \n",
       "1            0.118669       0.107923       0.137311       0.174103   \n",
       "2            0.145888       0.135275       0.173258       0.160496   \n",
       "3            0.151476       0.168559       0.171549       0.177908   \n",
       "4            0.152353       0.151707       0.160847       0.140825   \n",
       "...               ...            ...            ...            ...   \n",
       "100327       0.199659       0.106125       0.278543       0.202474   \n",
       "100328       0.153833       0.105780       0.155288       0.123644   \n",
       "100329       0.140344       0.131523       0.142210       0.105696   \n",
       "100330       0.147821       0.198007       0.109101       0.180183   \n",
       "100331       0.144426       0.146340       0.151470       0.190755   \n",
       "\n",
       "        Pct.drive.sat  Pct.drive.sun  ...  Left.turn.intensity08  \\\n",
       "0            0.056223       0.037124  ...                 2366.0   \n",
       "1            0.203041       0.155717  ...                    4.0   \n",
       "2            0.084183       0.184431  ...                    0.0   \n",
       "3            0.114749       0.071583  ...                  736.0   \n",
       "4            0.151463       0.133128  ...                   33.0   \n",
       "...               ...            ...  ...                    ...   \n",
       "100327       0.103860       0.039806  ...                   29.0   \n",
       "100328       0.180593       0.128026  ...                   60.0   \n",
       "100329       0.268428       0.092274  ...                   81.0   \n",
       "100330       0.192657       0.099604  ...                  329.0   \n",
       "100331       0.125102       0.146340  ...                   50.0   \n",
       "\n",
       "        Left.turn.intensity09  Left.turn.intensity10  Left.turn.intensity11  \\\n",
       "0                      1609.0                  751.0                  339.0   \n",
       "1                         1.0                    0.0                    0.0   \n",
       "2                         0.0                    0.0                    0.0   \n",
       "3                       295.0                   58.0                   16.0   \n",
       "4                        12.0                    2.0                    1.0   \n",
       "...                       ...                    ...                    ...   \n",
       "100327                    6.0                    0.0                    0.0   \n",
       "100328                   14.0                    2.0                    1.0   \n",
       "100329                   21.0                    2.0                    0.0   \n",
       "100330                  180.0                   71.0                   35.0   \n",
       "100331                   11.0                    0.0                    0.0   \n",
       "\n",
       "        Left.turn.intensity12  Right.turn.intensity08  Right.turn.intensity09  \\\n",
       "0                       107.0                   766.0                   366.0   \n",
       "1                         0.0                     5.0                     0.0   \n",
       "2                         0.0                     0.0                     0.0   \n",
       "3                         6.0                   656.0                   294.0   \n",
       "4                         0.0                    39.0                    14.0   \n",
       "...                       ...                     ...                     ...   \n",
       "100327                    0.0                   109.0                    24.0   \n",
       "100328                    0.0                   595.0                   230.0   \n",
       "100329                    0.0                   137.0                    41.0   \n",
       "100330                   17.0                   217.0                   119.0   \n",
       "100331                    0.0                   472.0                   119.0   \n",
       "\n",
       "        Right.turn.intensity10  Right.turn.intensity11  Right.turn.intensity12  \n",
       "0                         91.0                    35.0                     8.0  \n",
       "1                          0.0                     0.0                     0.0  \n",
       "2                          0.0                     0.0                     0.0  \n",
       "3                         65.0                    18.0                     4.0  \n",
       "4                          2.0                     0.0                     0.0  \n",
       "...                        ...                     ...                     ...  \n",
       "100327                     2.0                     0.0                     0.0  \n",
       "100328                    42.0                    15.0                     8.0  \n",
       "100329                     7.0                     2.0                     1.0  \n",
       "100330                    43.0                    21.0                    12.0  \n",
       "100331                    16.0                     3.0                     0.0  \n",
       "\n",
       "[100237 rows x 40 columns]"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_telematics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "37cf18ab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_telematics.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "id": "6f8767b4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 174,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#doublons d'id dans telematics\n",
    "df_telematics.duplicated(subset='Id_pol', keep = False).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "b83c5c67",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/df/tzlk6_xs46dbdsn2dm2mr21m0000gp/T/ipykernel_31415/4017656363.py:1: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
      "  correlation_matrix = df_telematics.corr()\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Annual.pct.driven</th>\n",
       "      <th>Total.miles.driven</th>\n",
       "      <th>Pct.drive.mon</th>\n",
       "      <th>Pct.drive.tue</th>\n",
       "      <th>Pct.drive.wed</th>\n",
       "      <th>Pct.drive.thr</th>\n",
       "      <th>Pct.drive.fri</th>\n",
       "      <th>Pct.drive.sat</th>\n",
       "      <th>Pct.drive.sun</th>\n",
       "      <th>Pct.drive.2hrs</th>\n",
       "      <th>...</th>\n",
       "      <th>Left.turn.intensity08</th>\n",
       "      <th>Left.turn.intensity09</th>\n",
       "      <th>Left.turn.intensity10</th>\n",
       "      <th>Left.turn.intensity11</th>\n",
       "      <th>Left.turn.intensity12</th>\n",
       "      <th>Right.turn.intensity08</th>\n",
       "      <th>Right.turn.intensity09</th>\n",
       "      <th>Right.turn.intensity10</th>\n",
       "      <th>Right.turn.intensity11</th>\n",
       "      <th>Right.turn.intensity12</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Annual.pct.driven</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.704461</td>\n",
       "      <td>-0.031258</td>\n",
       "      <td>-0.079482</td>\n",
       "      <td>0.029752</td>\n",
       "      <td>0.019441</td>\n",
       "      <td>0.009530</td>\n",
       "      <td>0.027850</td>\n",
       "      <td>0.020809</td>\n",
       "      <td>0.009092</td>\n",
       "      <td>...</td>\n",
       "      <td>0.007252</td>\n",
       "      <td>0.006252</td>\n",
       "      <td>0.005178</td>\n",
       "      <td>0.004885</td>\n",
       "      <td>0.004638</td>\n",
       "      <td>0.007170</td>\n",
       "      <td>0.003169</td>\n",
       "      <td>-0.000133</td>\n",
       "      <td>-0.001677</td>\n",
       "      <td>-0.002218</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total.miles.driven</th>\n",
       "      <td>0.704461</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.018220</td>\n",
       "      <td>-0.076961</td>\n",
       "      <td>-0.000104</td>\n",
       "      <td>0.003514</td>\n",
       "      <td>0.006809</td>\n",
       "      <td>0.038366</td>\n",
       "      <td>0.039281</td>\n",
       "      <td>0.101168</td>\n",
       "      <td>...</td>\n",
       "      <td>0.006657</td>\n",
       "      <td>0.006657</td>\n",
       "      <td>0.006823</td>\n",
       "      <td>0.006897</td>\n",
       "      <td>0.006824</td>\n",
       "      <td>0.001672</td>\n",
       "      <td>0.001321</td>\n",
       "      <td>0.000804</td>\n",
       "      <td>0.000206</td>\n",
       "      <td>0.000124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pct.drive.mon</th>\n",
       "      <td>-0.031258</td>\n",
       "      <td>-0.018220</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.037895</td>\n",
       "      <td>-0.104962</td>\n",
       "      <td>-0.157207</td>\n",
       "      <td>-0.200075</td>\n",
       "      <td>-0.283430</td>\n",
       "      <td>-0.184472</td>\n",
       "      <td>-0.028253</td>\n",
       "      <td>...</td>\n",
       "      <td>0.004339</td>\n",
       "      <td>0.003263</td>\n",
       "      <td>0.001951</td>\n",
       "      <td>0.001249</td>\n",
       "      <td>0.000957</td>\n",
       "      <td>-0.006080</td>\n",
       "      <td>-0.006665</td>\n",
       "      <td>-0.006420</td>\n",
       "      <td>-0.006125</td>\n",
       "      <td>-0.004985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pct.drive.tue</th>\n",
       "      <td>-0.079482</td>\n",
       "      <td>-0.076961</td>\n",
       "      <td>0.037895</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.030840</td>\n",
       "      <td>-0.068995</td>\n",
       "      <td>-0.207812</td>\n",
       "      <td>-0.388534</td>\n",
       "      <td>-0.357595</td>\n",
       "      <td>-0.041535</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.008081</td>\n",
       "      <td>-0.008334</td>\n",
       "      <td>-0.007460</td>\n",
       "      <td>-0.006612</td>\n",
       "      <td>-0.006025</td>\n",
       "      <td>0.006337</td>\n",
       "      <td>0.006414</td>\n",
       "      <td>0.005965</td>\n",
       "      <td>0.005244</td>\n",
       "      <td>0.003718</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pct.drive.wed</th>\n",
       "      <td>0.029752</td>\n",
       "      <td>-0.000104</td>\n",
       "      <td>-0.104962</td>\n",
       "      <td>0.030840</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.072284</td>\n",
       "      <td>-0.145688</td>\n",
       "      <td>-0.379189</td>\n",
       "      <td>-0.366773</td>\n",
       "      <td>-0.031529</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.013470</td>\n",
       "      <td>-0.013760</td>\n",
       "      <td>-0.013990</td>\n",
       "      <td>-0.014831</td>\n",
       "      <td>-0.014677</td>\n",
       "      <td>-0.003246</td>\n",
       "      <td>-0.002822</td>\n",
       "      <td>-0.001349</td>\n",
       "      <td>-0.000455</td>\n",
       "      <td>0.000952</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pct.drive.thr</th>\n",
       "      <td>0.019441</td>\n",
       "      <td>0.003514</td>\n",
       "      <td>-0.157207</td>\n",
       "      <td>-0.068995</td>\n",
       "      <td>0.072284</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.047950</td>\n",
       "      <td>-0.348040</td>\n",
       "      <td>-0.341694</td>\n",
       "      <td>-0.019974</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.006904</td>\n",
       "      <td>-0.006701</td>\n",
       "      <td>-0.006755</td>\n",
       "      <td>-0.006577</td>\n",
       "      <td>-0.006016</td>\n",
       "      <td>0.002927</td>\n",
       "      <td>0.001690</td>\n",
       "      <td>-0.001069</td>\n",
       "      <td>-0.001702</td>\n",
       "      <td>-0.001492</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pct.drive.fri</th>\n",
       "      <td>0.009530</td>\n",
       "      <td>0.006809</td>\n",
       "      <td>-0.200075</td>\n",
       "      <td>-0.207812</td>\n",
       "      <td>-0.145688</td>\n",
       "      <td>-0.047950</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.113842</td>\n",
       "      <td>-0.212055</td>\n",
       "      <td>0.012612</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.003448</td>\n",
       "      <td>-0.003267</td>\n",
       "      <td>-0.003476</td>\n",
       "      <td>-0.003762</td>\n",
       "      <td>-0.003720</td>\n",
       "      <td>0.001596</td>\n",
       "      <td>0.000903</td>\n",
       "      <td>0.001071</td>\n",
       "      <td>0.001786</td>\n",
       "      <td>0.003028</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pct.drive.sat</th>\n",
       "      <td>0.027850</td>\n",
       "      <td>0.038366</td>\n",
       "      <td>-0.283430</td>\n",
       "      <td>-0.388534</td>\n",
       "      <td>-0.379189</td>\n",
       "      <td>-0.348040</td>\n",
       "      <td>-0.113842</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.298854</td>\n",
       "      <td>0.044917</td>\n",
       "      <td>...</td>\n",
       "      <td>0.005508</td>\n",
       "      <td>0.006214</td>\n",
       "      <td>0.007154</td>\n",
       "      <td>0.007741</td>\n",
       "      <td>0.007254</td>\n",
       "      <td>0.001102</td>\n",
       "      <td>0.002181</td>\n",
       "      <td>0.003638</td>\n",
       "      <td>0.003606</td>\n",
       "      <td>0.001909</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pct.drive.sun</th>\n",
       "      <td>0.020809</td>\n",
       "      <td>0.039281</td>\n",
       "      <td>-0.184472</td>\n",
       "      <td>-0.357595</td>\n",
       "      <td>-0.366773</td>\n",
       "      <td>-0.341694</td>\n",
       "      <td>-0.212055</td>\n",
       "      <td>0.298854</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.051049</td>\n",
       "      <td>...</td>\n",
       "      <td>0.019343</td>\n",
       "      <td>0.019677</td>\n",
       "      <td>0.019407</td>\n",
       "      <td>0.019419</td>\n",
       "      <td>0.018955</td>\n",
       "      <td>-0.003101</td>\n",
       "      <td>-0.002491</td>\n",
       "      <td>-0.002832</td>\n",
       "      <td>-0.003224</td>\n",
       "      <td>-0.003474</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pct.drive.2hrs</th>\n",
       "      <td>0.009092</td>\n",
       "      <td>0.101168</td>\n",
       "      <td>-0.028253</td>\n",
       "      <td>-0.041535</td>\n",
       "      <td>-0.031529</td>\n",
       "      <td>-0.019974</td>\n",
       "      <td>0.012612</td>\n",
       "      <td>0.044917</td>\n",
       "      <td>0.051049</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000742</td>\n",
       "      <td>0.000549</td>\n",
       "      <td>0.001888</td>\n",
       "      <td>0.002464</td>\n",
       "      <td>0.002637</td>\n",
       "      <td>-0.011636</td>\n",
       "      <td>-0.009773</td>\n",
       "      <td>-0.008029</td>\n",
       "      <td>-0.007076</td>\n",
       "      <td>-0.006350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pct.drive.3hrs</th>\n",
       "      <td>-0.008026</td>\n",
       "      <td>0.025463</td>\n",
       "      <td>-0.012991</td>\n",
       "      <td>-0.012925</td>\n",
       "      <td>-0.023881</td>\n",
       "      <td>-0.021698</td>\n",
       "      <td>0.009507</td>\n",
       "      <td>0.020529</td>\n",
       "      <td>0.033998</td>\n",
       "      <td>0.740204</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.003736</td>\n",
       "      <td>-0.003587</td>\n",
       "      <td>-0.003499</td>\n",
       "      <td>-0.003323</td>\n",
       "      <td>-0.003403</td>\n",
       "      <td>-0.005214</td>\n",
       "      <td>-0.004984</td>\n",
       "      <td>-0.004625</td>\n",
       "      <td>-0.004252</td>\n",
       "      <td>-0.003939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pct.drive.4hrs</th>\n",
       "      <td>-0.012135</td>\n",
       "      <td>0.000307</td>\n",
       "      <td>-0.004247</td>\n",
       "      <td>0.000128</td>\n",
       "      <td>-0.013618</td>\n",
       "      <td>-0.017200</td>\n",
       "      <td>0.003362</td>\n",
       "      <td>0.009882</td>\n",
       "      <td>0.017559</td>\n",
       "      <td>0.555754</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001753</td>\n",
       "      <td>-0.001809</td>\n",
       "      <td>-0.001840</td>\n",
       "      <td>-0.001718</td>\n",
       "      <td>-0.001632</td>\n",
       "      <td>-0.002746</td>\n",
       "      <td>-0.002722</td>\n",
       "      <td>-0.002413</td>\n",
       "      <td>-0.002164</td>\n",
       "      <td>-0.001948</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pct.drive.wkday</th>\n",
       "      <td>-0.030240</td>\n",
       "      <td>-0.048166</td>\n",
       "      <td>0.292165</td>\n",
       "      <td>0.463301</td>\n",
       "      <td>0.462690</td>\n",
       "      <td>0.427618</td>\n",
       "      <td>0.200039</td>\n",
       "      <td>-0.818881</td>\n",
       "      <td>-0.791656</td>\n",
       "      <td>-0.059520</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.015327</td>\n",
       "      <td>-0.015973</td>\n",
       "      <td>-0.016367</td>\n",
       "      <td>-0.016699</td>\n",
       "      <td>-0.016080</td>\n",
       "      <td>0.001022</td>\n",
       "      <td>0.000007</td>\n",
       "      <td>-0.000680</td>\n",
       "      <td>-0.000403</td>\n",
       "      <td>0.000838</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pct.drive.wkend</th>\n",
       "      <td>0.030240</td>\n",
       "      <td>0.048166</td>\n",
       "      <td>-0.292165</td>\n",
       "      <td>-0.463301</td>\n",
       "      <td>-0.462690</td>\n",
       "      <td>-0.427618</td>\n",
       "      <td>-0.200039</td>\n",
       "      <td>0.818881</td>\n",
       "      <td>0.791656</td>\n",
       "      <td>0.059520</td>\n",
       "      <td>...</td>\n",
       "      <td>0.015327</td>\n",
       "      <td>0.015973</td>\n",
       "      <td>0.016367</td>\n",
       "      <td>0.016699</td>\n",
       "      <td>0.016080</td>\n",
       "      <td>-0.001022</td>\n",
       "      <td>-0.000007</td>\n",
       "      <td>0.000680</td>\n",
       "      <td>0.000403</td>\n",
       "      <td>-0.000838</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pct.drive.rush am</th>\n",
       "      <td>0.041833</td>\n",
       "      <td>0.149190</td>\n",
       "      <td>0.062875</td>\n",
       "      <td>0.049636</td>\n",
       "      <td>0.037585</td>\n",
       "      <td>0.041138</td>\n",
       "      <td>0.027045</td>\n",
       "      <td>-0.077202</td>\n",
       "      <td>-0.113189</td>\n",
       "      <td>-0.073045</td>\n",
       "      <td>...</td>\n",
       "      <td>0.008618</td>\n",
       "      <td>0.008310</td>\n",
       "      <td>0.008479</td>\n",
       "      <td>0.008596</td>\n",
       "      <td>0.008000</td>\n",
       "      <td>0.000629</td>\n",
       "      <td>-0.001440</td>\n",
       "      <td>-0.002341</td>\n",
       "      <td>-0.002958</td>\n",
       "      <td>-0.003451</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pct.drive.rush pm</th>\n",
       "      <td>0.031206</td>\n",
       "      <td>0.133927</td>\n",
       "      <td>0.003427</td>\n",
       "      <td>0.008153</td>\n",
       "      <td>0.002232</td>\n",
       "      <td>0.016157</td>\n",
       "      <td>0.025379</td>\n",
       "      <td>-0.003751</td>\n",
       "      <td>-0.045366</td>\n",
       "      <td>-0.020441</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000483</td>\n",
       "      <td>-0.000237</td>\n",
       "      <td>-0.000555</td>\n",
       "      <td>-0.000596</td>\n",
       "      <td>-0.000986</td>\n",
       "      <td>0.001987</td>\n",
       "      <td>0.000093</td>\n",
       "      <td>-0.000198</td>\n",
       "      <td>-0.000188</td>\n",
       "      <td>0.000044</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Avgdays.week</th>\n",
       "      <td>0.028967</td>\n",
       "      <td>0.311302</td>\n",
       "      <td>0.024599</td>\n",
       "      <td>-0.038503</td>\n",
       "      <td>-0.045978</td>\n",
       "      <td>-0.041857</td>\n",
       "      <td>-0.025395</td>\n",
       "      <td>0.045515</td>\n",
       "      <td>0.067831</td>\n",
       "      <td>-0.071091</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000216</td>\n",
       "      <td>-0.002831</td>\n",
       "      <td>-0.005105</td>\n",
       "      <td>-0.005497</td>\n",
       "      <td>-0.005520</td>\n",
       "      <td>0.006659</td>\n",
       "      <td>0.004607</td>\n",
       "      <td>0.002092</td>\n",
       "      <td>0.001277</td>\n",
       "      <td>0.001941</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Accel.06miles</th>\n",
       "      <td>-0.054877</td>\n",
       "      <td>-0.135776</td>\n",
       "      <td>0.029286</td>\n",
       "      <td>0.019386</td>\n",
       "      <td>-0.005993</td>\n",
       "      <td>-0.001169</td>\n",
       "      <td>-0.006718</td>\n",
       "      <td>-0.014636</td>\n",
       "      <td>-0.015802</td>\n",
       "      <td>-0.100309</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002559</td>\n",
       "      <td>-0.001116</td>\n",
       "      <td>-0.003945</td>\n",
       "      <td>-0.004538</td>\n",
       "      <td>-0.004897</td>\n",
       "      <td>0.017505</td>\n",
       "      <td>0.011087</td>\n",
       "      <td>0.005930</td>\n",
       "      <td>0.003321</td>\n",
       "      <td>0.001501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Accel.08miles</th>\n",
       "      <td>-0.042181</td>\n",
       "      <td>-0.069124</td>\n",
       "      <td>0.043344</td>\n",
       "      <td>0.016578</td>\n",
       "      <td>-0.007657</td>\n",
       "      <td>-0.006103</td>\n",
       "      <td>-0.009079</td>\n",
       "      <td>-0.011057</td>\n",
       "      <td>-0.021058</td>\n",
       "      <td>-0.040135</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002927</td>\n",
       "      <td>0.001452</td>\n",
       "      <td>0.000044</td>\n",
       "      <td>-0.000330</td>\n",
       "      <td>-0.000665</td>\n",
       "      <td>0.004844</td>\n",
       "      <td>0.003142</td>\n",
       "      <td>0.001400</td>\n",
       "      <td>0.000258</td>\n",
       "      <td>-0.000697</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Accel.09miles</th>\n",
       "      <td>-0.031396</td>\n",
       "      <td>-0.044721</td>\n",
       "      <td>0.042988</td>\n",
       "      <td>0.013332</td>\n",
       "      <td>-0.003161</td>\n",
       "      <td>-0.007824</td>\n",
       "      <td>-0.002576</td>\n",
       "      <td>-0.011158</td>\n",
       "      <td>-0.025735</td>\n",
       "      <td>-0.020937</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002342</td>\n",
       "      <td>0.001393</td>\n",
       "      <td>0.000018</td>\n",
       "      <td>-0.000415</td>\n",
       "      <td>-0.000827</td>\n",
       "      <td>0.002348</td>\n",
       "      <td>0.001560</td>\n",
       "      <td>0.000645</td>\n",
       "      <td>0.000218</td>\n",
       "      <td>-0.000465</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Accel.11miles</th>\n",
       "      <td>-0.024662</td>\n",
       "      <td>-0.033481</td>\n",
       "      <td>0.024143</td>\n",
       "      <td>0.021524</td>\n",
       "      <td>0.003981</td>\n",
       "      <td>-0.011678</td>\n",
       "      <td>-0.001840</td>\n",
       "      <td>-0.005965</td>\n",
       "      <td>-0.026492</td>\n",
       "      <td>-0.012281</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001260</td>\n",
       "      <td>0.000788</td>\n",
       "      <td>-0.000093</td>\n",
       "      <td>-0.000371</td>\n",
       "      <td>-0.000732</td>\n",
       "      <td>0.001984</td>\n",
       "      <td>0.001587</td>\n",
       "      <td>0.001062</td>\n",
       "      <td>0.000746</td>\n",
       "      <td>0.000247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Accel.12miles</th>\n",
       "      <td>-0.020303</td>\n",
       "      <td>-0.026674</td>\n",
       "      <td>0.010031</td>\n",
       "      <td>0.013566</td>\n",
       "      <td>0.002828</td>\n",
       "      <td>-0.006413</td>\n",
       "      <td>0.001789</td>\n",
       "      <td>0.001543</td>\n",
       "      <td>-0.021601</td>\n",
       "      <td>-0.012335</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000389</td>\n",
       "      <td>0.000240</td>\n",
       "      <td>-0.000240</td>\n",
       "      <td>-0.000316</td>\n",
       "      <td>-0.000631</td>\n",
       "      <td>0.001601</td>\n",
       "      <td>0.001357</td>\n",
       "      <td>0.000950</td>\n",
       "      <td>0.000730</td>\n",
       "      <td>0.000430</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Accel.14miles</th>\n",
       "      <td>-0.016064</td>\n",
       "      <td>-0.022071</td>\n",
       "      <td>0.009596</td>\n",
       "      <td>0.004496</td>\n",
       "      <td>-0.001584</td>\n",
       "      <td>-0.002880</td>\n",
       "      <td>-0.002811</td>\n",
       "      <td>0.010053</td>\n",
       "      <td>-0.016793</td>\n",
       "      <td>-0.010486</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000319</td>\n",
       "      <td>0.000234</td>\n",
       "      <td>-0.000131</td>\n",
       "      <td>-0.000176</td>\n",
       "      <td>-0.000463</td>\n",
       "      <td>0.001820</td>\n",
       "      <td>0.001624</td>\n",
       "      <td>0.001377</td>\n",
       "      <td>0.001107</td>\n",
       "      <td>0.000773</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Brake.06miles</th>\n",
       "      <td>-0.065983</td>\n",
       "      <td>-0.140038</td>\n",
       "      <td>0.012922</td>\n",
       "      <td>0.025161</td>\n",
       "      <td>-0.004544</td>\n",
       "      <td>-0.004793</td>\n",
       "      <td>-0.012288</td>\n",
       "      <td>-0.014214</td>\n",
       "      <td>-0.000889</td>\n",
       "      <td>-0.110324</td>\n",
       "      <td>...</td>\n",
       "      <td>0.011223</td>\n",
       "      <td>0.007314</td>\n",
       "      <td>0.004298</td>\n",
       "      <td>0.003248</td>\n",
       "      <td>0.002613</td>\n",
       "      <td>0.016478</td>\n",
       "      <td>0.008000</td>\n",
       "      <td>0.001332</td>\n",
       "      <td>-0.001891</td>\n",
       "      <td>-0.004607</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Brake.08miles</th>\n",
       "      <td>-0.050147</td>\n",
       "      <td>-0.086884</td>\n",
       "      <td>0.020331</td>\n",
       "      <td>0.029203</td>\n",
       "      <td>-0.003170</td>\n",
       "      <td>-0.013876</td>\n",
       "      <td>-0.011861</td>\n",
       "      <td>-0.004628</td>\n",
       "      <td>-0.014831</td>\n",
       "      <td>-0.054798</td>\n",
       "      <td>...</td>\n",
       "      <td>0.007222</td>\n",
       "      <td>0.005332</td>\n",
       "      <td>0.003502</td>\n",
       "      <td>0.002817</td>\n",
       "      <td>0.002354</td>\n",
       "      <td>0.009295</td>\n",
       "      <td>0.004969</td>\n",
       "      <td>0.001524</td>\n",
       "      <td>-0.000559</td>\n",
       "      <td>-0.002314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Brake.09miles</th>\n",
       "      <td>-0.034407</td>\n",
       "      <td>-0.051973</td>\n",
       "      <td>0.017390</td>\n",
       "      <td>0.028551</td>\n",
       "      <td>-0.001298</td>\n",
       "      <td>-0.015011</td>\n",
       "      <td>-0.007510</td>\n",
       "      <td>-0.000810</td>\n",
       "      <td>-0.020225</td>\n",
       "      <td>-0.025862</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002583</td>\n",
       "      <td>0.001863</td>\n",
       "      <td>0.000950</td>\n",
       "      <td>0.000690</td>\n",
       "      <td>0.000367</td>\n",
       "      <td>0.003675</td>\n",
       "      <td>0.002206</td>\n",
       "      <td>0.000919</td>\n",
       "      <td>-0.000175</td>\n",
       "      <td>-0.000994</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Brake.11miles</th>\n",
       "      <td>-0.023414</td>\n",
       "      <td>-0.033626</td>\n",
       "      <td>0.017509</td>\n",
       "      <td>0.014039</td>\n",
       "      <td>-0.000223</td>\n",
       "      <td>-0.013134</td>\n",
       "      <td>-0.003043</td>\n",
       "      <td>0.003494</td>\n",
       "      <td>-0.017604</td>\n",
       "      <td>-0.018416</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001206</td>\n",
       "      <td>0.000924</td>\n",
       "      <td>0.000416</td>\n",
       "      <td>0.000339</td>\n",
       "      <td>0.000059</td>\n",
       "      <td>0.001769</td>\n",
       "      <td>0.001160</td>\n",
       "      <td>0.000531</td>\n",
       "      <td>0.000118</td>\n",
       "      <td>-0.000303</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Brake.12miles</th>\n",
       "      <td>-0.020023</td>\n",
       "      <td>-0.027621</td>\n",
       "      <td>0.011795</td>\n",
       "      <td>0.006769</td>\n",
       "      <td>-0.000731</td>\n",
       "      <td>-0.007206</td>\n",
       "      <td>-0.001715</td>\n",
       "      <td>0.008102</td>\n",
       "      <td>-0.016648</td>\n",
       "      <td>-0.012817</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000175</td>\n",
       "      <td>0.000072</td>\n",
       "      <td>-0.000271</td>\n",
       "      <td>-0.000272</td>\n",
       "      <td>-0.000522</td>\n",
       "      <td>0.001544</td>\n",
       "      <td>0.001323</td>\n",
       "      <td>0.001061</td>\n",
       "      <td>0.000808</td>\n",
       "      <td>0.000476</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Brake.14miles</th>\n",
       "      <td>-0.015839</td>\n",
       "      <td>-0.022114</td>\n",
       "      <td>0.005773</td>\n",
       "      <td>0.001154</td>\n",
       "      <td>0.000344</td>\n",
       "      <td>-0.003780</td>\n",
       "      <td>-0.002578</td>\n",
       "      <td>0.012478</td>\n",
       "      <td>-0.014027</td>\n",
       "      <td>-0.010296</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000127</td>\n",
       "      <td>0.000049</td>\n",
       "      <td>-0.000331</td>\n",
       "      <td>-0.000371</td>\n",
       "      <td>-0.000659</td>\n",
       "      <td>0.001622</td>\n",
       "      <td>0.001493</td>\n",
       "      <td>0.001331</td>\n",
       "      <td>0.001113</td>\n",
       "      <td>0.000820</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Left.turn.intensity08</th>\n",
       "      <td>0.007252</td>\n",
       "      <td>0.006657</td>\n",
       "      <td>0.004339</td>\n",
       "      <td>-0.008081</td>\n",
       "      <td>-0.013470</td>\n",
       "      <td>-0.006904</td>\n",
       "      <td>-0.003448</td>\n",
       "      <td>0.005508</td>\n",
       "      <td>0.019343</td>\n",
       "      <td>-0.000742</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.993244</td>\n",
       "      <td>0.959062</td>\n",
       "      <td>0.926233</td>\n",
       "      <td>0.904698</td>\n",
       "      <td>0.013740</td>\n",
       "      <td>0.013884</td>\n",
       "      <td>0.013555</td>\n",
       "      <td>0.012358</td>\n",
       "      <td>0.010880</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Left.turn.intensity09</th>\n",
       "      <td>0.006252</td>\n",
       "      <td>0.006657</td>\n",
       "      <td>0.003263</td>\n",
       "      <td>-0.008334</td>\n",
       "      <td>-0.013760</td>\n",
       "      <td>-0.006701</td>\n",
       "      <td>-0.003267</td>\n",
       "      <td>0.006214</td>\n",
       "      <td>0.019677</td>\n",
       "      <td>0.000549</td>\n",
       "      <td>...</td>\n",
       "      <td>0.993244</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.980828</td>\n",
       "      <td>0.953834</td>\n",
       "      <td>0.935047</td>\n",
       "      <td>0.013227</td>\n",
       "      <td>0.013616</td>\n",
       "      <td>0.013476</td>\n",
       "      <td>0.012310</td>\n",
       "      <td>0.010824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Left.turn.intensity10</th>\n",
       "      <td>0.005178</td>\n",
       "      <td>0.006823</td>\n",
       "      <td>0.001951</td>\n",
       "      <td>-0.007460</td>\n",
       "      <td>-0.013990</td>\n",
       "      <td>-0.006755</td>\n",
       "      <td>-0.003476</td>\n",
       "      <td>0.007154</td>\n",
       "      <td>0.019407</td>\n",
       "      <td>0.001888</td>\n",
       "      <td>...</td>\n",
       "      <td>0.959062</td>\n",
       "      <td>0.980828</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.991786</td>\n",
       "      <td>0.980385</td>\n",
       "      <td>0.011908</td>\n",
       "      <td>0.012377</td>\n",
       "      <td>0.012245</td>\n",
       "      <td>0.011057</td>\n",
       "      <td>0.009541</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Left.turn.intensity11</th>\n",
       "      <td>0.004885</td>\n",
       "      <td>0.006897</td>\n",
       "      <td>0.001249</td>\n",
       "      <td>-0.006612</td>\n",
       "      <td>-0.014831</td>\n",
       "      <td>-0.006577</td>\n",
       "      <td>-0.003762</td>\n",
       "      <td>0.007741</td>\n",
       "      <td>0.019419</td>\n",
       "      <td>0.002464</td>\n",
       "      <td>...</td>\n",
       "      <td>0.926233</td>\n",
       "      <td>0.953834</td>\n",
       "      <td>0.991786</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.996511</td>\n",
       "      <td>0.010827</td>\n",
       "      <td>0.011292</td>\n",
       "      <td>0.011153</td>\n",
       "      <td>0.009993</td>\n",
       "      <td>0.008504</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Left.turn.intensity12</th>\n",
       "      <td>0.004638</td>\n",
       "      <td>0.006824</td>\n",
       "      <td>0.000957</td>\n",
       "      <td>-0.006025</td>\n",
       "      <td>-0.014677</td>\n",
       "      <td>-0.006016</td>\n",
       "      <td>-0.003720</td>\n",
       "      <td>0.007254</td>\n",
       "      <td>0.018955</td>\n",
       "      <td>0.002637</td>\n",
       "      <td>...</td>\n",
       "      <td>0.904698</td>\n",
       "      <td>0.935047</td>\n",
       "      <td>0.980385</td>\n",
       "      <td>0.996511</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.010027</td>\n",
       "      <td>0.010487</td>\n",
       "      <td>0.010374</td>\n",
       "      <td>0.009266</td>\n",
       "      <td>0.007818</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Right.turn.intensity08</th>\n",
       "      <td>0.007170</td>\n",
       "      <td>0.001672</td>\n",
       "      <td>-0.006080</td>\n",
       "      <td>0.006337</td>\n",
       "      <td>-0.003246</td>\n",
       "      <td>0.002927</td>\n",
       "      <td>0.001596</td>\n",
       "      <td>0.001102</td>\n",
       "      <td>-0.003101</td>\n",
       "      <td>-0.011636</td>\n",
       "      <td>...</td>\n",
       "      <td>0.013740</td>\n",
       "      <td>0.013227</td>\n",
       "      <td>0.011908</td>\n",
       "      <td>0.010827</td>\n",
       "      <td>0.010027</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.981433</td>\n",
       "      <td>0.904166</td>\n",
       "      <td>0.853630</td>\n",
       "      <td>0.816107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Right.turn.intensity09</th>\n",
       "      <td>0.003169</td>\n",
       "      <td>0.001321</td>\n",
       "      <td>-0.006665</td>\n",
       "      <td>0.006414</td>\n",
       "      <td>-0.002822</td>\n",
       "      <td>0.001690</td>\n",
       "      <td>0.000903</td>\n",
       "      <td>0.002181</td>\n",
       "      <td>-0.002491</td>\n",
       "      <td>-0.009773</td>\n",
       "      <td>...</td>\n",
       "      <td>0.013884</td>\n",
       "      <td>0.013616</td>\n",
       "      <td>0.012377</td>\n",
       "      <td>0.011292</td>\n",
       "      <td>0.010487</td>\n",
       "      <td>0.981433</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.956202</td>\n",
       "      <td>0.913241</td>\n",
       "      <td>0.877553</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Right.turn.intensity10</th>\n",
       "      <td>-0.000133</td>\n",
       "      <td>0.000804</td>\n",
       "      <td>-0.006420</td>\n",
       "      <td>0.005965</td>\n",
       "      <td>-0.001349</td>\n",
       "      <td>-0.001069</td>\n",
       "      <td>0.001071</td>\n",
       "      <td>0.003638</td>\n",
       "      <td>-0.002832</td>\n",
       "      <td>-0.008029</td>\n",
       "      <td>...</td>\n",
       "      <td>0.013555</td>\n",
       "      <td>0.013476</td>\n",
       "      <td>0.012245</td>\n",
       "      <td>0.011153</td>\n",
       "      <td>0.010374</td>\n",
       "      <td>0.904166</td>\n",
       "      <td>0.956202</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.988782</td>\n",
       "      <td>0.964129</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Right.turn.intensity11</th>\n",
       "      <td>-0.001677</td>\n",
       "      <td>0.000206</td>\n",
       "      <td>-0.006125</td>\n",
       "      <td>0.005244</td>\n",
       "      <td>-0.000455</td>\n",
       "      <td>-0.001702</td>\n",
       "      <td>0.001786</td>\n",
       "      <td>0.003606</td>\n",
       "      <td>-0.003224</td>\n",
       "      <td>-0.007076</td>\n",
       "      <td>...</td>\n",
       "      <td>0.012358</td>\n",
       "      <td>0.012310</td>\n",
       "      <td>0.011057</td>\n",
       "      <td>0.009993</td>\n",
       "      <td>0.009266</td>\n",
       "      <td>0.853630</td>\n",
       "      <td>0.913241</td>\n",
       "      <td>0.988782</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.990576</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Right.turn.intensity12</th>\n",
       "      <td>-0.002218</td>\n",
       "      <td>0.000124</td>\n",
       "      <td>-0.004985</td>\n",
       "      <td>0.003718</td>\n",
       "      <td>0.000952</td>\n",
       "      <td>-0.001492</td>\n",
       "      <td>0.003028</td>\n",
       "      <td>0.001909</td>\n",
       "      <td>-0.003474</td>\n",
       "      <td>-0.006350</td>\n",
       "      <td>...</td>\n",
       "      <td>0.010880</td>\n",
       "      <td>0.010824</td>\n",
       "      <td>0.009541</td>\n",
       "      <td>0.008504</td>\n",
       "      <td>0.007818</td>\n",
       "      <td>0.816107</td>\n",
       "      <td>0.877553</td>\n",
       "      <td>0.964129</td>\n",
       "      <td>0.990576</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>39 rows × 39 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                        Annual.pct.driven  Total.miles.driven  Pct.drive.mon  \\\n",
       "Annual.pct.driven                1.000000            0.704461      -0.031258   \n",
       "Total.miles.driven               0.704461            1.000000      -0.018220   \n",
       "Pct.drive.mon                   -0.031258           -0.018220       1.000000   \n",
       "Pct.drive.tue                   -0.079482           -0.076961       0.037895   \n",
       "Pct.drive.wed                    0.029752           -0.000104      -0.104962   \n",
       "Pct.drive.thr                    0.019441            0.003514      -0.157207   \n",
       "Pct.drive.fri                    0.009530            0.006809      -0.200075   \n",
       "Pct.drive.sat                    0.027850            0.038366      -0.283430   \n",
       "Pct.drive.sun                    0.020809            0.039281      -0.184472   \n",
       "Pct.drive.2hrs                   0.009092            0.101168      -0.028253   \n",
       "Pct.drive.3hrs                  -0.008026            0.025463      -0.012991   \n",
       "Pct.drive.4hrs                  -0.012135            0.000307      -0.004247   \n",
       "Pct.drive.wkday                 -0.030240           -0.048166       0.292165   \n",
       "Pct.drive.wkend                  0.030240            0.048166      -0.292165   \n",
       "Pct.drive.rush am                0.041833            0.149190       0.062875   \n",
       "Pct.drive.rush pm                0.031206            0.133927       0.003427   \n",
       "Avgdays.week                     0.028967            0.311302       0.024599   \n",
       "Accel.06miles                   -0.054877           -0.135776       0.029286   \n",
       "Accel.08miles                   -0.042181           -0.069124       0.043344   \n",
       "Accel.09miles                   -0.031396           -0.044721       0.042988   \n",
       "Accel.11miles                   -0.024662           -0.033481       0.024143   \n",
       "Accel.12miles                   -0.020303           -0.026674       0.010031   \n",
       "Accel.14miles                   -0.016064           -0.022071       0.009596   \n",
       "Brake.06miles                   -0.065983           -0.140038       0.012922   \n",
       "Brake.08miles                   -0.050147           -0.086884       0.020331   \n",
       "Brake.09miles                   -0.034407           -0.051973       0.017390   \n",
       "Brake.11miles                   -0.023414           -0.033626       0.017509   \n",
       "Brake.12miles                   -0.020023           -0.027621       0.011795   \n",
       "Brake.14miles                   -0.015839           -0.022114       0.005773   \n",
       "Left.turn.intensity08            0.007252            0.006657       0.004339   \n",
       "Left.turn.intensity09            0.006252            0.006657       0.003263   \n",
       "Left.turn.intensity10            0.005178            0.006823       0.001951   \n",
       "Left.turn.intensity11            0.004885            0.006897       0.001249   \n",
       "Left.turn.intensity12            0.004638            0.006824       0.000957   \n",
       "Right.turn.intensity08           0.007170            0.001672      -0.006080   \n",
       "Right.turn.intensity09           0.003169            0.001321      -0.006665   \n",
       "Right.turn.intensity10          -0.000133            0.000804      -0.006420   \n",
       "Right.turn.intensity11          -0.001677            0.000206      -0.006125   \n",
       "Right.turn.intensity12          -0.002218            0.000124      -0.004985   \n",
       "\n",
       "                        Pct.drive.tue  Pct.drive.wed  Pct.drive.thr  \\\n",
       "Annual.pct.driven           -0.079482       0.029752       0.019441   \n",
       "Total.miles.driven          -0.076961      -0.000104       0.003514   \n",
       "Pct.drive.mon                0.037895      -0.104962      -0.157207   \n",
       "Pct.drive.tue                1.000000       0.030840      -0.068995   \n",
       "Pct.drive.wed                0.030840       1.000000       0.072284   \n",
       "Pct.drive.thr               -0.068995       0.072284       1.000000   \n",
       "Pct.drive.fri               -0.207812      -0.145688      -0.047950   \n",
       "Pct.drive.sat               -0.388534      -0.379189      -0.348040   \n",
       "Pct.drive.sun               -0.357595      -0.366773      -0.341694   \n",
       "Pct.drive.2hrs              -0.041535      -0.031529      -0.019974   \n",
       "Pct.drive.3hrs              -0.012925      -0.023881      -0.021698   \n",
       "Pct.drive.4hrs               0.000128      -0.013618      -0.017200   \n",
       "Pct.drive.wkday              0.463301       0.462690       0.427618   \n",
       "Pct.drive.wkend             -0.463301      -0.462690      -0.427618   \n",
       "Pct.drive.rush am            0.049636       0.037585       0.041138   \n",
       "Pct.drive.rush pm            0.008153       0.002232       0.016157   \n",
       "Avgdays.week                -0.038503      -0.045978      -0.041857   \n",
       "Accel.06miles                0.019386      -0.005993      -0.001169   \n",
       "Accel.08miles                0.016578      -0.007657      -0.006103   \n",
       "Accel.09miles                0.013332      -0.003161      -0.007824   \n",
       "Accel.11miles                0.021524       0.003981      -0.011678   \n",
       "Accel.12miles                0.013566       0.002828      -0.006413   \n",
       "Accel.14miles                0.004496      -0.001584      -0.002880   \n",
       "Brake.06miles                0.025161      -0.004544      -0.004793   \n",
       "Brake.08miles                0.029203      -0.003170      -0.013876   \n",
       "Brake.09miles                0.028551      -0.001298      -0.015011   \n",
       "Brake.11miles                0.014039      -0.000223      -0.013134   \n",
       "Brake.12miles                0.006769      -0.000731      -0.007206   \n",
       "Brake.14miles                0.001154       0.000344      -0.003780   \n",
       "Left.turn.intensity08       -0.008081      -0.013470      -0.006904   \n",
       "Left.turn.intensity09       -0.008334      -0.013760      -0.006701   \n",
       "Left.turn.intensity10       -0.007460      -0.013990      -0.006755   \n",
       "Left.turn.intensity11       -0.006612      -0.014831      -0.006577   \n",
       "Left.turn.intensity12       -0.006025      -0.014677      -0.006016   \n",
       "Right.turn.intensity08       0.006337      -0.003246       0.002927   \n",
       "Right.turn.intensity09       0.006414      -0.002822       0.001690   \n",
       "Right.turn.intensity10       0.005965      -0.001349      -0.001069   \n",
       "Right.turn.intensity11       0.005244      -0.000455      -0.001702   \n",
       "Right.turn.intensity12       0.003718       0.000952      -0.001492   \n",
       "\n",
       "                        Pct.drive.fri  Pct.drive.sat  Pct.drive.sun  \\\n",
       "Annual.pct.driven            0.009530       0.027850       0.020809   \n",
       "Total.miles.driven           0.006809       0.038366       0.039281   \n",
       "Pct.drive.mon               -0.200075      -0.283430      -0.184472   \n",
       "Pct.drive.tue               -0.207812      -0.388534      -0.357595   \n",
       "Pct.drive.wed               -0.145688      -0.379189      -0.366773   \n",
       "Pct.drive.thr               -0.047950      -0.348040      -0.341694   \n",
       "Pct.drive.fri                1.000000      -0.113842      -0.212055   \n",
       "Pct.drive.sat               -0.113842       1.000000       0.298854   \n",
       "Pct.drive.sun               -0.212055       0.298854       1.000000   \n",
       "Pct.drive.2hrs               0.012612       0.044917       0.051049   \n",
       "Pct.drive.3hrs               0.009507       0.020529       0.033998   \n",
       "Pct.drive.4hrs               0.003362       0.009882       0.017559   \n",
       "Pct.drive.wkday              0.200039      -0.818881      -0.791656   \n",
       "Pct.drive.wkend             -0.200039       0.818881       0.791656   \n",
       "Pct.drive.rush am            0.027045      -0.077202      -0.113189   \n",
       "Pct.drive.rush pm            0.025379      -0.003751      -0.045366   \n",
       "Avgdays.week                -0.025395       0.045515       0.067831   \n",
       "Accel.06miles               -0.006718      -0.014636      -0.015802   \n",
       "Accel.08miles               -0.009079      -0.011057      -0.021058   \n",
       "Accel.09miles               -0.002576      -0.011158      -0.025735   \n",
       "Accel.11miles               -0.001840      -0.005965      -0.026492   \n",
       "Accel.12miles                0.001789       0.001543      -0.021601   \n",
       "Accel.14miles               -0.002811       0.010053      -0.016793   \n",
       "Brake.06miles               -0.012288      -0.014214      -0.000889   \n",
       "Brake.08miles               -0.011861      -0.004628      -0.014831   \n",
       "Brake.09miles               -0.007510      -0.000810      -0.020225   \n",
       "Brake.11miles               -0.003043       0.003494      -0.017604   \n",
       "Brake.12miles               -0.001715       0.008102      -0.016648   \n",
       "Brake.14miles               -0.002578       0.012478      -0.014027   \n",
       "Left.turn.intensity08       -0.003448       0.005508       0.019343   \n",
       "Left.turn.intensity09       -0.003267       0.006214       0.019677   \n",
       "Left.turn.intensity10       -0.003476       0.007154       0.019407   \n",
       "Left.turn.intensity11       -0.003762       0.007741       0.019419   \n",
       "Left.turn.intensity12       -0.003720       0.007254       0.018955   \n",
       "Right.turn.intensity08       0.001596       0.001102      -0.003101   \n",
       "Right.turn.intensity09       0.000903       0.002181      -0.002491   \n",
       "Right.turn.intensity10       0.001071       0.003638      -0.002832   \n",
       "Right.turn.intensity11       0.001786       0.003606      -0.003224   \n",
       "Right.turn.intensity12       0.003028       0.001909      -0.003474   \n",
       "\n",
       "                        Pct.drive.2hrs  ...  Left.turn.intensity08  \\\n",
       "Annual.pct.driven             0.009092  ...               0.007252   \n",
       "Total.miles.driven            0.101168  ...               0.006657   \n",
       "Pct.drive.mon                -0.028253  ...               0.004339   \n",
       "Pct.drive.tue                -0.041535  ...              -0.008081   \n",
       "Pct.drive.wed                -0.031529  ...              -0.013470   \n",
       "Pct.drive.thr                -0.019974  ...              -0.006904   \n",
       "Pct.drive.fri                 0.012612  ...              -0.003448   \n",
       "Pct.drive.sat                 0.044917  ...               0.005508   \n",
       "Pct.drive.sun                 0.051049  ...               0.019343   \n",
       "Pct.drive.2hrs                1.000000  ...              -0.000742   \n",
       "Pct.drive.3hrs                0.740204  ...              -0.003736   \n",
       "Pct.drive.4hrs                0.555754  ...              -0.001753   \n",
       "Pct.drive.wkday              -0.059520  ...              -0.015327   \n",
       "Pct.drive.wkend               0.059520  ...               0.015327   \n",
       "Pct.drive.rush am            -0.073045  ...               0.008618   \n",
       "Pct.drive.rush pm            -0.020441  ...               0.000483   \n",
       "Avgdays.week                 -0.071091  ...              -0.000216   \n",
       "Accel.06miles                -0.100309  ...               0.002559   \n",
       "Accel.08miles                -0.040135  ...               0.002927   \n",
       "Accel.09miles                -0.020937  ...               0.002342   \n",
       "Accel.11miles                -0.012281  ...               0.001260   \n",
       "Accel.12miles                -0.012335  ...               0.000389   \n",
       "Accel.14miles                -0.010486  ...               0.000319   \n",
       "Brake.06miles                -0.110324  ...               0.011223   \n",
       "Brake.08miles                -0.054798  ...               0.007222   \n",
       "Brake.09miles                -0.025862  ...               0.002583   \n",
       "Brake.11miles                -0.018416  ...               0.001206   \n",
       "Brake.12miles                -0.012817  ...               0.000175   \n",
       "Brake.14miles                -0.010296  ...               0.000127   \n",
       "Left.turn.intensity08        -0.000742  ...               1.000000   \n",
       "Left.turn.intensity09         0.000549  ...               0.993244   \n",
       "Left.turn.intensity10         0.001888  ...               0.959062   \n",
       "Left.turn.intensity11         0.002464  ...               0.926233   \n",
       "Left.turn.intensity12         0.002637  ...               0.904698   \n",
       "Right.turn.intensity08       -0.011636  ...               0.013740   \n",
       "Right.turn.intensity09       -0.009773  ...               0.013884   \n",
       "Right.turn.intensity10       -0.008029  ...               0.013555   \n",
       "Right.turn.intensity11       -0.007076  ...               0.012358   \n",
       "Right.turn.intensity12       -0.006350  ...               0.010880   \n",
       "\n",
       "                        Left.turn.intensity09  Left.turn.intensity10  \\\n",
       "Annual.pct.driven                    0.006252               0.005178   \n",
       "Total.miles.driven                   0.006657               0.006823   \n",
       "Pct.drive.mon                        0.003263               0.001951   \n",
       "Pct.drive.tue                       -0.008334              -0.007460   \n",
       "Pct.drive.wed                       -0.013760              -0.013990   \n",
       "Pct.drive.thr                       -0.006701              -0.006755   \n",
       "Pct.drive.fri                       -0.003267              -0.003476   \n",
       "Pct.drive.sat                        0.006214               0.007154   \n",
       "Pct.drive.sun                        0.019677               0.019407   \n",
       "Pct.drive.2hrs                       0.000549               0.001888   \n",
       "Pct.drive.3hrs                      -0.003587              -0.003499   \n",
       "Pct.drive.4hrs                      -0.001809              -0.001840   \n",
       "Pct.drive.wkday                     -0.015973              -0.016367   \n",
       "Pct.drive.wkend                      0.015973               0.016367   \n",
       "Pct.drive.rush am                    0.008310               0.008479   \n",
       "Pct.drive.rush pm                   -0.000237              -0.000555   \n",
       "Avgdays.week                        -0.002831              -0.005105   \n",
       "Accel.06miles                       -0.001116              -0.003945   \n",
       "Accel.08miles                        0.001452               0.000044   \n",
       "Accel.09miles                        0.001393               0.000018   \n",
       "Accel.11miles                        0.000788              -0.000093   \n",
       "Accel.12miles                        0.000240              -0.000240   \n",
       "Accel.14miles                        0.000234              -0.000131   \n",
       "Brake.06miles                        0.007314               0.004298   \n",
       "Brake.08miles                        0.005332               0.003502   \n",
       "Brake.09miles                        0.001863               0.000950   \n",
       "Brake.11miles                        0.000924               0.000416   \n",
       "Brake.12miles                        0.000072              -0.000271   \n",
       "Brake.14miles                        0.000049              -0.000331   \n",
       "Left.turn.intensity08                0.993244               0.959062   \n",
       "Left.turn.intensity09                1.000000               0.980828   \n",
       "Left.turn.intensity10                0.980828               1.000000   \n",
       "Left.turn.intensity11                0.953834               0.991786   \n",
       "Left.turn.intensity12                0.935047               0.980385   \n",
       "Right.turn.intensity08               0.013227               0.011908   \n",
       "Right.turn.intensity09               0.013616               0.012377   \n",
       "Right.turn.intensity10               0.013476               0.012245   \n",
       "Right.turn.intensity11               0.012310               0.011057   \n",
       "Right.turn.intensity12               0.010824               0.009541   \n",
       "\n",
       "                        Left.turn.intensity11  Left.turn.intensity12  \\\n",
       "Annual.pct.driven                    0.004885               0.004638   \n",
       "Total.miles.driven                   0.006897               0.006824   \n",
       "Pct.drive.mon                        0.001249               0.000957   \n",
       "Pct.drive.tue                       -0.006612              -0.006025   \n",
       "Pct.drive.wed                       -0.014831              -0.014677   \n",
       "Pct.drive.thr                       -0.006577              -0.006016   \n",
       "Pct.drive.fri                       -0.003762              -0.003720   \n",
       "Pct.drive.sat                        0.007741               0.007254   \n",
       "Pct.drive.sun                        0.019419               0.018955   \n",
       "Pct.drive.2hrs                       0.002464               0.002637   \n",
       "Pct.drive.3hrs                      -0.003323              -0.003403   \n",
       "Pct.drive.4hrs                      -0.001718              -0.001632   \n",
       "Pct.drive.wkday                     -0.016699              -0.016080   \n",
       "Pct.drive.wkend                      0.016699               0.016080   \n",
       "Pct.drive.rush am                    0.008596               0.008000   \n",
       "Pct.drive.rush pm                   -0.000596              -0.000986   \n",
       "Avgdays.week                        -0.005497              -0.005520   \n",
       "Accel.06miles                       -0.004538              -0.004897   \n",
       "Accel.08miles                       -0.000330              -0.000665   \n",
       "Accel.09miles                       -0.000415              -0.000827   \n",
       "Accel.11miles                       -0.000371              -0.000732   \n",
       "Accel.12miles                       -0.000316              -0.000631   \n",
       "Accel.14miles                       -0.000176              -0.000463   \n",
       "Brake.06miles                        0.003248               0.002613   \n",
       "Brake.08miles                        0.002817               0.002354   \n",
       "Brake.09miles                        0.000690               0.000367   \n",
       "Brake.11miles                        0.000339               0.000059   \n",
       "Brake.12miles                       -0.000272              -0.000522   \n",
       "Brake.14miles                       -0.000371              -0.000659   \n",
       "Left.turn.intensity08                0.926233               0.904698   \n",
       "Left.turn.intensity09                0.953834               0.935047   \n",
       "Left.turn.intensity10                0.991786               0.980385   \n",
       "Left.turn.intensity11                1.000000               0.996511   \n",
       "Left.turn.intensity12                0.996511               1.000000   \n",
       "Right.turn.intensity08               0.010827               0.010027   \n",
       "Right.turn.intensity09               0.011292               0.010487   \n",
       "Right.turn.intensity10               0.011153               0.010374   \n",
       "Right.turn.intensity11               0.009993               0.009266   \n",
       "Right.turn.intensity12               0.008504               0.007818   \n",
       "\n",
       "                        Right.turn.intensity08  Right.turn.intensity09  \\\n",
       "Annual.pct.driven                     0.007170                0.003169   \n",
       "Total.miles.driven                    0.001672                0.001321   \n",
       "Pct.drive.mon                        -0.006080               -0.006665   \n",
       "Pct.drive.tue                         0.006337                0.006414   \n",
       "Pct.drive.wed                        -0.003246               -0.002822   \n",
       "Pct.drive.thr                         0.002927                0.001690   \n",
       "Pct.drive.fri                         0.001596                0.000903   \n",
       "Pct.drive.sat                         0.001102                0.002181   \n",
       "Pct.drive.sun                        -0.003101               -0.002491   \n",
       "Pct.drive.2hrs                       -0.011636               -0.009773   \n",
       "Pct.drive.3hrs                       -0.005214               -0.004984   \n",
       "Pct.drive.4hrs                       -0.002746               -0.002722   \n",
       "Pct.drive.wkday                       0.001022                0.000007   \n",
       "Pct.drive.wkend                      -0.001022               -0.000007   \n",
       "Pct.drive.rush am                     0.000629               -0.001440   \n",
       "Pct.drive.rush pm                     0.001987                0.000093   \n",
       "Avgdays.week                          0.006659                0.004607   \n",
       "Accel.06miles                         0.017505                0.011087   \n",
       "Accel.08miles                         0.004844                0.003142   \n",
       "Accel.09miles                         0.002348                0.001560   \n",
       "Accel.11miles                         0.001984                0.001587   \n",
       "Accel.12miles                         0.001601                0.001357   \n",
       "Accel.14miles                         0.001820                0.001624   \n",
       "Brake.06miles                         0.016478                0.008000   \n",
       "Brake.08miles                         0.009295                0.004969   \n",
       "Brake.09miles                         0.003675                0.002206   \n",
       "Brake.11miles                         0.001769                0.001160   \n",
       "Brake.12miles                         0.001544                0.001323   \n",
       "Brake.14miles                         0.001622                0.001493   \n",
       "Left.turn.intensity08                 0.013740                0.013884   \n",
       "Left.turn.intensity09                 0.013227                0.013616   \n",
       "Left.turn.intensity10                 0.011908                0.012377   \n",
       "Left.turn.intensity11                 0.010827                0.011292   \n",
       "Left.turn.intensity12                 0.010027                0.010487   \n",
       "Right.turn.intensity08                1.000000                0.981433   \n",
       "Right.turn.intensity09                0.981433                1.000000   \n",
       "Right.turn.intensity10                0.904166                0.956202   \n",
       "Right.turn.intensity11                0.853630                0.913241   \n",
       "Right.turn.intensity12                0.816107                0.877553   \n",
       "\n",
       "                        Right.turn.intensity10  Right.turn.intensity11  \\\n",
       "Annual.pct.driven                    -0.000133               -0.001677   \n",
       "Total.miles.driven                    0.000804                0.000206   \n",
       "Pct.drive.mon                        -0.006420               -0.006125   \n",
       "Pct.drive.tue                         0.005965                0.005244   \n",
       "Pct.drive.wed                        -0.001349               -0.000455   \n",
       "Pct.drive.thr                        -0.001069               -0.001702   \n",
       "Pct.drive.fri                         0.001071                0.001786   \n",
       "Pct.drive.sat                         0.003638                0.003606   \n",
       "Pct.drive.sun                        -0.002832               -0.003224   \n",
       "Pct.drive.2hrs                       -0.008029               -0.007076   \n",
       "Pct.drive.3hrs                       -0.004625               -0.004252   \n",
       "Pct.drive.4hrs                       -0.002413               -0.002164   \n",
       "Pct.drive.wkday                      -0.000680               -0.000403   \n",
       "Pct.drive.wkend                       0.000680                0.000403   \n",
       "Pct.drive.rush am                    -0.002341               -0.002958   \n",
       "Pct.drive.rush pm                    -0.000198               -0.000188   \n",
       "Avgdays.week                          0.002092                0.001277   \n",
       "Accel.06miles                         0.005930                0.003321   \n",
       "Accel.08miles                         0.001400                0.000258   \n",
       "Accel.09miles                         0.000645                0.000218   \n",
       "Accel.11miles                         0.001062                0.000746   \n",
       "Accel.12miles                         0.000950                0.000730   \n",
       "Accel.14miles                         0.001377                0.001107   \n",
       "Brake.06miles                         0.001332               -0.001891   \n",
       "Brake.08miles                         0.001524               -0.000559   \n",
       "Brake.09miles                         0.000919               -0.000175   \n",
       "Brake.11miles                         0.000531                0.000118   \n",
       "Brake.12miles                         0.001061                0.000808   \n",
       "Brake.14miles                         0.001331                0.001113   \n",
       "Left.turn.intensity08                 0.013555                0.012358   \n",
       "Left.turn.intensity09                 0.013476                0.012310   \n",
       "Left.turn.intensity10                 0.012245                0.011057   \n",
       "Left.turn.intensity11                 0.011153                0.009993   \n",
       "Left.turn.intensity12                 0.010374                0.009266   \n",
       "Right.turn.intensity08                0.904166                0.853630   \n",
       "Right.turn.intensity09                0.956202                0.913241   \n",
       "Right.turn.intensity10                1.000000                0.988782   \n",
       "Right.turn.intensity11                0.988782                1.000000   \n",
       "Right.turn.intensity12                0.964129                0.990576   \n",
       "\n",
       "                        Right.turn.intensity12  \n",
       "Annual.pct.driven                    -0.002218  \n",
       "Total.miles.driven                    0.000124  \n",
       "Pct.drive.mon                        -0.004985  \n",
       "Pct.drive.tue                         0.003718  \n",
       "Pct.drive.wed                         0.000952  \n",
       "Pct.drive.thr                        -0.001492  \n",
       "Pct.drive.fri                         0.003028  \n",
       "Pct.drive.sat                         0.001909  \n",
       "Pct.drive.sun                        -0.003474  \n",
       "Pct.drive.2hrs                       -0.006350  \n",
       "Pct.drive.3hrs                       -0.003939  \n",
       "Pct.drive.4hrs                       -0.001948  \n",
       "Pct.drive.wkday                       0.000838  \n",
       "Pct.drive.wkend                      -0.000838  \n",
       "Pct.drive.rush am                    -0.003451  \n",
       "Pct.drive.rush pm                     0.000044  \n",
       "Avgdays.week                          0.001941  \n",
       "Accel.06miles                         0.001501  \n",
       "Accel.08miles                        -0.000697  \n",
       "Accel.09miles                        -0.000465  \n",
       "Accel.11miles                         0.000247  \n",
       "Accel.12miles                         0.000430  \n",
       "Accel.14miles                         0.000773  \n",
       "Brake.06miles                        -0.004607  \n",
       "Brake.08miles                        -0.002314  \n",
       "Brake.09miles                        -0.000994  \n",
       "Brake.11miles                        -0.000303  \n",
       "Brake.12miles                         0.000476  \n",
       "Brake.14miles                         0.000820  \n",
       "Left.turn.intensity08                 0.010880  \n",
       "Left.turn.intensity09                 0.010824  \n",
       "Left.turn.intensity10                 0.009541  \n",
       "Left.turn.intensity11                 0.008504  \n",
       "Left.turn.intensity12                 0.007818  \n",
       "Right.turn.intensity08                0.816107  \n",
       "Right.turn.intensity09                0.877553  \n",
       "Right.turn.intensity10                0.964129  \n",
       "Right.turn.intensity11                0.990576  \n",
       "Right.turn.intensity12                1.000000  \n",
       "\n",
       "[39 rows x 39 columns]"
      ]
     },
     "execution_count": 157,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "correlation_matrix = df_telematics.corr()\n",
    "correlation_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "48b1ddea",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/df/tzlk6_xs46dbdsn2dm2mr21m0000gp/T/ipykernel_31415/3528809444.py:2: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
      "  corr = df_telematics.corr()\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot: >"
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Matrice de corrélation\n",
    "corr = df_telematics.corr()\n",
    "plt.pyplot.figure(figsize=(10, 8))\n",
    "sns.heatmap(corr, annot=False, cmap='coolwarm')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68be7b13",
   "metadata": {},
   "source": [
    "Réduction de la Dimensionnalité:\n",
    "PCA (Analyse en Composantes Principales): Transforme les variables corrélées en un ensemble de composantes orthogonales.\n",
    "\n",
    "PCA:\n",
    "La PCA permet d' obtenir un nombre réduit de composants principaux qui capturent la variance maximale.\n",
    "\n",
    "Ce dataframe contient un nombre important de variables, une PCA s'avère donc nécessaire pour réduire la dimensionalité."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "id": "5385f9d2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.66492604 0.28284801 0.01961286 0.01693167 0.01267619]\n"
     ]
    }
   ],
   "source": [
    "telematics_data_cleaned = df_telematics.drop(columns=['Id_pol'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1d5df399",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Application de la PCA avec 5 composantes\n",
    "pca = PCA(n_components=5)  \n",
    "principal_components = pca.fit_transform(telematics_data_cleaned)\n",
    "\n",
    "# Créer un nouveau DataFrame avec les composants principaux\n",
    "pca_df = pd.DataFrame(data=principal_components, columns=[f'Principal Component {i+1}' for i in range(principal_components.shape[1])])\n",
    "\n",
    "# Ajouter la colonne d'identifiant\n",
    "pca_df['Id_pol'] = df_telematics['Id_pol']\n",
    "\n",
    "# Afficher la variance expliquée par chaque composant\n",
    "print(pca.explained_variance_ratio_)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "id": "e2d95460",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Principal Component 1</th>\n",
       "      <th>Principal Component 2</th>\n",
       "      <th>Principal Component 3</th>\n",
       "      <th>Principal Component 4</th>\n",
       "      <th>Principal Component 5</th>\n",
       "      <th>Id_pol</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1001.992034</td>\n",
       "      <td>-407.119361</td>\n",
       "      <td>1429.511131</td>\n",
       "      <td>124.484388</td>\n",
       "      <td>538.909846</td>\n",
       "      <td>122389</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-1429.848025</td>\n",
       "      <td>-1006.339639</td>\n",
       "      <td>-288.685999</td>\n",
       "      <td>-398.008694</td>\n",
       "      <td>952.004223</td>\n",
       "      <td>125019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-1429.033707</td>\n",
       "      <td>-1008.267614</td>\n",
       "      <td>-295.536559</td>\n",
       "      <td>-371.885337</td>\n",
       "      <td>4320.838333</td>\n",
       "      <td>181154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-889.715623</td>\n",
       "      <td>-494.038047</td>\n",
       "      <td>246.334017</td>\n",
       "      <td>109.552231</td>\n",
       "      <td>5749.156888</td>\n",
       "      <td>140021</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-1405.428457</td>\n",
       "      <td>-980.589657</td>\n",
       "      <td>-271.708546</td>\n",
       "      <td>-341.637462</td>\n",
       "      <td>4582.740700</td>\n",
       "      <td>170356</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100232</th>\n",
       "      <td>-1418.279638</td>\n",
       "      <td>-940.819818</td>\n",
       "      <td>-266.059903</td>\n",
       "      <td>-360.702007</td>\n",
       "      <td>-3024.221335</td>\n",
       "      <td>169423</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100233</th>\n",
       "      <td>-1390.141918</td>\n",
       "      <td>-561.876973</td>\n",
       "      <td>-244.585027</td>\n",
       "      <td>9.724265</td>\n",
       "      <td>-319.386773</td>\n",
       "      <td>220618</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100234</th>\n",
       "      <td>-1379.114710</td>\n",
       "      <td>-913.953171</td>\n",
       "      <td>-235.814844</td>\n",
       "      <td>-290.311770</td>\n",
       "      <td>2815.759721</td>\n",
       "      <td>121277</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100235</th>\n",
       "      <td>-1128.441031</td>\n",
       "      <td>-809.746228</td>\n",
       "      <td>-62.584655</td>\n",
       "      <td>-226.184442</td>\n",
       "      <td>4524.050168</td>\n",
       "      <td>128311</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100236</th>\n",
       "      <td>-1402.088029</td>\n",
       "      <td>-699.302034</td>\n",
       "      <td>-248.961785</td>\n",
       "      <td>-107.314331</td>\n",
       "      <td>-2818.390122</td>\n",
       "      <td>122966</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100237 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Principal Component 1  Principal Component 2  Principal Component 3  \\\n",
       "0                 1001.992034            -407.119361            1429.511131   \n",
       "1                -1429.848025           -1006.339639            -288.685999   \n",
       "2                -1429.033707           -1008.267614            -295.536559   \n",
       "3                 -889.715623            -494.038047             246.334017   \n",
       "4                -1405.428457            -980.589657            -271.708546   \n",
       "...                       ...                    ...                    ...   \n",
       "100232           -1418.279638            -940.819818            -266.059903   \n",
       "100233           -1390.141918            -561.876973            -244.585027   \n",
       "100234           -1379.114710            -913.953171            -235.814844   \n",
       "100235           -1128.441031            -809.746228             -62.584655   \n",
       "100236           -1402.088029            -699.302034            -248.961785   \n",
       "\n",
       "        Principal Component 4  Principal Component 5  Id_pol  \n",
       "0                  124.484388             538.909846  122389  \n",
       "1                 -398.008694             952.004223  125019  \n",
       "2                 -371.885337            4320.838333  181154  \n",
       "3                  109.552231            5749.156888  140021  \n",
       "4                 -341.637462            4582.740700  170356  \n",
       "...                       ...                    ...     ...  \n",
       "100232            -360.702007           -3024.221335  169423  \n",
       "100233               9.724265            -319.386773  220618  \n",
       "100234            -290.311770            2815.759721  121277  \n",
       "100235            -226.184442            4524.050168  128311  \n",
       "100236            -107.314331           -2818.390122  122966  \n",
       "\n",
       "[100237 rows x 6 columns]"
      ]
     },
     "execution_count": 176,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "id": "ff77507b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Annual.pct.driven</th>\n",
       "      <th>Total.miles.driven</th>\n",
       "      <th>Pct.drive.mon</th>\n",
       "      <th>Pct.drive.tue</th>\n",
       "      <th>Pct.drive.wed</th>\n",
       "      <th>Pct.drive.thr</th>\n",
       "      <th>Pct.drive.fri</th>\n",
       "      <th>Pct.drive.sat</th>\n",
       "      <th>Pct.drive.sun</th>\n",
       "      <th>Pct.drive.2hrs</th>\n",
       "      <th>...</th>\n",
       "      <th>Left.turn.intensity08</th>\n",
       "      <th>Left.turn.intensity09</th>\n",
       "      <th>Left.turn.intensity10</th>\n",
       "      <th>Left.turn.intensity11</th>\n",
       "      <th>Left.turn.intensity12</th>\n",
       "      <th>Right.turn.intensity08</th>\n",
       "      <th>Right.turn.intensity09</th>\n",
       "      <th>Right.turn.intensity10</th>\n",
       "      <th>Right.turn.intensity11</th>\n",
       "      <th>Right.turn.intensity12</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>PC1</th>\n",
       "      <td>5.486049e-08</td>\n",
       "      <td>0.000974</td>\n",
       "      <td>3.418061e-09</td>\n",
       "      <td>-1.062283e-08</td>\n",
       "      <td>-1.920969e-08</td>\n",
       "      <td>-8.870856e-09</td>\n",
       "      <td>-4.520741e-09</td>\n",
       "      <td>1.115283e-08</td>\n",
       "      <td>2.990910e-08</td>\n",
       "      <td>2.873503e-10</td>\n",
       "      <td>...</td>\n",
       "      <td>0.484221</td>\n",
       "      <td>0.471409</td>\n",
       "      <td>0.444691</td>\n",
       "      <td>0.425016</td>\n",
       "      <td>0.405855</td>\n",
       "      <td>0.007429</td>\n",
       "      <td>0.007010</td>\n",
       "      <td>0.006169</td>\n",
       "      <td>0.005477</td>\n",
       "      <td>0.004786</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC2</th>\n",
       "      <td>2.949693e-08</td>\n",
       "      <td>0.000198</td>\n",
       "      <td>-1.243447e-08</td>\n",
       "      <td>1.376090e-08</td>\n",
       "      <td>-2.758853e-09</td>\n",
       "      <td>1.676397e-09</td>\n",
       "      <td>3.794782e-09</td>\n",
       "      <td>5.923755e-09</td>\n",
       "      <td>-7.888692e-09</td>\n",
       "      <td>-3.519482e-09</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.005518</td>\n",
       "      <td>-0.005728</td>\n",
       "      <td>-0.006427</td>\n",
       "      <td>-0.006830</td>\n",
       "      <td>-0.006968</td>\n",
       "      <td>0.517702</td>\n",
       "      <td>0.488485</td>\n",
       "      <td>0.434411</td>\n",
       "      <td>0.403544</td>\n",
       "      <td>0.376307</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC3</th>\n",
       "      <td>2.852297e-07</td>\n",
       "      <td>-0.001071</td>\n",
       "      <td>5.910671e-08</td>\n",
       "      <td>-3.830813e-08</td>\n",
       "      <td>2.412986e-08</td>\n",
       "      <td>-8.775589e-09</td>\n",
       "      <td>7.894142e-09</td>\n",
       "      <td>-4.295671e-08</td>\n",
       "      <td>7.356207e-09</td>\n",
       "      <td>-1.100623e-08</td>\n",
       "      <td>...</td>\n",
       "      <td>0.613593</td>\n",
       "      <td>0.358830</td>\n",
       "      <td>-0.149383</td>\n",
       "      <td>-0.425030</td>\n",
       "      <td>-0.540022</td>\n",
       "      <td>0.007079</td>\n",
       "      <td>0.001957</td>\n",
       "      <td>-0.004235</td>\n",
       "      <td>-0.006110</td>\n",
       "      <td>-0.006643</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC4</th>\n",
       "      <td>1.172500e-06</td>\n",
       "      <td>0.008974</td>\n",
       "      <td>-8.403893e-09</td>\n",
       "      <td>2.646671e-08</td>\n",
       "      <td>-4.979519e-08</td>\n",
       "      <td>7.120569e-08</td>\n",
       "      <td>-1.025162e-08</td>\n",
       "      <td>-2.434920e-08</td>\n",
       "      <td>1.065519e-08</td>\n",
       "      <td>-1.113052e-08</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.006721</td>\n",
       "      <td>-0.005693</td>\n",
       "      <td>0.001286</td>\n",
       "      <td>0.005225</td>\n",
       "      <td>0.006567</td>\n",
       "      <td>0.626381</td>\n",
       "      <td>0.305213</td>\n",
       "      <td>-0.236469</td>\n",
       "      <td>-0.433543</td>\n",
       "      <td>-0.519985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC5</th>\n",
       "      <td>4.641796e-05</td>\n",
       "      <td>0.999954</td>\n",
       "      <td>-1.406617e-07</td>\n",
       "      <td>-7.715523e-07</td>\n",
       "      <td>3.340905e-08</td>\n",
       "      <td>6.771673e-08</td>\n",
       "      <td>1.006224e-07</td>\n",
       "      <td>4.776924e-07</td>\n",
       "      <td>4.537400e-07</td>\n",
       "      <td>1.814364e-07</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000520</td>\n",
       "      <td>-0.000303</td>\n",
       "      <td>-0.000792</td>\n",
       "      <td>-0.000787</td>\n",
       "      <td>-0.000958</td>\n",
       "      <td>-0.005705</td>\n",
       "      <td>-0.002953</td>\n",
       "      <td>0.002338</td>\n",
       "      <td>0.003578</td>\n",
       "      <td>0.004577</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 39 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Annual.pct.driven  Total.miles.driven  Pct.drive.mon  Pct.drive.tue  \\\n",
       "PC1       5.486049e-08            0.000974   3.418061e-09  -1.062283e-08   \n",
       "PC2       2.949693e-08            0.000198  -1.243447e-08   1.376090e-08   \n",
       "PC3       2.852297e-07           -0.001071   5.910671e-08  -3.830813e-08   \n",
       "PC4       1.172500e-06            0.008974  -8.403893e-09   2.646671e-08   \n",
       "PC5       4.641796e-05            0.999954  -1.406617e-07  -7.715523e-07   \n",
       "\n",
       "     Pct.drive.wed  Pct.drive.thr  Pct.drive.fri  Pct.drive.sat  \\\n",
       "PC1  -1.920969e-08  -8.870856e-09  -4.520741e-09   1.115283e-08   \n",
       "PC2  -2.758853e-09   1.676397e-09   3.794782e-09   5.923755e-09   \n",
       "PC3   2.412986e-08  -8.775589e-09   7.894142e-09  -4.295671e-08   \n",
       "PC4  -4.979519e-08   7.120569e-08  -1.025162e-08  -2.434920e-08   \n",
       "PC5   3.340905e-08   6.771673e-08   1.006224e-07   4.776924e-07   \n",
       "\n",
       "     Pct.drive.sun  Pct.drive.2hrs  ...  Left.turn.intensity08  \\\n",
       "PC1   2.990910e-08    2.873503e-10  ...               0.484221   \n",
       "PC2  -7.888692e-09   -3.519482e-09  ...              -0.005518   \n",
       "PC3   7.356207e-09   -1.100623e-08  ...               0.613593   \n",
       "PC4   1.065519e-08   -1.113052e-08  ...              -0.006721   \n",
       "PC5   4.537400e-07    1.814364e-07  ...               0.000520   \n",
       "\n",
       "     Left.turn.intensity09  Left.turn.intensity10  Left.turn.intensity11  \\\n",
       "PC1               0.471409               0.444691               0.425016   \n",
       "PC2              -0.005728              -0.006427              -0.006830   \n",
       "PC3               0.358830              -0.149383              -0.425030   \n",
       "PC4              -0.005693               0.001286               0.005225   \n",
       "PC5              -0.000303              -0.000792              -0.000787   \n",
       "\n",
       "     Left.turn.intensity12  Right.turn.intensity08  Right.turn.intensity09  \\\n",
       "PC1               0.405855                0.007429                0.007010   \n",
       "PC2              -0.006968                0.517702                0.488485   \n",
       "PC3              -0.540022                0.007079                0.001957   \n",
       "PC4               0.006567                0.626381                0.305213   \n",
       "PC5              -0.000958               -0.005705               -0.002953   \n",
       "\n",
       "     Right.turn.intensity10  Right.turn.intensity11  Right.turn.intensity12  \n",
       "PC1                0.006169                0.005477                0.004786  \n",
       "PC2                0.434411                0.403544                0.376307  \n",
       "PC3               -0.004235               -0.006110               -0.006643  \n",
       "PC4               -0.236469               -0.433543               -0.519985  \n",
       "PC5                0.002338                0.003578                0.004577  \n",
       "\n",
       "[5 rows x 39 columns]"
      ]
     },
     "execution_count": 164,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Interprétation des Composantes Principales\n",
    "\n",
    "# Coefficients des composantes principales\n",
    "coefficients = pd.DataFrame(pca.components_, columns=telematics_data_cleaned.columns, index=[f'PC{i+1}' for i in range(len(pca.components_))])\n",
    "\n",
    "coefficients\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "id": "54c5a94b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Contribution des Variables dans les Composantes Principales')"
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Affichage des coefficients\n",
    "sns.heatmap(coefficients.T, annot=False, cmap='coolwarm')\n",
    "plt.pyplot.title(\"Contribution des Variables dans les Composantes Principales\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c240f81",
   "metadata": {},
   "source": [
    "Ce graphique montre une carte thermique (heatmap) des contributions des différentes variables dans les composantes principales (PC1 à PC5). Cette visualisation permet de comprendre quelles variables contribuent le plus à chaque composante principale, aidant ainsi à l'interprétation de l'analyse en composantes principales (ACP). Voici une analyse détaillée :\n",
    "\n",
    "### Analyse des Composantes Principales (ACP)\n",
    "\n",
    "1. **PC1 (Première Composante Principale)**:\n",
    "   - La variable **Annual.pct.driven** semble contribuer fortement et positivement à cette composante.\n",
    "   - Cette variable reflète le pourcentage annuel de conduite, ce qui suggère que PC1 est liée à l'intensité d'utilisation du véhicule au fil du temps.\n",
    "\n",
    "2. **PC2 (Deuxième Composante Principale)**:\n",
    "   - Les variables **Left.turn.intensity** et **Right.turn.intensity** contribuent positivement.\n",
    "   - PC2 pourrait être liée aux comportements de virage du conducteur, reflétant les habitudes d'utilisation du volant lors des manœuvres.\n",
    "\n",
    "3. **PC3 (Troisième Composante Principale)**:\n",
    "   - Les variables liées aux actions de freinage et d'accélération (par exemple, **Accel.08miles**, **Brake.08miles**) contribuent le plus à cette composante.\n",
    "   - PC3 semble capturer les comportements agressifs ou prudents de conduite.\n",
    "\n",
    "4. **PC4 (Quatrième Composante Principale)**:\n",
    "   - La contribution principale provient des variables de freinage et de virages à droite.\n",
    "   - PC4 pourrait représenter les manœuvres plus subtiles du conducteur.\n",
    "\n",
    "5. **PC5 (Cinquième Composante Principale)**:\n",
    "   - Les variables ne montrent pas de contribution dominante spécifique.\n",
    "   - PC5 pourrait refléter des variations plus petites dans les comportements de conduite.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    " Chaque composante semble capturer des comportements de conduite distincts, comme l'intensité de la conduite, les virages et les manœuvres de freinage/accélération.\n",
    " Les composantes principales simplifient les relations complexes entre les variables tout en conservant l'essence de l'information.\n",
    "\n",
    "\n",
    " Les assureurs peuvent utiliser ces composantes pour identifier les profils de conducteurs plus enclins à des accidents ou des réclamations.\n",
    " Cela pourrait améliorer les modèles prédictifs ou les algorithmes de tarification.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "id": "67e9524b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/Abraham/anaconda3/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Clusters par Composantes Principales')"
      ]
     },
     "execution_count": 170,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Modélisation (Clustering K-means)\n",
    "from sklearn.cluster import KMeans\n",
    "\n",
    "# Créer et ajuster le modèle K-means\n",
    "kmeans = KMeans(n_clusters=3)\n",
    "kmeans.fit(principal_components)\n",
    "\n",
    "# Ajouter les étiquettes de cluster au DataFrame\n",
    "pca_df['Cluster'] = kmeans.labels_\n",
    "\n",
    "# Visualisation des clusters\n",
    "sns.scatterplot(data=pca_df, x='Principal Component 1', y='Principal Component 2', hue='Cluster')\n",
    "plt.pyplot.title(\"Clusters par Composantes Principales\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "id": "a7e032c0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 178,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca_df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "id": "246307b3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "95"
      ]
     },
     "execution_count": 177,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca_df.duplicated(subset='Id_pol', keep=False).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "id": "0d295cc6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Remove duplicate rows based on 'Id_pol'\n",
    "pca_df.drop_duplicates(subset='Id_pol', inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "id": "4f582a55",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Vu que contract_data et df_telematics ont a peu près les mêmes volumétries nous allons les fusionner\n",
    "# Fusionner sur l'identifiant unique `Id_pol`\n",
    "final_df = pd.merge(pca_df, contract_data, on='Id_pol', how='inner')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "id": "3db454dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Principal Component 1</th>\n",
       "      <th>Principal Component 2</th>\n",
       "      <th>Principal Component 3</th>\n",
       "      <th>Principal Component 4</th>\n",
       "      <th>Principal Component 5</th>\n",
       "      <th>Id_pol</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Insured.age</th>\n",
       "      <th>Insured.sex</th>\n",
       "      <th>Car.age</th>\n",
       "      <th>Marital</th>\n",
       "      <th>Car.use</th>\n",
       "      <th>Credit.score</th>\n",
       "      <th>Region</th>\n",
       "      <th>Annual.miles.drive</th>\n",
       "      <th>Years.noclaims</th>\n",
       "      <th>Territory</th>\n",
       "      <th>Credit_score_cat</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1001.992034</td>\n",
       "      <td>-407.119361</td>\n",
       "      <td>1429.511131</td>\n",
       "      <td>124.484388</td>\n",
       "      <td>538.909846</td>\n",
       "      <td>122389</td>\n",
       "      <td>366</td>\n",
       "      <td>36</td>\n",
       "      <td>Female</td>\n",
       "      <td>6</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>859</td>\n",
       "      <td>Urban</td>\n",
       "      <td>6213.710</td>\n",
       "      <td>20</td>\n",
       "      <td>39</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-1429.848025</td>\n",
       "      <td>-1006.339639</td>\n",
       "      <td>-288.685999</td>\n",
       "      <td>-398.008694</td>\n",
       "      <td>952.004223</td>\n",
       "      <td>125019</td>\n",
       "      <td>365</td>\n",
       "      <td>45</td>\n",
       "      <td>Male</td>\n",
       "      <td>11</td>\n",
       "      <td>Single</td>\n",
       "      <td>Private</td>\n",
       "      <td>833</td>\n",
       "      <td>Urban</td>\n",
       "      <td>6213.710</td>\n",
       "      <td>29</td>\n",
       "      <td>13</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-1429.033707</td>\n",
       "      <td>-1008.267614</td>\n",
       "      <td>-295.536559</td>\n",
       "      <td>-371.885337</td>\n",
       "      <td>4320.838333</td>\n",
       "      <td>181154</td>\n",
       "      <td>184</td>\n",
       "      <td>57</td>\n",
       "      <td>Female</td>\n",
       "      <td>5</td>\n",
       "      <td>Single</td>\n",
       "      <td>Commute</td>\n",
       "      <td>813</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.420</td>\n",
       "      <td>40</td>\n",
       "      <td>83</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-889.715623</td>\n",
       "      <td>-494.038047</td>\n",
       "      <td>246.334017</td>\n",
       "      <td>109.552231</td>\n",
       "      <td>5749.156888</td>\n",
       "      <td>140021</td>\n",
       "      <td>366</td>\n",
       "      <td>43</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>Single</td>\n",
       "      <td>Commercial</td>\n",
       "      <td>834</td>\n",
       "      <td>Rural</td>\n",
       "      <td>12427.420</td>\n",
       "      <td>27</td>\n",
       "      <td>69</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-1405.428457</td>\n",
       "      <td>-980.589657</td>\n",
       "      <td>-271.708546</td>\n",
       "      <td>-341.637462</td>\n",
       "      <td>4582.740700</td>\n",
       "      <td>170356</td>\n",
       "      <td>366</td>\n",
       "      <td>25</td>\n",
       "      <td>Female</td>\n",
       "      <td>11</td>\n",
       "      <td>Single</td>\n",
       "      <td>Commute</td>\n",
       "      <td>867</td>\n",
       "      <td>Rural</td>\n",
       "      <td>6213.710</td>\n",
       "      <td>8</td>\n",
       "      <td>90</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96909</th>\n",
       "      <td>-1418.279638</td>\n",
       "      <td>-940.819818</td>\n",
       "      <td>-266.059903</td>\n",
       "      <td>-360.702007</td>\n",
       "      <td>-3024.221335</td>\n",
       "      <td>169423</td>\n",
       "      <td>226</td>\n",
       "      <td>52</td>\n",
       "      <td>Male</td>\n",
       "      <td>7</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>838</td>\n",
       "      <td>Urban</td>\n",
       "      <td>15534.275</td>\n",
       "      <td>32</td>\n",
       "      <td>12</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96910</th>\n",
       "      <td>-1390.141918</td>\n",
       "      <td>-561.876973</td>\n",
       "      <td>-244.585027</td>\n",
       "      <td>9.724265</td>\n",
       "      <td>-319.386773</td>\n",
       "      <td>220618</td>\n",
       "      <td>236</td>\n",
       "      <td>44</td>\n",
       "      <td>Female</td>\n",
       "      <td>6</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>751</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.420</td>\n",
       "      <td>22</td>\n",
       "      <td>68</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96911</th>\n",
       "      <td>-1379.114710</td>\n",
       "      <td>-913.953171</td>\n",
       "      <td>-235.814844</td>\n",
       "      <td>-290.311770</td>\n",
       "      <td>2815.759721</td>\n",
       "      <td>121277</td>\n",
       "      <td>365</td>\n",
       "      <td>59</td>\n",
       "      <td>Male</td>\n",
       "      <td>5</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>811</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.420</td>\n",
       "      <td>39</td>\n",
       "      <td>76</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96912</th>\n",
       "      <td>-1128.441031</td>\n",
       "      <td>-809.746228</td>\n",
       "      <td>-62.584655</td>\n",
       "      <td>-226.184442</td>\n",
       "      <td>4524.050168</td>\n",
       "      <td>128311</td>\n",
       "      <td>366</td>\n",
       "      <td>57</td>\n",
       "      <td>Female</td>\n",
       "      <td>12</td>\n",
       "      <td>Single</td>\n",
       "      <td>Private</td>\n",
       "      <td>684</td>\n",
       "      <td>Rural</td>\n",
       "      <td>6213.710</td>\n",
       "      <td>39</td>\n",
       "      <td>59</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96913</th>\n",
       "      <td>-1402.088029</td>\n",
       "      <td>-699.302034</td>\n",
       "      <td>-248.961785</td>\n",
       "      <td>-107.314331</td>\n",
       "      <td>-2818.390122</td>\n",
       "      <td>122966</td>\n",
       "      <td>365</td>\n",
       "      <td>42</td>\n",
       "      <td>Male</td>\n",
       "      <td>2</td>\n",
       "      <td>Single</td>\n",
       "      <td>Commercial</td>\n",
       "      <td>822</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.420</td>\n",
       "      <td>25</td>\n",
       "      <td>26</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>96914 rows × 18 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Principal Component 1  Principal Component 2  Principal Component 3  \\\n",
       "0                1001.992034            -407.119361            1429.511131   \n",
       "1               -1429.848025           -1006.339639            -288.685999   \n",
       "2               -1429.033707           -1008.267614            -295.536559   \n",
       "3                -889.715623            -494.038047             246.334017   \n",
       "4               -1405.428457            -980.589657            -271.708546   \n",
       "...                      ...                    ...                    ...   \n",
       "96909           -1418.279638            -940.819818            -266.059903   \n",
       "96910           -1390.141918            -561.876973            -244.585027   \n",
       "96911           -1379.114710            -913.953171            -235.814844   \n",
       "96912           -1128.441031            -809.746228             -62.584655   \n",
       "96913           -1402.088029            -699.302034            -248.961785   \n",
       "\n",
       "       Principal Component 4  Principal Component 5  Id_pol  Duration  \\\n",
       "0                 124.484388             538.909846  122389       366   \n",
       "1                -398.008694             952.004223  125019       365   \n",
       "2                -371.885337            4320.838333  181154       184   \n",
       "3                 109.552231            5749.156888  140021       366   \n",
       "4                -341.637462            4582.740700  170356       366   \n",
       "...                      ...                    ...     ...       ...   \n",
       "96909            -360.702007           -3024.221335  169423       226   \n",
       "96910               9.724265            -319.386773  220618       236   \n",
       "96911            -290.311770            2815.759721  121277       365   \n",
       "96912            -226.184442            4524.050168  128311       366   \n",
       "96913            -107.314331           -2818.390122  122966       365   \n",
       "\n",
       "       Insured.age Insured.sex  Car.age  Marital     Car.use  Credit.score  \\\n",
       "0               36      Female        6  Married     Commute           859   \n",
       "1               45        Male       11   Single     Private           833   \n",
       "2               57      Female        5   Single     Commute           813   \n",
       "3               43      Female        0   Single  Commercial           834   \n",
       "4               25      Female       11   Single     Commute           867   \n",
       "...            ...         ...      ...      ...         ...           ...   \n",
       "96909           52        Male        7  Married     Commute           838   \n",
       "96910           44      Female        6  Married     Commute           751   \n",
       "96911           59        Male        5  Married     Commute           811   \n",
       "96912           57      Female       12   Single     Private           684   \n",
       "96913           42        Male        2   Single  Commercial           822   \n",
       "\n",
       "      Region  Annual.miles.drive  Years.noclaims  Territory Credit_score_cat  \n",
       "0      Urban            6213.710              20         39             High  \n",
       "1      Urban            6213.710              29         13             High  \n",
       "2      Urban           12427.420              40         83             High  \n",
       "3      Rural           12427.420              27         69             High  \n",
       "4      Rural            6213.710               8         90             High  \n",
       "...      ...                 ...             ...        ...              ...  \n",
       "96909  Urban           15534.275              32         12             High  \n",
       "96910  Urban           12427.420              22         68             High  \n",
       "96911  Urban           12427.420              39         76             High  \n",
       "96912  Rural            6213.710              39         59           Medium  \n",
       "96913  Urban           12427.420              25         26             High  \n",
       "\n",
       "[96914 rows x 18 columns]"
      ]
     },
     "execution_count": 202,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "id": "8db7e02b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Principal Component 1</th>\n",
       "      <th>Principal Component 2</th>\n",
       "      <th>Principal Component 3</th>\n",
       "      <th>Principal Component 4</th>\n",
       "      <th>Principal Component 5</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Insured.age</th>\n",
       "      <th>Insured.sex</th>\n",
       "      <th>Car.age</th>\n",
       "      <th>Marital</th>\n",
       "      <th>Car.use</th>\n",
       "      <th>Credit.score</th>\n",
       "      <th>Region</th>\n",
       "      <th>Annual.miles.drive</th>\n",
       "      <th>Years.noclaims</th>\n",
       "      <th>Territory</th>\n",
       "      <th>Credit_score_cat</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Id_pol</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>122389</th>\n",
       "      <td>1001.992034</td>\n",
       "      <td>-407.119361</td>\n",
       "      <td>1429.511131</td>\n",
       "      <td>124.484388</td>\n",
       "      <td>538.909846</td>\n",
       "      <td>366</td>\n",
       "      <td>36</td>\n",
       "      <td>Female</td>\n",
       "      <td>6</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>859</td>\n",
       "      <td>Urban</td>\n",
       "      <td>6213.710</td>\n",
       "      <td>20</td>\n",
       "      <td>39</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125019</th>\n",
       "      <td>-1429.848025</td>\n",
       "      <td>-1006.339639</td>\n",
       "      <td>-288.685999</td>\n",
       "      <td>-398.008694</td>\n",
       "      <td>952.004223</td>\n",
       "      <td>365</td>\n",
       "      <td>45</td>\n",
       "      <td>Male</td>\n",
       "      <td>11</td>\n",
       "      <td>Single</td>\n",
       "      <td>Private</td>\n",
       "      <td>833</td>\n",
       "      <td>Urban</td>\n",
       "      <td>6213.710</td>\n",
       "      <td>29</td>\n",
       "      <td>13</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>181154</th>\n",
       "      <td>-1429.033707</td>\n",
       "      <td>-1008.267614</td>\n",
       "      <td>-295.536559</td>\n",
       "      <td>-371.885337</td>\n",
       "      <td>4320.838333</td>\n",
       "      <td>184</td>\n",
       "      <td>57</td>\n",
       "      <td>Female</td>\n",
       "      <td>5</td>\n",
       "      <td>Single</td>\n",
       "      <td>Commute</td>\n",
       "      <td>813</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.420</td>\n",
       "      <td>40</td>\n",
       "      <td>83</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>140021</th>\n",
       "      <td>-889.715623</td>\n",
       "      <td>-494.038047</td>\n",
       "      <td>246.334017</td>\n",
       "      <td>109.552231</td>\n",
       "      <td>5749.156888</td>\n",
       "      <td>366</td>\n",
       "      <td>43</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>Single</td>\n",
       "      <td>Commercial</td>\n",
       "      <td>834</td>\n",
       "      <td>Rural</td>\n",
       "      <td>12427.420</td>\n",
       "      <td>27</td>\n",
       "      <td>69</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>170356</th>\n",
       "      <td>-1405.428457</td>\n",
       "      <td>-980.589657</td>\n",
       "      <td>-271.708546</td>\n",
       "      <td>-341.637462</td>\n",
       "      <td>4582.740700</td>\n",
       "      <td>366</td>\n",
       "      <td>25</td>\n",
       "      <td>Female</td>\n",
       "      <td>11</td>\n",
       "      <td>Single</td>\n",
       "      <td>Commute</td>\n",
       "      <td>867</td>\n",
       "      <td>Rural</td>\n",
       "      <td>6213.710</td>\n",
       "      <td>8</td>\n",
       "      <td>90</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>169423</th>\n",
       "      <td>-1418.279638</td>\n",
       "      <td>-940.819818</td>\n",
       "      <td>-266.059903</td>\n",
       "      <td>-360.702007</td>\n",
       "      <td>-3024.221335</td>\n",
       "      <td>226</td>\n",
       "      <td>52</td>\n",
       "      <td>Male</td>\n",
       "      <td>7</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>838</td>\n",
       "      <td>Urban</td>\n",
       "      <td>15534.275</td>\n",
       "      <td>32</td>\n",
       "      <td>12</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>220618</th>\n",
       "      <td>-1390.141918</td>\n",
       "      <td>-561.876973</td>\n",
       "      <td>-244.585027</td>\n",
       "      <td>9.724265</td>\n",
       "      <td>-319.386773</td>\n",
       "      <td>236</td>\n",
       "      <td>44</td>\n",
       "      <td>Female</td>\n",
       "      <td>6</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>751</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.420</td>\n",
       "      <td>22</td>\n",
       "      <td>68</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>121277</th>\n",
       "      <td>-1379.114710</td>\n",
       "      <td>-913.953171</td>\n",
       "      <td>-235.814844</td>\n",
       "      <td>-290.311770</td>\n",
       "      <td>2815.759721</td>\n",
       "      <td>365</td>\n",
       "      <td>59</td>\n",
       "      <td>Male</td>\n",
       "      <td>5</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>811</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.420</td>\n",
       "      <td>39</td>\n",
       "      <td>76</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>128311</th>\n",
       "      <td>-1128.441031</td>\n",
       "      <td>-809.746228</td>\n",
       "      <td>-62.584655</td>\n",
       "      <td>-226.184442</td>\n",
       "      <td>4524.050168</td>\n",
       "      <td>366</td>\n",
       "      <td>57</td>\n",
       "      <td>Female</td>\n",
       "      <td>12</td>\n",
       "      <td>Single</td>\n",
       "      <td>Private</td>\n",
       "      <td>684</td>\n",
       "      <td>Rural</td>\n",
       "      <td>6213.710</td>\n",
       "      <td>39</td>\n",
       "      <td>59</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>122966</th>\n",
       "      <td>-1402.088029</td>\n",
       "      <td>-699.302034</td>\n",
       "      <td>-248.961785</td>\n",
       "      <td>-107.314331</td>\n",
       "      <td>-2818.390122</td>\n",
       "      <td>365</td>\n",
       "      <td>42</td>\n",
       "      <td>Male</td>\n",
       "      <td>2</td>\n",
       "      <td>Single</td>\n",
       "      <td>Commercial</td>\n",
       "      <td>822</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.420</td>\n",
       "      <td>25</td>\n",
       "      <td>26</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>96914 rows × 17 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Principal Component 1  Principal Component 2  Principal Component 3  \\\n",
       "Id_pol                                                                        \n",
       "122389            1001.992034            -407.119361            1429.511131   \n",
       "125019           -1429.848025           -1006.339639            -288.685999   \n",
       "181154           -1429.033707           -1008.267614            -295.536559   \n",
       "140021            -889.715623            -494.038047             246.334017   \n",
       "170356           -1405.428457            -980.589657            -271.708546   \n",
       "...                       ...                    ...                    ...   \n",
       "169423           -1418.279638            -940.819818            -266.059903   \n",
       "220618           -1390.141918            -561.876973            -244.585027   \n",
       "121277           -1379.114710            -913.953171            -235.814844   \n",
       "128311           -1128.441031            -809.746228             -62.584655   \n",
       "122966           -1402.088029            -699.302034            -248.961785   \n",
       "\n",
       "        Principal Component 4  Principal Component 5  Duration  Insured.age  \\\n",
       "Id_pol                                                                        \n",
       "122389             124.484388             538.909846       366           36   \n",
       "125019            -398.008694             952.004223       365           45   \n",
       "181154            -371.885337            4320.838333       184           57   \n",
       "140021             109.552231            5749.156888       366           43   \n",
       "170356            -341.637462            4582.740700       366           25   \n",
       "...                       ...                    ...       ...          ...   \n",
       "169423            -360.702007           -3024.221335       226           52   \n",
       "220618               9.724265            -319.386773       236           44   \n",
       "121277            -290.311770            2815.759721       365           59   \n",
       "128311            -226.184442            4524.050168       366           57   \n",
       "122966            -107.314331           -2818.390122       365           42   \n",
       "\n",
       "       Insured.sex  Car.age  Marital     Car.use  Credit.score Region  \\\n",
       "Id_pol                                                                  \n",
       "122389      Female        6  Married     Commute           859  Urban   \n",
       "125019        Male       11   Single     Private           833  Urban   \n",
       "181154      Female        5   Single     Commute           813  Urban   \n",
       "140021      Female        0   Single  Commercial           834  Rural   \n",
       "170356      Female       11   Single     Commute           867  Rural   \n",
       "...            ...      ...      ...         ...           ...    ...   \n",
       "169423        Male        7  Married     Commute           838  Urban   \n",
       "220618      Female        6  Married     Commute           751  Urban   \n",
       "121277        Male        5  Married     Commute           811  Urban   \n",
       "128311      Female       12   Single     Private           684  Rural   \n",
       "122966        Male        2   Single  Commercial           822  Urban   \n",
       "\n",
       "        Annual.miles.drive  Years.noclaims  Territory Credit_score_cat  \n",
       "Id_pol                                                                  \n",
       "122389            6213.710              20         39             High  \n",
       "125019            6213.710              29         13             High  \n",
       "181154           12427.420              40         83             High  \n",
       "140021           12427.420              27         69             High  \n",
       "170356            6213.710               8         90             High  \n",
       "...                    ...             ...        ...              ...  \n",
       "169423           15534.275              32         12             High  \n",
       "220618           12427.420              22         68             High  \n",
       "121277           12427.420              39         76             High  \n",
       "128311            6213.710              39         59           Medium  \n",
       "122966           12427.420              25         26             High  \n",
       "\n",
       "[96914 rows x 17 columns]"
      ]
     },
     "execution_count": 203,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#On va définir Id_pol comme notre index\n",
    "final_df.set_index('Id_pol')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "id": "a83a29bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_insurance = final_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "id": "368b7a95",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Principal Component 1', 'Principal Component 2',\n",
       "       'Principal Component 3', 'Principal Component 4',\n",
       "       'Principal Component 5', 'Id_pol', 'Duration', 'Insured.age',\n",
       "       'Insured.sex', 'Car.age', 'Marital', 'Car.use', 'Credit.score',\n",
       "       'Region', 'Annual.miles.drive', 'Years.noclaims', 'Territory',\n",
       "       'Credit_score_cat'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 205,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_insurance.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "id": "99604e24",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Id_pol', 'NB_Claim', 'AMT_Claim'], dtype='object')"
      ]
     },
     "execution_count": 206,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "claims_data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "id": "7a99850b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Principal Component 1</th>\n",
       "      <th>Principal Component 2</th>\n",
       "      <th>Principal Component 3</th>\n",
       "      <th>Principal Component 4</th>\n",
       "      <th>Principal Component 5</th>\n",
       "      <th>Id_pol</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Insured.age</th>\n",
       "      <th>Insured.sex</th>\n",
       "      <th>Car.age</th>\n",
       "      <th>Marital</th>\n",
       "      <th>Car.use</th>\n",
       "      <th>Credit.score</th>\n",
       "      <th>Region</th>\n",
       "      <th>Annual.miles.drive</th>\n",
       "      <th>Years.noclaims</th>\n",
       "      <th>Territory</th>\n",
       "      <th>Credit_score_cat</th>\n",
       "      <th>NB_Claim</th>\n",
       "      <th>AMT_Claim</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-955.918464</td>\n",
       "      <td>-481.496644</td>\n",
       "      <td>190.249454</td>\n",
       "      <td>76.578532</td>\n",
       "      <td>730.120978</td>\n",
       "      <td>212355</td>\n",
       "      <td>229</td>\n",
       "      <td>54</td>\n",
       "      <td>Female</td>\n",
       "      <td>9</td>\n",
       "      <td>Married</td>\n",
       "      <td>Private</td>\n",
       "      <td>775</td>\n",
       "      <td>Urban</td>\n",
       "      <td>6213.7100</td>\n",
       "      <td>28</td>\n",
       "      <td>18</td>\n",
       "      <td>High</td>\n",
       "      <td>1</td>\n",
       "      <td>4546.222412</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-1223.155927</td>\n",
       "      <td>-479.833112</td>\n",
       "      <td>-77.418877</td>\n",
       "      <td>43.179375</td>\n",
       "      <td>272.530693</td>\n",
       "      <td>171111</td>\n",
       "      <td>331</td>\n",
       "      <td>56</td>\n",
       "      <td>Female</td>\n",
       "      <td>9</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>776</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.4200</td>\n",
       "      <td>30</td>\n",
       "      <td>64</td>\n",
       "      <td>High</td>\n",
       "      <td>1</td>\n",
       "      <td>470.114410</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-613.912995</td>\n",
       "      <td>919.755190</td>\n",
       "      <td>486.629085</td>\n",
       "      <td>1040.003657</td>\n",
       "      <td>-1310.884958</td>\n",
       "      <td>199324</td>\n",
       "      <td>365</td>\n",
       "      <td>38</td>\n",
       "      <td>Female</td>\n",
       "      <td>9</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commercial</td>\n",
       "      <td>685</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.4200</td>\n",
       "      <td>21</td>\n",
       "      <td>71</td>\n",
       "      <td>Medium</td>\n",
       "      <td>1</td>\n",
       "      <td>185.448303</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-860.061439</td>\n",
       "      <td>1442.703457</td>\n",
       "      <td>121.665429</td>\n",
       "      <td>1356.662737</td>\n",
       "      <td>15664.150986</td>\n",
       "      <td>160668</td>\n",
       "      <td>366</td>\n",
       "      <td>46</td>\n",
       "      <td>Female</td>\n",
       "      <td>7</td>\n",
       "      <td>Single</td>\n",
       "      <td>Private</td>\n",
       "      <td>491</td>\n",
       "      <td>Urban</td>\n",
       "      <td>6213.7100</td>\n",
       "      <td>30</td>\n",
       "      <td>77</td>\n",
       "      <td>Low</td>\n",
       "      <td>1</td>\n",
       "      <td>2343.274292</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-571.415421</td>\n",
       "      <td>-237.469792</td>\n",
       "      <td>426.163362</td>\n",
       "      <td>192.056566</td>\n",
       "      <td>2802.858738</td>\n",
       "      <td>195403</td>\n",
       "      <td>365</td>\n",
       "      <td>37</td>\n",
       "      <td>Male</td>\n",
       "      <td>6</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>690</td>\n",
       "      <td>Urban</td>\n",
       "      <td>15534.2750</td>\n",
       "      <td>16</td>\n",
       "      <td>83</td>\n",
       "      <td>Medium</td>\n",
       "      <td>1</td>\n",
       "      <td>6409.722656</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3786</th>\n",
       "      <td>-1405.927730</td>\n",
       "      <td>-897.192296</td>\n",
       "      <td>-247.964800</td>\n",
       "      <td>-314.164436</td>\n",
       "      <td>-4384.302853</td>\n",
       "      <td>141868</td>\n",
       "      <td>365</td>\n",
       "      <td>45</td>\n",
       "      <td>Female</td>\n",
       "      <td>5</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>712</td>\n",
       "      <td>Urban</td>\n",
       "      <td>12427.4200</td>\n",
       "      <td>29</td>\n",
       "      <td>85</td>\n",
       "      <td>Medium</td>\n",
       "      <td>1</td>\n",
       "      <td>644.263641</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3787</th>\n",
       "      <td>-1411.467129</td>\n",
       "      <td>-963.696051</td>\n",
       "      <td>-267.930781</td>\n",
       "      <td>-360.317824</td>\n",
       "      <td>481.330663</td>\n",
       "      <td>203412</td>\n",
       "      <td>183</td>\n",
       "      <td>60</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>900</td>\n",
       "      <td>Urban</td>\n",
       "      <td>18641.1300</td>\n",
       "      <td>43</td>\n",
       "      <td>60</td>\n",
       "      <td>High</td>\n",
       "      <td>1</td>\n",
       "      <td>138.469254</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3788</th>\n",
       "      <td>-1435.839839</td>\n",
       "      <td>-997.810628</td>\n",
       "      <td>-283.446787</td>\n",
       "      <td>-435.813462</td>\n",
       "      <td>-4383.032562</td>\n",
       "      <td>151302</td>\n",
       "      <td>366</td>\n",
       "      <td>33</td>\n",
       "      <td>Male</td>\n",
       "      <td>1</td>\n",
       "      <td>Single</td>\n",
       "      <td>Commute</td>\n",
       "      <td>659</td>\n",
       "      <td>Rural</td>\n",
       "      <td>15534.2750</td>\n",
       "      <td>5</td>\n",
       "      <td>86</td>\n",
       "      <td>Medium</td>\n",
       "      <td>1</td>\n",
       "      <td>7221.382324</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3789</th>\n",
       "      <td>128.932121</td>\n",
       "      <td>-1026.805111</td>\n",
       "      <td>1158.767880</td>\n",
       "      <td>-448.339807</td>\n",
       "      <td>-2686.308077</td>\n",
       "      <td>180811</td>\n",
       "      <td>351</td>\n",
       "      <td>42</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>Married</td>\n",
       "      <td>Commute</td>\n",
       "      <td>900</td>\n",
       "      <td>Urban</td>\n",
       "      <td>17522.6622</td>\n",
       "      <td>24</td>\n",
       "      <td>31</td>\n",
       "      <td>High</td>\n",
       "      <td>1</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3790</th>\n",
       "      <td>-1388.469110</td>\n",
       "      <td>-991.451664</td>\n",
       "      <td>-262.140071</td>\n",
       "      <td>-341.201473</td>\n",
       "      <td>6237.955469</td>\n",
       "      <td>187115</td>\n",
       "      <td>366</td>\n",
       "      <td>77</td>\n",
       "      <td>Female</td>\n",
       "      <td>10</td>\n",
       "      <td>Single</td>\n",
       "      <td>Private</td>\n",
       "      <td>529</td>\n",
       "      <td>Urban</td>\n",
       "      <td>6213.7100</td>\n",
       "      <td>37</td>\n",
       "      <td>57</td>\n",
       "      <td>Low</td>\n",
       "      <td>2</td>\n",
       "      <td>7495.270019</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3791 rows × 20 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Principal Component 1  Principal Component 2  Principal Component 3  \\\n",
       "0               -955.918464            -481.496644             190.249454   \n",
       "1              -1223.155927            -479.833112             -77.418877   \n",
       "2               -613.912995             919.755190             486.629085   \n",
       "3               -860.061439            1442.703457             121.665429   \n",
       "4               -571.415421            -237.469792             426.163362   \n",
       "...                     ...                    ...                    ...   \n",
       "3786           -1405.927730            -897.192296            -247.964800   \n",
       "3787           -1411.467129            -963.696051            -267.930781   \n",
       "3788           -1435.839839            -997.810628            -283.446787   \n",
       "3789             128.932121           -1026.805111            1158.767880   \n",
       "3790           -1388.469110            -991.451664            -262.140071   \n",
       "\n",
       "      Principal Component 4  Principal Component 5  Id_pol  Duration  \\\n",
       "0                 76.578532             730.120978  212355       229   \n",
       "1                 43.179375             272.530693  171111       331   \n",
       "2               1040.003657           -1310.884958  199324       365   \n",
       "3               1356.662737           15664.150986  160668       366   \n",
       "4                192.056566            2802.858738  195403       365   \n",
       "...                     ...                    ...     ...       ...   \n",
       "3786            -314.164436           -4384.302853  141868       365   \n",
       "3787            -360.317824             481.330663  203412       183   \n",
       "3788            -435.813462           -4383.032562  151302       366   \n",
       "3789            -448.339807           -2686.308077  180811       351   \n",
       "3790            -341.201473            6237.955469  187115       366   \n",
       "\n",
       "      Insured.age Insured.sex  Car.age  Marital     Car.use  Credit.score  \\\n",
       "0              54      Female        9  Married     Private           775   \n",
       "1              56      Female        9  Married     Commute           776   \n",
       "2              38      Female        9  Married  Commercial           685   \n",
       "3              46      Female        7   Single     Private           491   \n",
       "4              37        Male        6  Married     Commute           690   \n",
       "...           ...         ...      ...      ...         ...           ...   \n",
       "3786           45      Female        5  Married     Commute           712   \n",
       "3787           60        Male        0  Married     Commute           900   \n",
       "3788           33        Male        1   Single     Commute           659   \n",
       "3789           42        Male        0  Married     Commute           900   \n",
       "3790           77      Female       10   Single     Private           529   \n",
       "\n",
       "     Region  Annual.miles.drive  Years.noclaims  Territory Credit_score_cat  \\\n",
       "0     Urban           6213.7100              28         18             High   \n",
       "1     Urban          12427.4200              30         64             High   \n",
       "2     Urban          12427.4200              21         71           Medium   \n",
       "3     Urban           6213.7100              30         77              Low   \n",
       "4     Urban          15534.2750              16         83           Medium   \n",
       "...     ...                 ...             ...        ...              ...   \n",
       "3786  Urban          12427.4200              29         85           Medium   \n",
       "3787  Urban          18641.1300              43         60             High   \n",
       "3788  Rural          15534.2750               5         86           Medium   \n",
       "3789  Urban          17522.6622              24         31             High   \n",
       "3790  Urban           6213.7100              37         57              Low   \n",
       "\n",
       "      NB_Claim    AMT_Claim  \n",
       "0            1  4546.222412  \n",
       "1            1   470.114410  \n",
       "2            1   185.448303  \n",
       "3            1  2343.274292  \n",
       "4            1  6409.722656  \n",
       "...        ...          ...  \n",
       "3786         1   644.263641  \n",
       "3787         1   138.469254  \n",
       "3788         1  7221.382324  \n",
       "3789         1     0.000000  \n",
       "3790         2  7495.270019  \n",
       "\n",
       "[3791 rows x 20 columns]"
      ]
     },
     "execution_count": 207,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Fusionner sur l'identifiant unique `Id_pol` pour avoir une base de données de sinstre plus enrichie\n",
    "claims_insurance = pd.merge(df_insurance, claims_data, on='Id_pol', how='inner')\n",
    "claims_insurance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "id": "bf057005",
   "metadata": {},
   "outputs": [],
   "source": [
    "del claims_insurance['Credit.score']\n",
    "del df_insurance['Credit.score']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "id": "53df45cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Principal Component 1    float64\n",
       "Principal Component 2    float64\n",
       "Principal Component 3    float64\n",
       "Principal Component 4    float64\n",
       "Principal Component 5    float64\n",
       "Id_pol                    object\n",
       "Duration                   int64\n",
       "Insured.age                int64\n",
       "Insured.sex               object\n",
       "Car.age                    int64\n",
       "Marital                   object\n",
       "Car.use                   object\n",
       "Region                    object\n",
       "Annual.miles.drive       float64\n",
       "Years.noclaims             int64\n",
       "Territory                  int64\n",
       "Credit_score_cat          object\n",
       "dtype: object"
      ]
     },
     "execution_count": 212,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_insurance.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "id": "ac458bcf",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 96914 entries, 0 to 96913\n",
      "Data columns (total 17 columns):\n",
      " #   Column                 Non-Null Count  Dtype  \n",
      "---  ------                 --------------  -----  \n",
      " 0   Principal Component 1  96914 non-null  float64\n",
      " 1   Principal Component 2  96914 non-null  float64\n",
      " 2   Principal Component 3  96914 non-null  float64\n",
      " 3   Principal Component 4  96914 non-null  float64\n",
      " 4   Principal Component 5  96914 non-null  float64\n",
      " 5   Id_pol                 96914 non-null  object \n",
      " 6   Duration               96914 non-null  int64  \n",
      " 7   Insured.age            96914 non-null  int64  \n",
      " 8   Insured.sex            96914 non-null  object \n",
      " 9   Car.age                96914 non-null  int64  \n",
      " 10  Marital                96914 non-null  object \n",
      " 11  Car.use                96914 non-null  object \n",
      " 12  Region                 96914 non-null  object \n",
      " 13  Annual.miles.drive     96914 non-null  float64\n",
      " 14  Years.noclaims         96914 non-null  int64  \n",
      " 15  Territory              96914 non-null  int64  \n",
      " 16  Credit_score_cat       96914 non-null  object \n",
      "dtypes: float64(6), int64(5), object(6)\n",
      "memory usage: 13.3+ MB\n"
     ]
    }
   ],
   "source": [
    "df_insurance.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "id": "b68b3f98",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 3791 entries, 0 to 3790\n",
      "Data columns (total 19 columns):\n",
      " #   Column                 Non-Null Count  Dtype  \n",
      "---  ------                 --------------  -----  \n",
      " 0   Principal Component 1  3791 non-null   float64\n",
      " 1   Principal Component 2  3791 non-null   float64\n",
      " 2   Principal Component 3  3791 non-null   float64\n",
      " 3   Principal Component 4  3791 non-null   float64\n",
      " 4   Principal Component 5  3791 non-null   float64\n",
      " 5   Id_pol                 3791 non-null   object \n",
      " 6   Duration               3791 non-null   int64  \n",
      " 7   Insured.age            3791 non-null   int64  \n",
      " 8   Insured.sex            3791 non-null   object \n",
      " 9   Car.age                3791 non-null   int64  \n",
      " 10  Marital                3791 non-null   object \n",
      " 11  Car.use                3791 non-null   object \n",
      " 12  Region                 3791 non-null   object \n",
      " 13  Annual.miles.drive     3791 non-null   float64\n",
      " 14  Years.noclaims         3791 non-null   int64  \n",
      " 15  Territory              3791 non-null   int64  \n",
      " 16  Credit_score_cat       3791 non-null   object \n",
      " 17  NB_Claim               3791 non-null   int64  \n",
      " 18  AMT_Claim              3791 non-null   float64\n",
      "dtypes: float64(7), int64(6), object(6)\n",
      "memory usage: 592.3+ KB\n"
     ]
    }
   ],
   "source": [
    "claims_insurance.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74de9fd9",
   "metadata": {},
   "source": [
    "#  Économétrie\n",
    "\n",
    "Les différentes possibilités que je pourrais explorer sont nombreuses.\n",
    "\n",
    "1. Régression Linéaire Multiple sur les Sinistres (AMT_Claim)\n",
    "\n",
    "Objectif : Identifier les facteurs qui affectent le montant total des sinistres.\n",
    "Approche : Effectuez une régression linéaire multiple en utilisant claims_insurance avec AMT_Claim comme variable dépendante. Utilisez comme prédicteurs des caractéristiques comme l'âge de l'assuré, la région, le kilométrage annuel, le score de crédit, etc.\n",
    "Résultat Attendu : Découvrir les caractéristiques les plus significatives qui expliquent la variabilité du montant des sinistres.\n",
    "\n",
    "2. Modèle de Comptage pour le Nombre de Sinistres (NB_Claim)\n",
    "\n",
    "Objectif : Analyser les variables qui influencent le nombre de sinistres.\n",
    "Approche : Utilisez un modèle Poisson ou binomial négatif pour estimer le nombre de sinistres dans claims_insurance. Les prédicteurs peuvent inclure des caractéristiques similaires à la régression linéaire.\n",
    "Résultat Attendu : Identifier les facteurs qui expliquent le nombre de sinistres pour mieux gérer le risque.\n",
    "\n",
    "3. Modèle Logit ou Probit pour les Frais d'Assurance\n",
    "\n",
    "Objectif : Prévoir la probabilité qu'un client appartienne à une catégorie de frais d'assurance spécifique (élevé, moyen, faible).\n",
    "Approche : Utilisez un modèle logit ou probit pour classifier les clients en fonction de leur probabilité d'avoir des frais d'assurance élevés. Les prédicteurs peuvent être des variables comme Insured.age, Car.age, Region, etc.\n",
    "Résultat Attendu : Obtenir des probabilités précises pour chaque catégorie et identifier les principaux prédicteurs.\n",
    "\n",
    "Dans une logique business, j'ai décider d'axer mes analyses sur AMT_Claim, le montant que paie la compagnie d'assurance en cas de sinistres."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "id": "e9964bae",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/df/tzlk6_xs46dbdsn2dm2mr21m0000gp/T/ipykernel_31415/1931628207.py:2: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
      "  corr = claims_insurance.corr()\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot: >"
      ]
     },
     "execution_count": 217,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Matrice de corrélation\n",
    "corr = claims_insurance.corr()\n",
    "plt.pyplot.figure(figsize=(10, 8))\n",
    "sns.heatmap(corr, annot=False, cmap='coolwarm')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae833372",
   "metadata": {},
   "source": [
    "Il semble y avoir une forte correlation entre Insured_age et Years_no claims. Donc nous ne retiendrons qu'une seule des deux variables dans nos analyses. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "id": "acdf4732",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:              AMT_Claim   R-squared:                       0.059\n",
      "Model:                            OLS   Adj. R-squared:                  0.053\n",
      "Method:                 Least Squares   F-statistic:                     9.255\n",
      "Date:                Sun, 05 May 2024   Prob (F-statistic):           3.35e-25\n",
      "Time:                        22:19:24   Log-Likelihood:                -23795.\n",
      "No. Observations:                2653   AIC:                         4.763e+04\n",
      "Df Residuals:                    2634   BIC:                         4.774e+04\n",
      "Df Model:                          18                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "===========================================================================================\n",
      "                              coef    std err          t      P>|t|      [0.025      0.975]\n",
      "-------------------------------------------------------------------------------------------\n",
      "const                     579.9351    406.804      1.426      0.154    -217.753    1377.623\n",
      "Principal Component 1       0.0019      0.001      1.515      0.130      -0.001       0.004\n",
      "Principal Component 2       0.0010      0.003      0.289      0.772      -0.006       0.008\n",
      "Principal Component 3      -0.0018      0.006     -0.313      0.754      -0.013       0.009\n",
      "Principal Component 4       0.0044      0.037      0.119      0.906      -0.069       0.077\n",
      "Principal Component 5      -0.0010      0.008     -0.114      0.910      -0.017       0.016\n",
      "Duration                    3.0799      0.708      4.350      0.000       1.692       4.468\n",
      "Car.age                     4.7330     10.400      0.455      0.649     -15.661      25.127\n",
      "Annual.miles.drive          0.0078      0.011      0.697      0.486      -0.014       0.030\n",
      "Years.noclaims            -14.2365      2.865     -4.969      0.000     -19.854      -8.619\n",
      "Territory                   1.2016      1.598      0.752      0.452      -1.931       4.334\n",
      "Insured.sex_Male           18.1311     75.601      0.240      0.810    -130.112     166.374\n",
      "Marital_Single            172.8726     82.375      2.099      0.036      11.347     334.398\n",
      "Car.use_Commute           479.7155    198.830      2.413      0.016      89.836     869.595\n",
      "Car.use_Farmer           -493.1254    521.069     -0.946      0.344   -1514.872     528.621\n",
      "Car.use_Private           336.5570    209.244      1.608      0.108     -73.741     746.855\n",
      "Region_Urban              -17.6842     99.665     -0.177      0.859    -213.114     177.745\n",
      "Credit_score_cat_Low      992.2218    188.279      5.270      0.000     623.033    1361.411\n",
      "Credit_score_cat_Medium   167.5189     89.107      1.880      0.060      -7.208     342.246\n",
      "==============================================================================\n",
      "Omnibus:                      450.334   Durbin-Watson:                   1.988\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              712.587\n",
      "Skew:                           1.175   Prob(JB):                    1.84e-155\n",
      "Kurtosis:                       3.960   Cond. No.                     4.57e+05\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 4.57e+05. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n",
      "RMSE: 1925.6852756384103\n",
      "                                        Variable  Coefficient\n",
      "const                                      const   579.935139\n",
      "Principal Component 1      Principal Component 1     0.001881\n",
      "Principal Component 2      Principal Component 2     0.000997\n",
      "Principal Component 3      Principal Component 3    -0.001787\n",
      "Principal Component 4      Principal Component 4     0.004409\n",
      "Principal Component 5      Principal Component 5    -0.000954\n",
      "Duration                                Duration     3.079918\n",
      "Car.age                                  Car.age     4.733036\n",
      "Annual.miles.drive            Annual.miles.drive     0.007824\n",
      "Years.noclaims                    Years.noclaims   -14.236451\n",
      "Territory                              Territory     1.201563\n",
      "Insured.sex_Male                Insured.sex_Male    18.131124\n",
      "Marital_Single                    Marital_Single   172.872601\n",
      "Car.use_Commute                  Car.use_Commute   479.715512\n",
      "Car.use_Farmer                    Car.use_Farmer  -493.125414\n",
      "Car.use_Private                  Car.use_Private   336.556952\n",
      "Region_Urban                        Region_Urban   -17.684249\n",
      "Credit_score_cat_Low        Credit_score_cat_Low   992.221786\n",
      "Credit_score_cat_Medium  Credit_score_cat_Medium   167.518946\n"
     ]
    }
   ],
   "source": [
    "# Supprimer les colonnes corrélées, ici `Insured.age` par exemple, et garder les autres variables explicatives\n",
    "X = claims_insurance.drop(columns=['Id_pol', 'NB_Claim', 'AMT_Claim', 'Insured.age'])\n",
    "\n",
    "# Encoder les variables catégorielles\n",
    "categorical_cols = X.select_dtypes(include='object').columns\n",
    "X = pd.get_dummies(X, columns=categorical_cols, drop_first=True)\n",
    "\n",
    "# Ajouter la constante (intercept)\n",
    "X = sm.add_constant(X)\n",
    "\n",
    "# Variable dépendante (AMT_Claim)\n",
    "y = claims_insurance['AMT_Claim']\n",
    "\n",
    "# Séparer les données en ensembles d'entraînement et de test\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
    "\n",
    "# Construire le modèle de régression linéaire\n",
    "model = sm.OLS(y_train, X_train)\n",
    "results = model.fit()\n",
    "\n",
    "# Afficher le résumé du modèle\n",
    "print(results.summary())\n",
    "\n",
    "# Faire des prédictions sur l'ensemble de test\n",
    "y_pred = results.predict(X_test)\n",
    "\n",
    "# Calculer le RMSE (Root Mean Squared Error)\n",
    "rmse = np.sqrt(np.mean((y_test - y_pred) ** 2))\n",
    "print(f\"RMSE: {rmse}\")\n",
    "\n",
    "# Afficher les coefficients du modèle\n",
    "coefficients = pd.DataFrame({'Variable': X_train.columns, 'Coefficient': results.params})\n",
    "print(coefficients)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1998121d",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "### Résultats Clés\n",
    "1. **R-carré**: Le coefficient de détermination (R-squared) de 0,059 indique que le modèle explique environ 5,9 % de la variance totale du montant des réclamations. Cela suggère qu'il existe d'autres facteurs importants non pris en compte dans ce modèle.\n",
    "\n",
    "2. **Coefficients Statistiquement Significatifs**:\n",
    "   - **Duration**: Chaque unité d'augmentation dans la durée d'assurance correspond à une augmentation moyenne de 3,08 dans le montant des réclamations, avec une valeur p très significative (p < 0,001).\n",
    "   - **Years.noclaims**: Chaque année supplémentaire sans réclamation réduit le montant des réclamations en moyenne de 14,24. C'est également une variable significative (p < 0,001).\n",
    "   - **Marital_Single**: Être célibataire est associé à une augmentation moyenne de 172,87 du montant des réclamations (p = 0,036).\n",
    "   - **Car.use_Commute**: L'utilisation de la voiture pour le trajet domicile-travail augmente en moyenne le montant des réclamations de 479,71 (p = 0,016).\n",
    "   - **Credit_score_cat_Low**: Les personnes ayant un faible score de crédit ont en moyenne des réclamations plus élevées de 992,22 par rapport à celles avec un score élevé.\n",
    "\n",
    "3. **Coefficients Non Significatifs**:\n",
    "   - Les coefficients des variables `Principal Component` (1-5), `Car.age`, `Annual.miles.drive`, `Territory`, `Insured.sex`, `Region`, et `Car.use_Farmer` ne sont pas significatifs statistiquement. Cela signifie que leur contribution dans la prédiction du montant des réclamations n'est pas assez fiable avec les données fournies.\n",
    "\n",
    "4. **Multicolinéarité**:\n",
    "   - **Condition Number**: Un condition number élevé (4.57e+05) indique une forte multicolinéarité. Cela signifie que certaines variables pourraient être fortement corrélées entre elles, affectant la stabilité des coefficients.\n",
    "\n",
    "5. **Distribution des Résidus**:\n",
    "   - **Skewness et Kurtosis**: La valeur Omnibus élevée et les résultats du test Jarque-Bera montrent que les résidus ne sont pas parfaitement normaux, ce qui peut suggérer une légère asymétrie (skewness) et une forte concentration des valeurs (kurtosis). Ceci peut affecter les prédictions du modèle.\n",
    "\n",
    "6. **RMSE (Root Mean Squared Error)**:\n",
    "   - Un RMSE de 1925,69 indique l'écart moyen entre les valeurs prédites et réelles du montant des réclamations. C'est une métrique clé pour évaluer la précision du modèle.\n",
    "\n",
    "### Conclusion\n",
    "Bien que certaines variables explicatives montrent une influence statistiquement significative sur le montant des réclamations, le faible R-carré suggère que d'autres facteurs influencent fortement cette variable cible. La multicolinéarité élevée pourrait également nécessiter une vérification plus approfondie des variables indépendantes.\n",
    "\n",
    "On peut envisager envisager de:\n",
    "1. Réduire la multicolinéarité en effectuant une sélection plus stricte des variables.\n",
    "2. Tester d'autres modèles non linéaires ou augmenter le nombre de variables pour capturer davantage de variance.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "id": "38a1a8bd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                    feature         VIF\n",
      "0                     const  115.434420\n",
      "1     Principal Component 1    1.003876\n",
      "2     Principal Component 2    1.030921\n",
      "3     Principal Component 3    1.004021\n",
      "4     Principal Component 4    1.032404\n",
      "5     Principal Component 5    1.002311\n",
      "6                  Duration    1.122039\n",
      "7                   Car.age    1.040424\n",
      "8        Annual.miles.drive    1.228622\n",
      "9            Years.noclaims    1.390436\n",
      "10                Territory    1.008882\n",
      "11         Insured.sex_Male    1.034297\n",
      "12           Marital_Single    1.122257\n",
      "13          Car.use_Commute    6.411500\n",
      "14           Car.use_Farmer    1.159654\n",
      "15          Car.use_Private    6.892168\n",
      "16             Region_Urban    1.063490\n",
      "17     Credit_score_cat_Low    1.071910\n",
      "18  Credit_score_cat_Medium    1.091726\n"
     ]
    }
   ],
   "source": [
    "# Calculer les VIF pour chaque variable\n",
    "vif_data = pd.DataFrame()\n",
    "vif_data['feature'] = X.columns\n",
    "vif_data['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\n",
    "print(vif_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c48286e",
   "metadata": {},
   "source": [
    "Les résultats du VIF indiquent qu'il n'y a pas de multicolinéarité excessive dans les variables principales, sauf pour const (la constante), et peut-être pour les variables Car.use_Commute et Car.use_Private, qui présentent des valeurs VIF relativement élevées (> 5).\n",
    "\n",
    "Ce qu'on peut faire:\n",
    "\n",
    "Supprimer la Constante: La valeur élevée du VIF pour const est normale, car c'est l'intercept du modèle. Aucune action nécessaire ici.\n",
    "\n",
    "Grouper ou Supprimer Car.use:\n",
    "Les VIF élevés pour Car.use_Commute (6,41) et Car.use_Private (6,89) indiquent une potentielle multicolinéarité.\n",
    "On va donc devoir supprimer Car.use_Commute ou Car.use_Private et ré-entraîner le Modèle.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "id": "166d81a5",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Colonnes après encodage :\n",
      "Index(['Principal Component 1', 'Principal Component 2',\n",
      "       'Principal Component 3', 'Principal Component 4',\n",
      "       'Principal Component 5', 'Duration', 'Car.age', 'Annual.miles.drive',\n",
      "       'Years.noclaims', 'Territory', 'Insured.sex_Male', 'Marital_Single',\n",
      "       'Car.use_Commute', 'Car.use_Farmer', 'Car.use_Private', 'Region_Urban',\n",
      "       'Credit_score_cat_Low', 'Credit_score_cat_Medium'],\n",
      "      dtype='object')\n",
      "Colonnes `Car.use` à supprimer :\n",
      "['Car.use_Commute', 'Car.use_Farmer', 'Car.use_Private']\n",
      "                    feature        VIF\n",
      "0                     const  79.643380\n",
      "1     Principal Component 1   1.003680\n",
      "2     Principal Component 2   1.030756\n",
      "3     Principal Component 3   1.002913\n",
      "4     Principal Component 4   1.032027\n",
      "5     Principal Component 5   1.001735\n",
      "6                  Duration   1.117031\n",
      "7                   Car.age   1.036072\n",
      "8        Annual.miles.drive   1.030464\n",
      "9            Years.noclaims   1.235771\n",
      "10                Territory   1.007799\n",
      "11         Insured.sex_Male   1.033592\n",
      "12           Marital_Single   1.116251\n",
      "13             Region_Urban   1.050285\n",
      "14     Credit_score_cat_Low   1.070150\n",
      "15  Credit_score_cat_Medium   1.085329\n",
      "RMSE (Modèle Polynomial): 19459.222650876098\n",
      "                                         Variable    Coefficient\n",
      "0                                           const -778218.203346\n",
      "1                           Principal Component 1       1.683167\n",
      "2                           Principal Component 2      -0.450129\n",
      "3                           Principal Component 3      -1.200071\n",
      "4                           Principal Component 4      -0.157967\n",
      "..                                            ...            ...\n",
      "147             Region_Urban Credit_score_cat_Low    -652.520823\n",
      "148          Region_Urban Credit_score_cat_Medium    -602.695384\n",
      "149                        Credit_score_cat_Low^2    -596.404733\n",
      "150  Credit_score_cat_Low Credit_score_cat_Medium       0.000000\n",
      "151                     Credit_score_cat_Medium^2     578.340893\n",
      "\n",
      "[152 rows x 2 columns]\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import statsmodels.api as sm\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
    "\n",
    "# Charger les données\n",
    "claims_data = claims_insurance\n",
    "\n",
    "# Garder uniquement les variables pertinentes\n",
    "X = claims_data.drop(columns=['Id_pol', 'NB_Claim', 'AMT_Claim', 'Insured.age'])\n",
    "\n",
    "# Encoder les variables catégorielles\n",
    "categorical_cols = X.select_dtypes(include='object').columns\n",
    "X = pd.get_dummies(X, columns=categorical_cols, drop_first=True)\n",
    "\n",
    "# Vérifiez quelles colonnes sont disponibles\n",
    "print(\"Colonnes après encodage :\")\n",
    "print(X.columns)\n",
    "\n",
    "# Identifiez les colonnes `Car.use_*` après l'encodage\n",
    "car_use_columns = [col for col in X.columns if col.startswith(\"Car.use\")]\n",
    "print(\"Colonnes `Car.use` à supprimer :\")\n",
    "print(car_use_columns)\n",
    "\n",
    "# Supprimez uniquement les colonnes `Car.use` présentes\n",
    "X = X.drop(columns=car_use_columns, errors='ignore')\n",
    "\n",
    "# Ajouter la constante\n",
    "X = sm.add_constant(X)\n",
    "\n",
    "# Vérifiez les VIF après la réduction des variables corrélées\n",
    "vif_data = pd.DataFrame()\n",
    "vif_data['feature'] = X.columns\n",
    "vif_data['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\n",
    "print(vif_data)\n",
    "\n",
    "# Variable cible\n",
    "y = claims_data['AMT_Claim']\n",
    "\n",
    "# Diviser les données en ensembles d'entraînement et de test\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
    "\n",
    "# Modèle polynomial (par exemple, degré 2)\n",
    "poly = PolynomialFeatures(degree=2, include_bias=False)\n",
    "X_train_poly = poly.fit_transform(X_train)\n",
    "X_test_poly = poly.transform(X_test)\n",
    "\n",
    "# Régression linéaire sur les nouvelles données polynomiales\n",
    "model_poly = LinearRegression()\n",
    "model_poly.fit(X_train_poly, y_train)\n",
    "\n",
    "# Prédictions sur l'ensemble de test\n",
    "y_pred_poly = model_poly.predict(X_test_poly)\n",
    "\n",
    "# Calculer le RMSE pour le modèle polynomial\n",
    "rmse_poly = np.sqrt(np.mean((y_test - y_pred_poly) ** 2))\n",
    "print(f\"RMSE (Modèle Polynomial): {rmse_poly}\")\n",
    "\n",
    "# Afficher les coefficients du modèle polynomial\n",
    "coefficients_poly = pd.DataFrame({\n",
    "    'Variable': poly.get_feature_names_out(X.columns),\n",
    "    'Coefficient': model_poly.coef_\n",
    "})\n",
    "print(coefficients_poly)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "199e7f43",
   "metadata": {},
   "source": [
    "## Résultats Importants\n",
    "\n",
    "### VIF (Multicolinéarité Réduite):\n",
    "\n",
    "Les VIF indiquent que la multicolinéarité a été réduite pour toutes les variables explicatives, avec des valeurs inférieures à 10.\n",
    "La constante (intercept) a un VIF élevé, mais cela est normal et attendu.\n",
    "\n",
    "RMSE (Erreur Quadratique Moyenne):\n",
    "Le RMSE du modèle polynomial est élevé à environ 19 459, suggérant que le modèle polynomial n'explique pas suffisamment bien la variance dans les données.\n",
    "\n",
    "Cela pourrait indiquer que les interactions de degré 2 ne sont peut-être pas la meilleure façon de modéliser cette relation.\n",
    "\n",
    "Coefficients:\n",
    "\n",
    "Le tableau des coefficients affiche les effets de chaque interaction entre les variables après la transformation polynomiale.\n",
    "\n",
    "Certains coefficients affichent des valeurs élevées (comme l'intercept négatif à -778 218), ce qui peut être un signe de surajustement.\n",
    "\n",
    "\n",
    "\n",
    "Modèle Alternatif:\n",
    "\n",
    "Explorer des modèles alternatifs non linéaires, comme la régression avec régularisation (Lasso ou Ridge), les forêts aléatoires (Random Forests) ou les modèles de boosting (e.g., Gradient Boosting).\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23432be4",
   "metadata": {},
   "source": [
    "# Machine Learning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "id": "19d0cec4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSE (Modèle Ridge): 1925.2619877285629\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import Ridge\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.pipeline import Pipeline\n",
    "\n",
    "# Créer un pipeline de normalisation et de régression Ridge\n",
    "ridge_pipeline = Pipeline([\n",
    "    ('scaler', StandardScaler()),  # Normalisation\n",
    "    ('ridge', Ridge(alpha=1.0))  # Régression Ridge avec régularisation\n",
    "])\n",
    "\n",
    "# Entraîner le modèle sur les données d'entraînement\n",
    "ridge_pipeline.fit(X_train, y_train)\n",
    "\n",
    "# Prédictions sur l'ensemble de test\n",
    "y_pred_ridge = ridge_pipeline.predict(X_test)\n",
    "\n",
    "# Calculer le RMSE pour la régression Ridge\n",
    "rmse_ridge = np.sqrt(np.mean((y_test - y_pred_ridge) ** 2))\n",
    "print(f\"RMSE (Modèle Ridge): {rmse_ridge}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "id": "02a96b0c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                   Variable  Coefficient\n",
      "9            Years.noclaims  -238.357869\n",
      "14     Credit_score_cat_Low   204.659062\n",
      "6                  Duration   168.595215\n",
      "12           Marital_Single    87.152468\n",
      "15  Credit_score_cat_Medium    83.217032\n",
      "1     Principal Component 1    58.547200\n",
      "8        Annual.miles.drive    35.019487\n",
      "10                Territory    29.167608\n",
      "2     Principal Component 2    21.487500\n",
      "3     Principal Component 3   -14.737529\n",
      "7                   Car.age    11.773029\n",
      "4     Principal Component 4     8.044750\n",
      "13             Region_Urban    -6.924898\n",
      "11         Insured.sex_Male     5.618435\n",
      "5     Principal Component 5    -3.965141\n",
      "0                     const     0.000000\n"
     ]
    }
   ],
   "source": [
    "# Récupérer le modèle Ridge du pipeline\n",
    "ridge_model = ridge_pipeline.named_steps['ridge']\n",
    "\n",
    "# Afficher les coefficients avec les noms des caractéristiques\n",
    "coefficients_ridge = pd.DataFrame({\n",
    "    'Variable': X_train.columns,\n",
    "    'Coefficient': ridge_model.coef_\n",
    "})\n",
    "\n",
    "# Trier par l'importance absolue des coefficients\n",
    "coefficients_ridge = coefficients_ridge.reindex(coefficients_ridge['Coefficient'].abs().sort_values(ascending=False).index)\n",
    "print(coefficients_ridge)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4971c856",
   "metadata": {},
   "source": [
    "Le RMSE (Erreur Quadratique Moyenne) du modèle Ridge montre une amélioration significative, passant de plus de 19 000 (modèle polynomial) à environ 1925. Cela indique que la régularisation Ridge gère mieux les caractéristiques explicatives en évitant le surajustement et en améliorant la prédiction.\n",
    "\n",
    "Interprétation de ce Résultat\n",
    "\n",
    "Réduction du Surajustement:\n",
    "\n",
    "Le modèle Ridge applique une pénalité sur la magnitude des coefficients, ce qui aide à réduire le surajustement observé dans les modèles polynomiaux.\n",
    "Le RMSE plus faible montre que le modèle est plus généralizable.\n",
    "\n",
    "Régularisation:\n",
    "\n",
    "La régularisation Ridge (L2) fonctionne bien pour contrôler les coefficients sans les réduire à zéro.\n",
    "Cela conserve la plupart des caractéristiques tout en minimisant les effets des variables moins pertinentes.\n",
    "\n",
    "Importance des Caractéristiques:\n",
    "\n",
    "Les coefficients obtenus à partir du modèle Ridge montrent l'influence de chaque variable explicative sur le montant des réclamations (`AMT_Claim`). Voici une analyse succincte de ces résultats :\n",
    "\n",
    "### Analyse des Coefficients\n",
    "\n",
    "1. **Years.noclaims (-238.36)**:\n",
    "   - Chaque année sans réclamation réduit en moyenne le montant des réclamations de 238,36. Ceci suggère que plus les assurés restent longtemps sans faire de réclamations, plus ils ont tendance à réclamer des montants inférieurs.\n",
    "\n",
    "2. **Credit_score_cat_Low (204.66)**:\n",
    "   - Les personnes ayant un faible score de crédit (`Low`) demandent en moyenne 204,66 de plus que celles ayant un score élevé. Cela souligne l'importance du crédit en tant qu'indicateur de risque.\n",
    "\n",
    "3. **Duration (168.60)**:\n",
    "   - La durée d'assurance est positivement corrélée au montant des réclamations, suggérant que les clients avec une durée plus longue font face à des réclamations plus élevées.\n",
    "\n",
    "4. **Marital_Single (87.15)**:\n",
    "   - Les personnes célibataires semblent réclamer environ 87,15 de plus que celles en couple, indiquant potentiellement une différence de comportement ou d'exposition au risque.\n",
    "\n",
    "5. **Principal Components**:\n",
    "   - **PC1 (58.55)**: Aide à expliquer une certaine variance positive du montant des réclamations.\n",
    "   - **PC2 (21.49)** et **PC3 (-14.74)**: Contribuent aussi, mais moins significativement.\n",
    "\n",
    "6. **Annual.miles.drive (35.02)**:\n",
    "   - Plus un assuré conduit annuellement, plus les réclamations moyennes augmentent, indiquant un risque plus élevé pour les gros rouleurs.\n",
    "\n",
    "7. **Territory (29.17)**:\n",
    "   - Montre que certaines zones géographiques peuvent influencer positivement le montant des réclamations.\n",
    "\n",
    "8. **Car.age (11.77)**:\n",
    "   - L'âge du véhicule a un effet positif mais mineur.\n",
    "\n",
    "9. **Insured.sex_Male (5.62)**:\n",
    "   - Les hommes semblent avoir des montants de réclamations légèrement plus élevés.\n",
    "\n",
    "10. **Constante**:\n",
    "   - La constante est nulle ici en raison de la normalisation ou des transformations effectuées.\n",
    "\n",
    "### Conclusion\n",
    "\n",
    "- **Signification**: Les coefficients montrent que certains facteurs comme `Years.noclaims`, le score de crédit, la durée d'assurance, et le statut marital sont particulièrement significatifs pour prévoir le montant des réclamations.\n",
    "- **Utilisation Pratique**: Ces résultats peuvent informer les décisions stratégiques pour l'établissement des primes et la gestion du risque.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a6c87d0",
   "metadata": {},
   "source": [
    "En intégrant l'analyse des composantes principales dans la compréhension des coefficients de la régression Ridge, nous pouvons formuler les observations suivantes :\n",
    "\n",
    "1. **Principal Component 1 (PC1)**:\n",
    "   - **Coefficient (58.55)**: Une augmentation de PC1 est positivement corrélée au montant des réclamations.\n",
    "   - **Contenu**: PC1 reflète principalement **Annual.pct.driven**, indiquant que l'intensité annuelle de conduite est liée à une augmentation des réclamations.\n",
    "   - **Interprétation**: Les conducteurs qui conduisent plus fréquemment ou plus longtemps chaque année pourraient avoir un risque accru d'accidents, augmentant ainsi leurs montants réclamés.\n",
    "\n",
    "2. **Principal Component 2 (PC2)**:\n",
    "   - **Coefficient (21.49)**: PC2 montre une corrélation positive plus faible avec le montant des réclamations.\n",
    "   - **Contenu**: Les intensités des virages à gauche et à droite (**Left.turn.intensity** et **Right.turn.intensity**) contribuent majoritairement à PC2.\n",
    "   - **Interprétation**: Les habitudes de virage peuvent refléter le comportement global d'un conducteur, influençant légèrement les risques.\n",
    "\n",
    "3. **Principal Component 3 (PC3)**:\n",
    "   - **Coefficient (-14.74)**: PC3 a une corrélation négative avec le montant des réclamations.\n",
    "   - **Contenu**: Les comportements d'accélération et de freinage (**Accel** et **Brake**) influencent principalement cette composante.\n",
    "   - **Interprétation**: Les conducteurs qui accélèrent et freinent de manière agressive semblent moins susceptibles de déclarer des montants de réclamations élevés, probablement en raison de l'adaptation de leur style de conduite.\n",
    "\n",
    "4. **Principal Component 4 (PC4)**:\n",
    "   - **Coefficient (8.04)**: PC4 présente un coefficient positif faible.\n",
    "   - **Contenu**: PC4 est dominée par les variables de freinage et de virage.\n",
    "   - **Interprétation**: Les comportements subtils, comme des freinages plus doux, pourraient signaler un conducteur prudent, mais l'influence est modérée.\n",
    "\n",
    "5. **Principal Component 5 (PC5)**:\n",
    "   - **Coefficient (-3.97)**: PC5 présente un effet mineur et négatif sur les réclamations.\n",
    "   - **Contenu**: Les variables ne montrent pas de contribution dominante ici.\n",
    "   - **Interprétation**: PC5 capture probablement des variations mineures qui n'ont pas d'effet significatif sur le montant des réclamations.\n",
    "\n",
    "### Intégration avec les Variables Conventionnelles\n",
    "\n",
    "1. **Years.noclaims (-238.36)**:\n",
    "   - Les conducteurs ayant plus d'années sans réclamations sont moins susceptibles de réclamer des montants élevés.\n",
    "   - Cette variable reste un indicateur clé du risque.\n",
    "\n",
    "2. **Credit Score**:\n",
    "   - **Low (204.66)** et **Medium (83.22)**: Les individus ayant un score de crédit faible ou moyen ont tendance à réclamer plus que ceux avec un score élevé.\n",
    "\n",
    "3. **Duration (168.60)**:\n",
    "   - La durée totale de la couverture d'assurance a un effet positif sur le montant des réclamations.\n",
    "\n",
    "4. **Marital_Single (87.15)**:\n",
    "   - Les célibataires sont associés à des réclamations légèrement plus élevées.\n",
    "\n",
    "### Conclusion Générale\n",
    "\n",
    "- Les composantes principales offrent une vue synthétique du comportement de conduite, influençant directement le montant des réclamations.\n",
    "- L'analyse combinée des coefficients de la régression Ridge et des composantes principales aide à identifier les indicateurs clés du risque.\n",
    "  \n",
    "Avez-vous besoin d'une analyse plus détaillée sur d'autres aspects de la régression ou des composantes principales ?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "id": "72b27395",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                   Variable  Coefficient  Lower 2.5%  Upper 97.5%\n",
      "0                     const     0.000000    0.000000     0.000000\n",
      "1     Principal Component 1    58.547200   -0.003740     0.018263\n",
      "2     Principal Component 2    21.487500   -0.109824     0.009662\n",
      "3     Principal Component 3   -14.737529   -0.069447     0.175993\n",
      "4     Principal Component 4     8.044750   -0.115850     0.162195\n",
      "5     Principal Component 5    -3.965141   -0.015623     0.014343\n",
      "6                  Duration   168.595215    1.889941     4.319285\n",
      "7                   Car.age    11.773029  -16.927170    23.207297\n",
      "8        Annual.miles.drive    35.019487   -0.012069     0.031949\n",
      "9            Years.noclaims  -238.357869  -20.729810   -10.263565\n",
      "10                Territory    29.167608   -1.668974     4.324621\n",
      "11         Insured.sex_Male     5.618435 -156.236492   157.506958\n",
      "12           Marital_Single    87.152468   21.309294   341.653934\n",
      "13             Region_Urban    -6.924898 -220.402768   155.154540\n",
      "14     Credit_score_cat_Low   204.659062  548.387518  1432.768060\n",
      "15  Credit_score_cat_Medium    83.217032  -10.455468   380.293713\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.linear_model import Ridge\n",
    "from sklearn.utils import resample\n",
    "\n",
    "# Fonction pour estimer les coefficients Ridge avec Bootstrap\n",
    "def ridge_bootstrap(X, y, num_iterations=1000, alpha=1.0):\n",
    "    ridge_coefs = []\n",
    "    for _ in range(num_iterations):\n",
    "        X_sample, y_sample = resample(X, y)  # Échantillonnage avec remplacement\n",
    "        model = Ridge(alpha=alpha)\n",
    "        model.fit(X_sample, y_sample)\n",
    "        ridge_coefs.append(model.coef_)\n",
    "    return np.array(ridge_coefs)\n",
    "\n",
    "# Appliquer le bootstrap pour obtenir la distribution des coefficients\n",
    "ridge_coefs_bootstrap = ridge_bootstrap(X_train, y_train, num_iterations=1000, alpha=1.0)\n",
    "\n",
    "# Calculer les intervalles de confiance (2.5ème et 97.5ème percentiles)\n",
    "coef_intervals = np.percentile(ridge_coefs_bootstrap, [2.5, 97.5], axis=0)\n",
    "\n",
    "# Créer un DataFrame pour afficher les résultats\n",
    "coef_summary = pd.DataFrame({\n",
    "    'Variable': X_train.columns,\n",
    "    'Coefficient': ridge_pipeline.named_steps['ridge'].coef_,\n",
    "    'Lower 2.5%': coef_intervals[0, :],\n",
    "    'Upper 97.5%': coef_intervals[1, :]\n",
    "})\n",
    "print(coef_summary)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "41df2ce4",
   "metadata": {},
   "source": [
    "L'utilisation de la méthode bootstrap permet d'estimer la significativité des coefficients. \n",
    "\n",
    "### Interprétation des Résultats\n",
    "\n",
    "1. **Constante (Intercept)**:\n",
    "   - La constante est toujours affichée à zéro dans ce modèle, donc pas de significativité particulière ici.\n",
    "\n",
    "2. **Principal Component 1 (PC1)**:\n",
    "   - **Coefficient: 58.55**; **Intervalle: [-0.00374, 0.01826]**\n",
    "   - L'intervalle de confiance contient zéro, ce qui signifie que PC1 n'est pas significatif.\n",
    "\n",
    "3. **Principal Component 2 (PC2)**:\n",
    "   - **Coefficient: 21.49**; **Intervalle: [-0.10982, 0.00966]**\n",
    "   - PC2 n'est pas non plus statistiquement significatif.\n",
    "\n",
    "4. **Principal Component 3 à 5 (PC3 - PC5)**:\n",
    "   - Les intervalles de ces composantes principales contiennent zéro, donc elles ne sont pas significatives.\n",
    "\n",
    "5. **Duration (168.60)**:\n",
    "   - **Intervalle: [1.88994, 4.31929]**\n",
    "   - La variable `Duration` est significative car l'intervalle ne contient pas zéro.\n",
    "\n",
    "6. **Car.age (11.77)**:\n",
    "   - **Intervalle: [-16.92717, 23.20730]**\n",
    "   - `Car.age` n'est pas significatif.\n",
    "\n",
    "7. **Annual.miles.drive (35.02)**:\n",
    "   - **Intervalle: [-0.01207, 0.03195]**\n",
    "   - `Annual.miles.drive` n'est pas significatif.\n",
    "\n",
    "8. **Years.noclaims (-238.36)**:\n",
    "   - **Intervalle: [-20.72981, -10.26357]**\n",
    "   - `Years.noclaims` est significatif car l'intervalle ne contient pas zéro.\n",
    "\n",
    "9. **Territory (29.17)**:\n",
    "   - **Intervalle: [-1.66897, 4.32462]**\n",
    "   - `Territory` n'est pas significatif.\n",
    "\n",
    "10. **Insured.sex_Male (5.62)**:\n",
    "   - **Intervalle: [-156.23649, 157.50696]**\n",
    "   - `Insured.sex_Male` n'est pas significatif.\n",
    "\n",
    "11. **Marital_Single (87.15)**:\n",
    "   - **Intervalle: [21.30929, 341.65393]**\n",
    "   - `Marital_Single` est significatif.\n",
    "\n",
    "12. **Region_Urban (-6.92)**:\n",
    "   - **Intervalle: [-220.40277, 155.15454]**\n",
    "   - `Region_Urban` n'est pas significatif.\n",
    "\n",
    "13. **Credit_score_cat_Low (204.66)**:\n",
    "   - **Intervalle: [548.38752, 1432.76806]**\n",
    "   - `Credit_score_cat_Low` est significatif.\n",
    "\n",
    "14. **Credit_score_cat_Medium (83.22)**:\n",
    "   - **Intervalle: [-10.45547, 380.29371]**\n",
    "   - `Credit_score_cat_Medium` n'est pas significatif.\n",
    "\n",
    "### Conclusion\n",
    "\n",
    "- **Significatifs**: `Duration`, `Years.noclaims`, `Marital_Single`, et `Credit_score_cat_Low` sont les variables explicatives qui montrent une relation significative avec le montant des réclamations.\n",
    "- **Non Significatifs**: Les autres variables ont des intervalles de confiance contenant zéro, ce qui signifie que leur influence sur le montant des réclamations n'est pas statistiquement prouvée dans ce modèle.\n",
    "\n",
    "Ces résultats permettent d'affiner l'analyse des variables influençant les réclamations et de mieux comprendre leur impact relatif.\n",
    "\n",
    "\n",
    "Les coefficients d'une régression Ridge ne viennent pas directement avec des valeurs de p comme c'est le cas pour une régression linéaire classique, car cette méthode utilise une régularisation qui change la nature des tests statistiques. Cependant, il est possible d'obtenir une estimation approximative de leur significativité en utilisant la méthode bootstrap ou des tests alternatifs.\n",
    "\n",
    "Calcul de l'Intervalle de Confiance par Bootstrap\n",
    "\n",
    "Méthode Bootstrap: Cette méthode consiste à échantillonner de manière répétée avec remplacement à partir du jeu de données d'origine pour créer des estimations de la distribution des coefficients.\n",
    "\n",
    "Interprétation des Résultats\n",
    "\n",
    "Intervalle de Confiance: Si un intervalle de confiance d'un coefficient ne contient pas zéro, alors ce coefficient est considéré comme significatif avec un niveau de confiance d'environ 95 %.\n",
    "\n",
    "Explication du Code\n",
    "\n",
    "Échantillonnage Bootstrap: Le jeu de données est rééchantillonné pour obtenir une distribution des coefficients estimés.\n",
    "\n",
    "Intervalles: Les intervalles de confiance sont calculés en utilisant les percentiles 2.5 et 97.5 des coefficients bootstrap.\n",
    "\n",
    "Cette méthode fournit une estimation approximative de la significativité des coefficients et aide à identifier ceux qui sont statistiquement pertinents pour la prédiction du montant des réclamations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "id": "9717db0f",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/Abraham/anaconda3/lib/python3.10/site-packages/sklearn/preprocessing/_encoders.py:828: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSE (Ridge): 1923.8138811797955\n",
      "RMSE (Random Forest): 1849.2658493957504\n",
      "RMSE (XGBoost): 1878.7229639601564\n",
      "          Modèle         RMSE\n",
      "0          Ridge  1923.813881\n",
      "1  Random Forest  1849.265849\n",
      "2        XGBoost  1878.722964\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.linear_model import Ridge\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.pipeline import Pipeline\n",
    "from xgboost import XGBRegressor\n",
    "\n",
    "# Charger les données\n",
    "claims_data = claims_insurance\n",
    "\n",
    "# Garder uniquement les variables pertinentes\n",
    "X = claims_data.drop(columns=['Id_pol', 'NB_Claim', 'AMT_Claim', 'Insured.age'])\n",
    "\n",
    "# Encoder les variables catégorielles\n",
    "categorical_cols = X.select_dtypes(include='object').columns\n",
    "encoder = OneHotEncoder(drop='first', sparse=False)\n",
    "X_encoded = pd.DataFrame(encoder.fit_transform(X[categorical_cols]), columns=encoder.get_feature_names_out(categorical_cols))\n",
    "X = pd.concat([X.drop(columns=categorical_cols), X_encoded], axis=1)\n",
    "\n",
    "# Diviser les données en ensembles d'entraînement et de test\n",
    "y = claims_data['AMT_Claim']\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
    "\n",
    "# Normaliser les données\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "\n",
    "# Modèle 1: Régression Ridge avec recherche d'hyperparamètres\n",
    "ridge = Ridge()\n",
    "ridge_params = {'alpha': [0.1, 1, 10, 100]}\n",
    "ridge_search = GridSearchCV(ridge, ridge_params, scoring='neg_mean_squared_error', cv=5)\n",
    "ridge_search.fit(X_train_scaled, y_train)\n",
    "y_pred_ridge = ridge_search.predict(X_test_scaled)\n",
    "rmse_ridge = np.sqrt(mean_squared_error(y_test, y_pred_ridge))\n",
    "print(f\"RMSE (Ridge): {rmse_ridge}\")\n",
    "\n",
    "# Modèle 2: Random Forest\n",
    "rf = RandomForestRegressor(random_state=42)\n",
    "rf_params = {'n_estimators': [50, 100, 200], 'max_depth': [5, 10, 20]}\n",
    "rf_search = GridSearchCV(rf, rf_params, scoring='neg_mean_squared_error', cv=5)\n",
    "rf_search.fit(X_train, y_train)\n",
    "y_pred_rf = rf_search.predict(X_test)\n",
    "rmse_rf = np.sqrt(mean_squared_error(y_test, y_pred_rf))\n",
    "print(f\"RMSE (Random Forest): {rmse_rf}\")\n",
    "\n",
    "# Modèle 3: XGBoost\n",
    "xgb = XGBRegressor(objective='reg:squarederror', random_state=42)\n",
    "xgb_params = {\n",
    "    'n_estimators': [50, 100, 200],\n",
    "    'learning_rate': [0.01, 0.1, 0.2],\n",
    "    'max_depth': [3, 5, 10]\n",
    "}\n",
    "xgb_search = GridSearchCV(xgb, xgb_params, scoring='neg_mean_squared_error', cv=5)\n",
    "xgb_search.fit(X_train, y_train)\n",
    "y_pred_xgb = xgb_search.predict(X_test)\n",
    "rmse_xgb = np.sqrt(mean_squared_error(y_test, y_pred_xgb))\n",
    "print(f\"RMSE (XGBoost): {rmse_xgb}\")\n",
    "\n",
    "# Résumé des résultats\n",
    "results = {\n",
    "    'Modèle': ['Ridge', 'Random Forest', 'XGBoost'],\n",
    "    'RMSE': [rmse_ridge, rmse_rf, rmse_xgb]\n",
    "}\n",
    "results_df = pd.DataFrame(results)\n",
    "print(results_df)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "65768358",
   "metadata": {},
   "source": [
    "Explication du Code\n",
    "\n",
    "Prétraitement: Les données catégorielles sont encodées et les numériques normalisées.\n",
    "\n",
    "GridSearchCV: Optimise les modèles par validation croisée.\n",
    "\n",
    "Comparaison: Différents modèles sont comparés pour trouver la meilleure performance.\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c68c7dbb",
   "metadata": {},
   "source": [
    "Les résultats montrent les RMSE obtenus pour chaque modèle :\n",
    "\n",
    "1. **Ridge**: 1923.81\n",
    "2. **Random Forest**: 1849.27\n",
    "3. **XGBoost**: 1878.72\n",
    "\n",
    "### Interprétation des Résultats\n",
    "\n",
    "- **Meilleure Performance**:\n",
    "  - Le modèle Random Forest offre la meilleure performance en termes de RMSE (1849.27), ce qui indique qu'il prédit le montant des réclamations avec plus de précision que les deux autres modèles.\n",
    "  - XGBoost se situe en deuxième position (1878.72), tandis que la régression Ridge est la moins performante (1923.81).\n",
    "\n",
    "- **Modèle Random Forest**:\n",
    "  - Random Forest est un modèle basé sur un ensemble d'arbres de décision. Sa robustesse provient de sa capacité à gérer les non-linéarités et les interactions entre les variables.\n",
    "  - Cette méthode fonctionne bien avec les variables catégorielles et numériques, et n'est pas trop affectée par les valeurs manquantes.\n",
    "\n",
    "- **Modèle XGBoost**:\n",
    "  - XGBoost est un modèle basé sur le boosting, optimisé pour la vitesse et la performance.\n",
    "  - Il prend en compte les interactions complexes entre les variables.\n",
    "\n",
    "- **Modèle Ridge**:\n",
    "  - La régression Ridge fonctionne mieux pour les problèmes linéaires, mais elle n'est pas capable de capturer les relations complexes entre les variables.\n",
    "  - C'est pourquoi elle a un RMSE plus élevé.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "id": "a3228777",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/Abraham/anaconda3/lib/python3.10/site-packages/sklearn/preprocessing/_encoders.py:828: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Matrice de Confusion:\n",
      " [[348 200]\n",
      " [239 351]]\n",
      "\n",
      "Rapport de Classification:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.59      0.64      0.61       548\n",
      "           1       0.64      0.59      0.62       590\n",
      "\n",
      "    accuracy                           0.61      1138\n",
      "   macro avg       0.61      0.61      0.61      1138\n",
      "weighted avg       0.62      0.61      0.61      1138\n",
      "\n"
     ]
    },
    {
     "ename": "AttributeError",
     "evalue": "module 'matplotlib.pyplot' has no attribute 'pyplot'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[238], line 53\u001b[0m\n\u001b[1;32m     50\u001b[0m fpr_rf, tpr_rf, _ \u001b[38;5;241m=\u001b[39m roc_curve(y_test, y_probs_rf)\n\u001b[1;32m     51\u001b[0m roc_auc_rf \u001b[38;5;241m=\u001b[39m auc(fpr_rf, tpr_rf)\n\u001b[0;32m---> 53\u001b[0m \u001b[43mplt\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpyplot\u001b[49m\u001b[38;5;241m.\u001b[39mfigure()\n\u001b[1;32m     54\u001b[0m plt\u001b[38;5;241m.\u001b[39mpyplot\u001b[38;5;241m.\u001b[39mplot(fpr_rf, tpr_rf, label\u001b[38;5;241m=\u001b[39m\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mRandom Forest (AUC = \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mroc_auc_rf\u001b[38;5;132;01m:\u001b[39;00m\u001b[38;5;124m.2f\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m)\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m     55\u001b[0m plt\u001b[38;5;241m.\u001b[39mpyplot\u001b[38;5;241m.\u001b[39mplot([\u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m1\u001b[39m], [\u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m1\u001b[39m], \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mk--\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
      "\u001b[0;31mAttributeError\u001b[0m: module 'matplotlib.pyplot' has no attribute 'pyplot'"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "# Charger les données\n",
    "claims_data = claims_insurance\n",
    "\n",
    "# Binarisation du montant de réclamations (au-dessus ou en dessous de la médiane)\n",
    "median_amt = claims_data['AMT_Claim'].median()\n",
    "claims_data['AMT_Claim_Class'] = np.where(claims_data['AMT_Claim'] >= median_amt, 1, 0)\n",
    "\n",
    "# Préparation des données\n",
    "X = claims_data.drop(columns=['Id_pol', 'NB_Claim', 'AMT_Claim', 'AMT_Claim_Class'])\n",
    "categorical_cols = X.select_dtypes(include='object').columns\n",
    "\n",
    "# Encodage des variables catégorielles\n",
    "encoder = OneHotEncoder(drop='first', sparse=False)\n",
    "X_encoded = pd.DataFrame(encoder.fit_transform(X[categorical_cols]), columns=encoder.get_feature_names_out(categorical_cols))\n",
    "X = pd.concat([X.drop(columns=categorical_cols), X_encoded], axis=1)\n",
    "\n",
    "# Normalisation des données\n",
    "scaler = StandardScaler()\n",
    "X = scaler.fit_transform(X)\n",
    "\n",
    "# Division des données\n",
    "y = claims_data['AMT_Claim_Class']\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
    "\n",
    "# Modèle: Random Forest Classifier avec recherche d'hyperparamètres\n",
    "rf = RandomForestClassifier(random_state=42)\n",
    "rf_params = {'n_estimators': [50, 100, 200], 'max_depth': [5, 10, 20]}\n",
    "rf_search = GridSearchCV(rf, rf_params, scoring='accuracy', cv=5)\n",
    "rf_search.fit(X_train, y_train)\n",
    "\n",
    "# Prédictions sur le jeu de test\n",
    "y_pred_rf = rf_search.predict(X_test)\n",
    "\n",
    "# Évaluation: Matrice de Confusion et Rapport de Classification\n",
    "conf_matrix = confusion_matrix(y_test, y_pred_rf)\n",
    "class_report = classification_report(y_test, y_pred_rf)\n",
    "print(\"Matrice de Confusion:\\n\", conf_matrix)\n",
    "print(\"\\nRapport de Classification:\\n\", class_report)\n",
    "\n",
    "# Courbe ROC\n",
    "y_probs_rf = rf_search.predict_proba(X_test)[:, 1]\n",
    "fpr_rf, tpr_rf, _ = roc_curve(y_test, y_probs_rf)\n",
    "roc_auc_rf = auc(fpr_rf, tpr_rf)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb20b098",
   "metadata": {},
   "source": [
    "Les résultats de la matrice de confusion et du rapport de classification offrent un aperçu de la performance du modèle Random Forest. Voici une interprétation détaillée :\n",
    "\n",
    "### Interprétation des Résultats\n",
    "\n",
    "1. **Matrice de Confusion**:\n",
    "   - **Vrais Positifs (TP)**: 351. Les réclamations élevées correctement identifiées.\n",
    "   - **Faux Positifs (FP)**: 200. Les réclamations faibles identifiées à tort comme élevées.\n",
    "   - **Faux Négatifs (FN)**: 239. Les réclamations élevées classées incorrectement comme faibles.\n",
    "   - **Vrais Négatifs (TN)**: 348. Les réclamations faibles correctement identifiées.\n",
    "\n",
    "2. **Rapport de Classification**:\n",
    "   - **Classe 0 (Faibles)**:\n",
    "     - **Précision (Precision)**: 0.59. Cela signifie que 59 % des réclamations prédites comme faibles étaient effectivement faibles.\n",
    "     - **Rappel (Recall)**: 0.64. 64 % des réclamations faibles réelles ont été correctement classées.\n",
    "     - **F1-Score**: 0.61. Moyenne harmonique de la précision et du rappel.\n",
    "\n",
    "   - **Classe 1 (Élevées)**:\n",
    "     - **Précision**: 0.64. 64 % des réclamations prédites comme élevées étaient vraiment élevées.\n",
    "     - **Rappel**: 0.59. 59 % des réclamations élevées réelles ont été correctement prédites.\n",
    "     - **F1-Score**: 0.62.\n",
    "\n",
    "   - **Exactitude Globale (Accuracy)**: 0.61. Le modèle prédit correctement 61 % du temps.\n",
    "   - **Moyenne Pondérée**:\n",
    "     - Les valeurs moyennes pondérées tiennent compte de l'inégalité de répartition entre les classes.\n",
    "\n",
    "### Analyse et Améliorations Potentielles\n",
    "\n",
    "1. **Déséquilibre des Classes**:\n",
    "   - Le rappel et la précision ne sont pas parfaits, ce qui peut indiquer un certain déséquilibre des classes. Il faudrait vérifier la répartition pour chaque classe et envisager des méthodes de suréchantillonnage (SMOTE) ou d'ajustement des poids (`class_weight`).\n",
    "\n",
    "2. **Hyperparamètres**:\n",
    "   - Effectuer une recherche plus fine des hyperparamètres, en ajustant les profondeurs des arbres et les critères d'impureté pour le modèle Random Forest.\n",
    "\n",
    "\n",
    "Ces étapes pourraient améliorer la précision et le rappel, donnant un meilleur équilibre global pour prédire les réclamations élevées et faibles."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "id": "cbad5db0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7fc0fa37d810>"
      ]
     },
     "execution_count": 240,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "plt.figure()\n",
    "plt.plot(fpr_rf, tpr_rf, label=f'Random Forest (AUC = {roc_auc_rf:.2f})')\n",
    "plt.plot([0, 1], [0, 1], 'k--')\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.ylim([0.0, 1.05])\n",
    "plt.xlabel('Taux de Faux Positifs (FPR)')\n",
    "plt.ylabel('Taux de Vrais Positifs (TPR)')\n",
    "plt.title('Courbe ROC')\n",
    "plt.legend(loc=\"lower right\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5cbc6b30",
   "metadata": {},
   "source": [
    "La courbe ROC (Receiver Operating Characteristic) et la métrique AUC (Area Under the Curve) affichées ici fournissent un aperçu de la performance du modèle Random Forest pour la classification des montants des réclamations en deux catégories.\n",
    "\n",
    "### Interprétation de la Courbe ROC\n",
    "\n",
    "1. **Axe des Abscisses (FPR)**:\n",
    "   - Le taux de faux positifs (FPR) mesure la proportion des réclamations faibles incorrectement classées comme élevées.\n",
    "\n",
    "2. **Axe des Ordonnées (TPR)**:\n",
    "   - Le taux de vrais positifs (TPR) mesure la proportion des réclamations élevées correctement prédites.\n",
    "\n",
    "3. **Courbe Diagonale**:\n",
    "   - La ligne en pointillés représente une classification aléatoire (aucun pouvoir prédictif), où FPR et TPR sont identiques.\n",
    "\n",
    "4. **Courbe ROC (Ligne Bleue)**:\n",
    "   - La courbe montre le compromis entre les taux de vrais positifs et de faux positifs pour différents seuils de probabilité.\n",
    "   - Une courbe plus proche du coin supérieur gauche (TPR élevé, FPR bas) indique un meilleur modèle.\n",
    "\n",
    "### Interprétation de l'AUC\n",
    "\n",
    "1. **AUC (0.67)**:\n",
    "   - Un AUC de 0.67 suggère une performance modérée du modèle Random Forest.\n",
    "   - Cette valeur signifie que le modèle peut distinguer correctement une réclamation élevée d'une faible 67 % du temps.\n",
    "   - Plus l'AUC est proche de 1.0, meilleur est le modèle. Un AUC de 0.5 signifie que le modèle n'a pas de pouvoir prédictif.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4d9a1054",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
